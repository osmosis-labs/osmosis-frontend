/*! For license information please see 99.bundle.js.LICENSE.txt */
(self.webpackChunk_keplr_wallet_extension=self.webpackChunk_keplr_wallet_extension||[]).push([[99],{18103:(A,e,t)=>{"use strict";t.d(e,{i:()=>r});const r="abi/5.7.0"},99780:(A,e,t)=>{"use strict";t.d(e,{R:()=>b,$:()=>S});var r=t(67640),i=t(80221),n=t(78011),o=t(18103),s=t(54848),a=t(89701);class l extends s.XI{constructor(A){super("address","address",A,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(A,e){try{e=(0,a.getAddress)(e)}catch(A){this._throwError(A.message,e)}return A.writeValue(e)}decode(A){return(0,a.getAddress)((0,r.hexZeroPad)(A.readValue().toHexString(),20))}}class c extends s.XI{constructor(A){super(A.name,A.type,void 0,A.dynamic),this.coder=A}defaultValue(){return this.coder.defaultValue()}encode(A,e){return this.coder.encode(A,e)}decode(A){return this.coder.decode(A)}}const g=new n.Yd(o.i);function u(A,e,t){let r=null;if(Array.isArray(t))r=t;else if(t&&"object"==typeof t){let A={};r=e.map((e=>{const r=e.localName;return r||g.throwError("cannot encode object for signature with missing names",n.Yd.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:t}),A[r]&&g.throwError("cannot encode object for signature with duplicate names",n.Yd.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:t}),A[r]=!0,t[r]}))}else g.throwArgumentError("invalid tuple value","tuple",t);e.length!==r.length&&g.throwArgumentError("types/value length mismatch","tuple",t);let i=new s.QV(A.wordSize),o=new s.QV(A.wordSize),a=[];e.forEach(((A,e)=>{let t=r[e];if(A.dynamic){let e=o.length;A.encode(o,t);let r=i.writeUpdatableValue();a.push((A=>{r(A+e)}))}else A.encode(i,t)})),a.forEach((A=>{A(i.length)}));let l=A.appendWriter(i);return l+=A.appendWriter(o),l}function h(A,e){let t=[],r=A.subReader(0);e.forEach((e=>{let i=null;if(e.dynamic){let t=A.readValue(),o=r.subReader(t.toNumber());try{i=e.decode(o)}catch(A){if(A.code===n.Yd.errors.BUFFER_OVERRUN)throw A;i=A,i.baseType=e.name,i.name=e.localName,i.type=e.type}}else try{i=e.decode(A)}catch(A){if(A.code===n.Yd.errors.BUFFER_OVERRUN)throw A;i=A,i.baseType=e.name,i.name=e.localName,i.type=e.type}null!=i&&t.push(i)}));const i=e.reduce(((A,e)=>{const t=e.localName;return t&&(A[t]||(A[t]=0),A[t]++),A}),{});e.forEach(((A,e)=>{let r=A.localName;if(!r||1!==i[r])return;if("length"===r&&(r="_length"),null!=t[r])return;const n=t[e];n instanceof Error?Object.defineProperty(t,r,{enumerable:!0,get:()=>{throw n}}):t[r]=n}));for(let A=0;A<t.length;A++){const e=t[A];e instanceof Error&&Object.defineProperty(t,A,{enumerable:!0,get:()=>{throw e}})}return Object.freeze(t)}class E extends s.XI{constructor(A,e,t){super("array",A.type+"["+(e>=0?e:"")+"]",t,-1===e||A.dynamic),this.coder=A,this.length=e}defaultValue(){const A=this.coder.defaultValue(),e=[];for(let t=0;t<this.length;t++)e.push(A);return e}encode(A,e){Array.isArray(e)||this._throwError("expected array value",e);let t=this.length;-1===t&&(t=e.length,A.writeValue(e.length)),g.checkArgumentCount(e.length,t,"coder array"+(this.localName?" "+this.localName:""));let r=[];for(let A=0;A<e.length;A++)r.push(this.coder);return u(A,r,e)}decode(A){let e=this.length;-1===e&&(e=A.readValue().toNumber(),32*e>A._data.length&&g.throwError("insufficient data length",n.Yd.errors.BUFFER_OVERRUN,{length:A._data.length,count:e}));let t=[];for(let A=0;A<e;A++)t.push(new c(this.coder));return A.coerce(this.name,h(A,t))}}class B extends s.XI{constructor(A){super("bool","bool",A,!1)}defaultValue(){return!1}encode(A,e){return A.writeValue(e?1:0)}decode(A){return A.coerce(this.type,!A.readValue().isZero())}}class I extends s.XI{constructor(A,e){super(A,A,e,!0)}defaultValue(){return"0x"}encode(A,e){e=(0,r.arrayify)(e);let t=A.writeValue(e.length);return t+=A.writeBytes(e),t}decode(A){return A.readBytes(A.readValue().toNumber(),!0)}}class f extends I{constructor(A){super("bytes",A)}decode(A){return A.coerce(this.name,(0,r.hexlify)(super.decode(A)))}}class p extends s.XI{constructor(A,e){let t="bytes"+String(A);super(t,t,e,!1),this.size=A}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(A,e){let t=(0,r.arrayify)(e);return t.length!==this.size&&this._throwError("incorrect data length",e),A.writeBytes(t)}decode(A){return A.coerce(this.name,(0,r.hexlify)(A.readBytes(this.size)))}}class d extends s.XI{constructor(A){super("null","",A,!1)}defaultValue(){return null}encode(A,e){return null!=e&&this._throwError("not null",e),A.writeBytes([])}decode(A){return A.readBytes(0),A.coerce(this.name,null)}}var w=t(10528),m=t(90711);class C extends s.XI{constructor(A,e,t){const r=(e?"int":"uint")+8*A;super(r,r,t,!1),this.size=A,this.signed=e}defaultValue(){return 0}encode(A,e){let t=w.O$.from(e),r=m.Bz.mask(8*A.wordSize);if(this.signed){let A=r.mask(8*this.size-1);(t.gt(A)||t.lt(A.add(m.fh).mul(m.tL)))&&this._throwError("value out-of-bounds",e)}else(t.lt(m._Y)||t.gt(r.mask(8*this.size)))&&this._throwError("value out-of-bounds",e);return t=t.toTwos(8*this.size).mask(8*this.size),this.signed&&(t=t.fromTwos(8*this.size).toTwos(8*A.wordSize)),A.writeValue(t)}decode(A){let e=A.readValue().mask(8*this.size);return this.signed&&(e=e.fromTwos(8*this.size)),A.coerce(this.name,e)}}var Q=t(2222);class R extends I{constructor(A){super("string",A)}defaultValue(){return""}encode(A,e){return super.encode(A,(0,Q.Y0)(e))}decode(A){return(0,Q.ZN)(super.decode(A))}}class y extends s.XI{constructor(A,e){let t=!1;const r=[];A.forEach((A=>{A.dynamic&&(t=!0),r.push(A.type)})),super("tuple","tuple("+r.join(",")+")",e,t),this.coders=A}defaultValue(){const A=[];this.coders.forEach((e=>{A.push(e.defaultValue())}));const e=this.coders.reduce(((A,e)=>{const t=e.localName;return t&&(A[t]||(A[t]=0),A[t]++),A}),{});return this.coders.forEach(((t,r)=>{let i=t.localName;i&&1===e[i]&&("length"===i&&(i="_length"),null==A[i]&&(A[i]=A[r]))})),Object.freeze(A)}encode(A,e){return u(A,this.coders,e)}decode(A){return A.coerce(this.name,h(A,this.coders))}}var U=t(79155);const v=new n.Yd(o.i),M=new RegExp(/^bytes([0-9]*)$/),T=new RegExp(/^(u?int)([0-9]*)$/);class b{constructor(A){(0,i.zG)(this,"coerceFunc",A||null)}_getCoder(A){switch(A.baseType){case"address":return new l(A.name);case"bool":return new B(A.name);case"string":return new R(A.name);case"bytes":return new f(A.name);case"array":return new E(this._getCoder(A.arrayChildren),A.arrayLength,A.name);case"tuple":return new y((A.components||[]).map((A=>this._getCoder(A))),A.name);case"":return new d(A.name)}let e=A.type.match(T);if(e){let t=parseInt(e[2]||"256");return(0===t||t>256||t%8!=0)&&v.throwArgumentError("invalid "+e[1]+" bit length","param",A),new C(t/8,"int"===e[1],A.name)}if(e=A.type.match(M),e){let t=parseInt(e[1]);return(0===t||t>32)&&v.throwArgumentError("invalid bytes length","param",A),new p(t,A.name)}return v.throwArgumentError("invalid type","type",A.type)}_getWordSize(){return 32}_getReader(A,e){return new s.Ej(A,this._getWordSize(),this.coerceFunc,e)}_getWriter(){return new s.QV(this._getWordSize())}getDefaultValue(A){const e=A.map((A=>this._getCoder(U._R.from(A))));return new y(e,"_").defaultValue()}encode(A,e){A.length!==e.length&&v.throwError("types/values length mismatch",n.Yd.errors.INVALID_ARGUMENT,{count:{types:A.length,values:e.length},value:{types:A,values:e}});const t=A.map((A=>this._getCoder(U._R.from(A)))),r=new y(t,"_"),i=this._getWriter();return r.encode(i,e),i.data}decode(A,e,t){const i=A.map((A=>this._getCoder(U._R.from(A))));return new y(i,"_").decode(this._getReader((0,r.arrayify)(e),t))}}const S=new b},54848:(A,e,t)=>{"use strict";t.d(e,{BR:()=>l,Ej:()=>u,QV:()=>g,XI:()=>c});var r=t(67640),i=t(10528),n=t(80221),o=t(78011),s=t(18103);const a=new o.Yd(s.i);function l(A){const e=[],t=function(A,r){if(Array.isArray(r))for(let i in r){const n=A.slice();n.push(i);try{t(n,r[i])}catch(A){e.push({path:n,error:A})}}};return t([],A),e}class c{constructor(A,e,t,r){this.name=A,this.type=e,this.localName=t,this.dynamic=r}_throwError(A,e){a.throwArgumentError(A,this.localName,e)}}class g{constructor(A){(0,n.zG)(this,"wordSize",A||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(A)}get data(){return(0,r.hexConcat)(this._data)}get length(){return this._dataLength}_writeData(A){return this._data.push(A),this._dataLength+=A.length,A.length}appendWriter(A){return this._writeData((0,r.concat)(A._data))}writeBytes(A){let e=(0,r.arrayify)(A);const t=e.length%this.wordSize;return t&&(e=(0,r.concat)([e,this._padding.slice(t)])),this._writeData(e)}_getValue(A){let e=(0,r.arrayify)(i.O$.from(A));return e.length>this.wordSize&&a.throwError("value out-of-bounds",o.Yd.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:e.length}),e.length%this.wordSize&&(e=(0,r.concat)([this._padding.slice(e.length%this.wordSize),e])),e}writeValue(A){return this._writeData(this._getValue(A))}writeUpdatableValue(){const A=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,e=>{this._data[A]=this._getValue(e)}}}class u{constructor(A,e,t,i){(0,n.zG)(this,"_data",(0,r.arrayify)(A)),(0,n.zG)(this,"wordSize",e||32),(0,n.zG)(this,"_coerceFunc",t),(0,n.zG)(this,"allowLoose",i),this._offset=0}get data(){return(0,r.hexlify)(this._data)}get consumed(){return this._offset}static coerce(A,e){let t=A.match("^u?int([0-9]+)$");return t&&parseInt(t[1])<=48&&(e=e.toNumber()),e}coerce(A,e){return this._coerceFunc?this._coerceFunc(A,e):u.coerce(A,e)}_peekBytes(A,e,t){let r=Math.ceil(e/this.wordSize)*this.wordSize;return this._offset+r>this._data.length&&(this.allowLoose&&t&&this._offset+e<=this._data.length?r=e:a.throwError("data out-of-bounds",o.Yd.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+r})),this._data.slice(this._offset,this._offset+r)}subReader(A){return new u(this._data.slice(this._offset+A),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(A,e){let t=this._peekBytes(0,A,!!e);return this._offset+=t.length,t.slice(0,A)}readValue(){return i.O$.from(this.readBytes(this.wordSize))}}},79155:(A,e,t)=>{"use strict";t.d(e,{HY:()=>f,IC:()=>y,QV:()=>p,Xg:()=>C,YW:()=>Q,_R:()=>B,pc:()=>h});var r=t(10528),i=t(80221),n=t(78011),o=t(18103);const s=new n.Yd(o.i),a={};let l={calldata:!0,memory:!0,storage:!0},c={calldata:!0,memory:!0};function g(A,e){if("bytes"===A||"string"===A){if(l[e])return!0}else if("address"===A){if("payable"===e)return!0}else if((A.indexOf("[")>=0||"tuple"===A)&&c[e])return!0;return(l[e]||"payable"===e)&&s.throwArgumentError("invalid modifier","name",e),!1}function u(A,e){for(let t in e)(0,i.zG)(A,t,e[t])}const h=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),E=new RegExp(/^(.*)\[([0-9]*)\]$/);class B{constructor(A,e){A!==a&&s.throwError("use fromString",n.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),u(this,e);let t=this.type.match(E);u(this,t?{arrayLength:parseInt(t[2]||"-1"),arrayChildren:B.fromObject({type:t[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}format(A){if(A||(A=h.sighash),h[A]||s.throwArgumentError("invalid format type","format",A),A===h.json){let e={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(e.indexed=this.indexed),this.components&&(e.components=this.components.map((e=>JSON.parse(e.format(A))))),JSON.stringify(e)}let e="";return"array"===this.baseType?(e+=this.arrayChildren.format(A),e+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(A!==h.sighash&&(e+=this.type),e+="("+this.components.map((e=>e.format(A))).join(A===h.full?", ":",")+")"):e+=this.type,A!==h.sighash&&(!0===this.indexed&&(e+=" indexed"),A===h.full&&this.name&&(e+=" "+this.name)),e}static from(A,e){return"string"==typeof A?B.fromString(A,e):B.fromObject(A)}static fromObject(A){return B.isParamType(A)?A:new B(a,{name:A.name||null,type:U(A.type),indexed:null==A.indexed?null:!!A.indexed,components:A.components?A.components.map(B.fromObject):null})}static fromString(A,e){return t=function(A,e){let t=A;function r(e){s.throwArgumentError(`unexpected character at position ${e}`,"param",A)}function i(A){let t={type:"",name:"",parent:A,state:{allowType:!0}};return e&&(t.indexed=!1),t}A=A.replace(/\s/g," ");let n={type:"",name:"",state:{allowType:!0}},o=n;for(let t=0;t<A.length;t++){let n=A[t];switch(n){case"(":o.state.allowType&&""===o.type?o.type="tuple":o.state.allowParams||r(t),o.state.allowType=!1,o.type=U(o.type),o.components=[i(o)],o=o.components[0];break;case")":delete o.state,"indexed"===o.name&&(e||r(t),o.indexed=!0,o.name=""),g(o.type,o.name)&&(o.name=""),o.type=U(o.type);let A=o;o=o.parent,o||r(t),delete A.parent,o.state.allowParams=!1,o.state.allowName=!0,o.state.allowArray=!0;break;case",":delete o.state,"indexed"===o.name&&(e||r(t),o.indexed=!0,o.name=""),g(o.type,o.name)&&(o.name=""),o.type=U(o.type);let s=i(o.parent);o.parent.components.push(s),delete o.parent,o=s;break;case" ":o.state.allowType&&""!==o.type&&(o.type=U(o.type),delete o.state.allowType,o.state.allowName=!0,o.state.allowParams=!0),o.state.allowName&&""!==o.name&&("indexed"===o.name?(e||r(t),o.indexed&&r(t),o.indexed=!0,o.name=""):g(o.type,o.name)?o.name="":o.state.allowName=!1);break;case"[":o.state.allowArray||r(t),o.type+=n,o.state.allowArray=!1,o.state.allowName=!1,o.state.readArray=!0;break;case"]":o.state.readArray||r(t),o.type+=n,o.state.readArray=!1,o.state.allowArray=!0,o.state.allowName=!0;break;default:o.state.allowType?(o.type+=n,o.state.allowParams=!0,o.state.allowArray=!0):o.state.allowName?(o.name+=n,delete o.state.allowArray):o.state.readArray?o.type+=n:r(t)}}return o.parent&&s.throwArgumentError("unexpected eof","param",A),delete n.state,"indexed"===o.name?(e||r(t.length-7),o.indexed&&r(t.length-7),o.indexed=!0,o.name=""):g(o.type,o.name)&&(o.name=""),n.type=U(n.type),n}(A,!!e),B.fromObject({name:t.name,type:t.type,indexed:t.indexed,components:t.components});var t}static isParamType(A){return!(null==A||!A._isParamType)}}function I(A,e){return function(A){A=A.trim();let e=[],t="",r=0;for(let i=0;i<A.length;i++){let n=A[i];","===n&&0===r?(e.push(t),t=""):(t+=n,"("===n?r++:")"===n&&(r--,-1===r&&s.throwArgumentError("unbalanced parenthesis","value",A)))}return t&&e.push(t),e}(A).map((A=>B.fromString(A,e)))}class f{constructor(A,e){A!==a&&s.throwError("use a static from method",n.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),u(this,e),this._isFragment=!0,Object.freeze(this)}static from(A){return f.isFragment(A)?A:"string"==typeof A?f.fromString(A):f.fromObject(A)}static fromObject(A){if(f.isFragment(A))return A;switch(A.type){case"function":return Q.fromObject(A);case"event":return p.fromObject(A);case"constructor":return C.fromObject(A);case"error":return y.fromObject(A);case"fallback":case"receive":return null}return s.throwArgumentError("invalid fragment object","value",A)}static fromString(A){return"event"===(A=(A=(A=A.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?p.fromString(A.substring(5).trim()):"function"===A.split(" ")[0]?Q.fromString(A.substring(8).trim()):"constructor"===A.split("(")[0].trim()?C.fromString(A.trim()):"error"===A.split(" ")[0]?y.fromString(A.substring(5).trim()):s.throwArgumentError("unsupported fragment","value",A)}static isFragment(A){return!(!A||!A._isFragment)}}class p extends f{format(A){if(A||(A=h.sighash),h[A]||s.throwArgumentError("invalid format type","format",A),A===h.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(A))))});let e="";return A!==h.sighash&&(e+="event "),e+=this.name+"("+this.inputs.map((e=>e.format(A))).join(A===h.full?", ":",")+") ",A!==h.sighash&&this.anonymous&&(e+="anonymous "),e.trim()}static from(A){return"string"==typeof A?p.fromString(A):p.fromObject(A)}static fromObject(A){if(p.isEventFragment(A))return A;"event"!==A.type&&s.throwArgumentError("invalid event object","value",A);const e={name:M(A.name),anonymous:A.anonymous,inputs:A.inputs?A.inputs.map(B.fromObject):[],type:"event"};return new p(a,e)}static fromString(A){let e=A.match(T);e||s.throwArgumentError("invalid event string","value",A);let t=!1;return e[3].split(" ").forEach((A=>{switch(A.trim()){case"anonymous":t=!0;break;case"":break;default:s.warn("unknown modifier: "+A)}})),p.fromObject({name:e[1].trim(),anonymous:t,inputs:I(e[2],!0),type:"event"})}static isEventFragment(A){return A&&A._isFragment&&"event"===A.type}}function d(A,e){e.gas=null;let t=A.split("@");return 1!==t.length?(t.length>2&&s.throwArgumentError("invalid human-readable ABI signature","value",A),t[1].match(/^[0-9]+$/)||s.throwArgumentError("invalid human-readable ABI signature gas","value",A),e.gas=r.O$.from(t[1]),t[0]):A}function w(A,e){e.constant=!1,e.payable=!1,e.stateMutability="nonpayable",A.split(" ").forEach((A=>{switch(A.trim()){case"constant":e.constant=!0;break;case"payable":e.payable=!0,e.stateMutability="payable";break;case"nonpayable":e.payable=!1,e.stateMutability="nonpayable";break;case"pure":e.constant=!0,e.stateMutability="pure";break;case"view":e.constant=!0,e.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+A)}}))}function m(A){let e={constant:!1,payable:!0,stateMutability:"payable"};return null!=A.stateMutability?(e.stateMutability=A.stateMutability,e.constant="view"===e.stateMutability||"pure"===e.stateMutability,null!=A.constant&&!!A.constant!==e.constant&&s.throwArgumentError("cannot have constant function with mutability "+e.stateMutability,"value",A),e.payable="payable"===e.stateMutability,null!=A.payable&&!!A.payable!==e.payable&&s.throwArgumentError("cannot have payable function with mutability "+e.stateMutability,"value",A)):null!=A.payable?(e.payable=!!A.payable,null!=A.constant||e.payable||"constructor"===A.type||s.throwArgumentError("unable to determine stateMutability","value",A),e.constant=!!A.constant,e.constant?e.stateMutability="view":e.stateMutability=e.payable?"payable":"nonpayable",e.payable&&e.constant&&s.throwArgumentError("cannot have constant payable function","value",A)):null!=A.constant?(e.constant=!!A.constant,e.payable=!e.constant,e.stateMutability=e.constant?"view":"payable"):"constructor"!==A.type&&s.throwArgumentError("unable to determine stateMutability","value",A),e}class C extends f{format(A){if(A||(A=h.sighash),h[A]||s.throwArgumentError("invalid format type","format",A),A===h.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(A))))});A===h.sighash&&s.throwError("cannot format a constructor for sighash",n.Yd.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let e="constructor("+this.inputs.map((e=>e.format(A))).join(A===h.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(e+=this.stateMutability+" "),e.trim()}static from(A){return"string"==typeof A?C.fromString(A):C.fromObject(A)}static fromObject(A){if(C.isConstructorFragment(A))return A;"constructor"!==A.type&&s.throwArgumentError("invalid constructor object","value",A);let e=m(A);e.constant&&s.throwArgumentError("constructor cannot be constant","value",A);const t={name:null,type:A.type,inputs:A.inputs?A.inputs.map(B.fromObject):[],payable:e.payable,stateMutability:e.stateMutability,gas:A.gas?r.O$.from(A.gas):null};return new C(a,t)}static fromString(A){let e={type:"constructor"},t=(A=d(A,e)).match(T);return t&&"constructor"===t[1].trim()||s.throwArgumentError("invalid constructor string","value",A),e.inputs=I(t[2].trim(),!1),w(t[3].trim(),e),C.fromObject(e)}static isConstructorFragment(A){return A&&A._isFragment&&"constructor"===A.type}}class Q extends C{format(A){if(A||(A=h.sighash),h[A]||s.throwArgumentError("invalid format type","format",A),A===h.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(A)))),outputs:this.outputs.map((e=>JSON.parse(e.format(A))))});let e="";return A!==h.sighash&&(e+="function "),e+=this.name+"("+this.inputs.map((e=>e.format(A))).join(A===h.full?", ":",")+") ",A!==h.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(e+=this.stateMutability+" "):this.constant&&(e+="view "),this.outputs&&this.outputs.length&&(e+="returns ("+this.outputs.map((e=>e.format(A))).join(", ")+") "),null!=this.gas&&(e+="@"+this.gas.toString()+" ")),e.trim()}static from(A){return"string"==typeof A?Q.fromString(A):Q.fromObject(A)}static fromObject(A){if(Q.isFunctionFragment(A))return A;"function"!==A.type&&s.throwArgumentError("invalid function object","value",A);let e=m(A);const t={type:A.type,name:M(A.name),constant:e.constant,inputs:A.inputs?A.inputs.map(B.fromObject):[],outputs:A.outputs?A.outputs.map(B.fromObject):[],payable:e.payable,stateMutability:e.stateMutability,gas:A.gas?r.O$.from(A.gas):null};return new Q(a,t)}static fromString(A){let e={type:"function"},t=(A=d(A,e)).split(" returns ");t.length>2&&s.throwArgumentError("invalid function string","value",A);let r=t[0].match(T);if(r||s.throwArgumentError("invalid function signature","value",A),e.name=r[1].trim(),e.name&&M(e.name),e.inputs=I(r[2],!1),w(r[3].trim(),e),t.length>1){let r=t[1].match(T);""==r[1].trim()&&""==r[3].trim()||s.throwArgumentError("unexpected tokens","value",A),e.outputs=I(r[2],!1)}else e.outputs=[];return Q.fromObject(e)}static isFunctionFragment(A){return A&&A._isFragment&&"function"===A.type}}function R(A){const e=A.format();return"Error(string)"!==e&&"Panic(uint256)"!==e||s.throwArgumentError(`cannot specify user defined ${e} error`,"fragment",A),A}class y extends f{format(A){if(A||(A=h.sighash),h[A]||s.throwArgumentError("invalid format type","format",A),A===h.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(A))))});let e="";return A!==h.sighash&&(e+="error "),e+=this.name+"("+this.inputs.map((e=>e.format(A))).join(A===h.full?", ":",")+") ",e.trim()}static from(A){return"string"==typeof A?y.fromString(A):y.fromObject(A)}static fromObject(A){if(y.isErrorFragment(A))return A;"error"!==A.type&&s.throwArgumentError("invalid error object","value",A);const e={type:A.type,name:M(A.name),inputs:A.inputs?A.inputs.map(B.fromObject):[]};return R(new y(a,e))}static fromString(A){let e={type:"error"},t=A.match(T);return t||s.throwArgumentError("invalid error signature","value",A),e.name=t[1].trim(),e.name&&M(e.name),e.inputs=I(t[2],!1),R(y.fromObject(e))}static isErrorFragment(A){return A&&A._isFragment&&"error"===A.type}}function U(A){return A.match(/^uint($|[^1-9])/)?A="uint256"+A.substring(4):A.match(/^int($|[^1-9])/)&&(A="int256"+A.substring(3)),A}const v=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function M(A){return A&&A.match(v)||s.throwArgumentError(`invalid identifier "${A}"`,"value",A),A}const T=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$")},65575:(A,e,t)=>{"use strict";t.r(e),t.d(e,{AbiCoder:()=>i.R,ConstructorFragment:()=>r.Xg,ErrorFragment:()=>r.IC,EventFragment:()=>r.QV,FormatTypes:()=>r.pc,Fragment:()=>r.HY,FunctionFragment:()=>r.YW,Indexed:()=>n.Hk,Interface:()=>n.vU,LogDescription:()=>n.CC,ParamType:()=>r._R,TransactionDescription:()=>n.vk,checkResultErrors:()=>o.BR,defaultAbiCoder:()=>i.$});var r=t(79155),i=t(99780),n=t(73868),o=t(54848)},73868:(A,e,t)=>{"use strict";t.d(e,{Hk:()=>d,vU:()=>C,CC:()=>I,vk:()=>f});var r=t(89701),i=t(10528),n=t(67640),o=t(32235),s=t(83669),a=t.n(s);function l(A){return"0x"+a().keccak_256((0,n.arrayify)(A))}var c=t(80221),g=t(99780),u=t(79155),h=t(78011),E=t(18103);const B=new h.Yd(E.i);class I extends c.dk{}class f extends c.dk{}class p extends c.dk{}class d extends c.dk{static isIndexed(A){return!(!A||!A._isIndexed)}}const w={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function m(A,e){const t=new Error(`deferred error during ABI decoding triggered accessing ${A}`);return t.error=e,t}class C{constructor(A){let e=[];e="string"==typeof A?JSON.parse(A):A,(0,c.zG)(this,"fragments",e.map((A=>u.HY.from(A))).filter((A=>null!=A))),(0,c.zG)(this,"_abiCoder",(0,c.tu)(new.target,"getAbiCoder")()),(0,c.zG)(this,"functions",{}),(0,c.zG)(this,"errors",{}),(0,c.zG)(this,"events",{}),(0,c.zG)(this,"structs",{}),this.fragments.forEach((A=>{let e=null;switch(A.type){case"constructor":return this.deploy?void B.warn("duplicate definition - constructor"):void(0,c.zG)(this,"deploy",A);case"function":e=this.functions;break;case"event":e=this.events;break;case"error":e=this.errors;break;default:return}let t=A.format();e[t]?B.warn("duplicate definition - "+t):e[t]=A})),this.deploy||(0,c.zG)(this,"deploy",u.Xg.from({payable:!1,type:"constructor"})),(0,c.zG)(this,"_isInterface",!0)}format(A){A||(A=u.pc.full),A===u.pc.sighash&&B.throwArgumentError("interface does not support formatting sighash","format",A);const e=this.fragments.map((e=>e.format(A)));return A===u.pc.json?JSON.stringify(e.map((A=>JSON.parse(A)))):e}static getAbiCoder(){return g.$}static getAddress(A){return(0,r.getAddress)(A)}static getSighash(A){return(0,n.hexDataSlice)((0,o.id)(A.format()),0,4)}static getEventTopic(A){return(0,o.id)(A.format())}getFunction(A){if((0,n.isHexString)(A)){for(const e in this.functions)if(A===this.getSighash(e))return this.functions[e];B.throwArgumentError("no matching function","sighash",A)}if(-1===A.indexOf("(")){const e=A.trim(),t=Object.keys(this.functions).filter((A=>A.split("(")[0]===e));return 0===t.length?B.throwArgumentError("no matching function","name",e):t.length>1&&B.throwArgumentError("multiple matching functions","name",e),this.functions[t[0]]}const e=this.functions[u.YW.fromString(A).format()];return e||B.throwArgumentError("no matching function","signature",A),e}getEvent(A){if((0,n.isHexString)(A)){const e=A.toLowerCase();for(const A in this.events)if(e===this.getEventTopic(A))return this.events[A];B.throwArgumentError("no matching event","topichash",e)}if(-1===A.indexOf("(")){const e=A.trim(),t=Object.keys(this.events).filter((A=>A.split("(")[0]===e));return 0===t.length?B.throwArgumentError("no matching event","name",e):t.length>1&&B.throwArgumentError("multiple matching events","name",e),this.events[t[0]]}const e=this.events[u.QV.fromString(A).format()];return e||B.throwArgumentError("no matching event","signature",A),e}getError(A){if((0,n.isHexString)(A)){const e=(0,c.tu)(this.constructor,"getSighash");for(const t in this.errors)if(A===e(this.errors[t]))return this.errors[t];B.throwArgumentError("no matching error","sighash",A)}if(-1===A.indexOf("(")){const e=A.trim(),t=Object.keys(this.errors).filter((A=>A.split("(")[0]===e));return 0===t.length?B.throwArgumentError("no matching error","name",e):t.length>1&&B.throwArgumentError("multiple matching errors","name",e),this.errors[t[0]]}const e=this.errors[u.YW.fromString(A).format()];return e||B.throwArgumentError("no matching error","signature",A),e}getSighash(A){if("string"==typeof A)try{A=this.getFunction(A)}catch(e){try{A=this.getError(A)}catch(A){throw e}}return(0,c.tu)(this.constructor,"getSighash")(A)}getEventTopic(A){return"string"==typeof A&&(A=this.getEvent(A)),(0,c.tu)(this.constructor,"getEventTopic")(A)}_decodeParams(A,e){return this._abiCoder.decode(A,e)}_encodeParams(A,e){return this._abiCoder.encode(A,e)}encodeDeploy(A){return this._encodeParams(this.deploy.inputs,A||[])}decodeErrorResult(A,e){"string"==typeof A&&(A=this.getError(A));const t=(0,n.arrayify)(e);return(0,n.hexlify)(t.slice(0,4))!==this.getSighash(A)&&B.throwArgumentError(`data signature does not match error ${A.name}.`,"data",(0,n.hexlify)(t)),this._decodeParams(A.inputs,t.slice(4))}encodeErrorResult(A,e){return"string"==typeof A&&(A=this.getError(A)),(0,n.hexlify)((0,n.concat)([this.getSighash(A),this._encodeParams(A.inputs,e||[])]))}decodeFunctionData(A,e){"string"==typeof A&&(A=this.getFunction(A));const t=(0,n.arrayify)(e);return(0,n.hexlify)(t.slice(0,4))!==this.getSighash(A)&&B.throwArgumentError(`data signature does not match function ${A.name}.`,"data",(0,n.hexlify)(t)),this._decodeParams(A.inputs,t.slice(4))}encodeFunctionData(A,e){return"string"==typeof A&&(A=this.getFunction(A)),(0,n.hexlify)((0,n.concat)([this.getSighash(A),this._encodeParams(A.inputs,e||[])]))}decodeFunctionResult(A,e){"string"==typeof A&&(A=this.getFunction(A));let t=(0,n.arrayify)(e),r=null,i="",o=null,s=null,a=null;switch(t.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(A.outputs,t)}catch(A){}break;case 4:{const A=(0,n.hexlify)(t.slice(0,4)),e=w[A];if(e)o=this._abiCoder.decode(e.inputs,t.slice(4)),s=e.name,a=e.signature,e.reason&&(r=o[0]),"Error"===s?i=`; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(o[0])}`:"Panic"===s&&(i=`; VM Exception while processing transaction: reverted with panic code ${o[0]}`);else try{const e=this.getError(A);o=this._abiCoder.decode(e.inputs,t.slice(4)),s=e.name,a=e.format()}catch(A){}break}}return B.throwError("call revert exception"+i,h.Yd.errors.CALL_EXCEPTION,{method:A.format(),data:(0,n.hexlify)(e),errorArgs:o,errorName:s,errorSignature:a,reason:r})}encodeFunctionResult(A,e){return"string"==typeof A&&(A=this.getFunction(A)),(0,n.hexlify)(this._abiCoder.encode(A.outputs,e||[]))}encodeFilterTopics(A,e){"string"==typeof A&&(A=this.getEvent(A)),e.length>A.inputs.length&&B.throwError("too many arguments for "+A.format(),h.Yd.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:e});let t=[];A.anonymous||t.push(this.getEventTopic(A));const r=(A,e)=>"string"===A.type?(0,o.id)(e):"bytes"===A.type?l((0,n.hexlify)(e)):("bool"===A.type&&"boolean"==typeof e&&(e=e?"0x01":"0x00"),A.type.match(/^u?int/)&&(e=i.O$.from(e).toHexString()),"address"===A.type&&this._abiCoder.encode(["address"],[e]),(0,n.hexZeroPad)((0,n.hexlify)(e),32));for(e.forEach(((e,i)=>{let n=A.inputs[i];n.indexed?null==e?t.push(null):"array"===n.baseType||"tuple"===n.baseType?B.throwArgumentError("filtering with tuples or arrays not supported","contract."+n.name,e):Array.isArray(e)?t.push(e.map((A=>r(n,A)))):t.push(r(n,e)):null!=e&&B.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+n.name,e)}));t.length&&null===t[t.length-1];)t.pop();return t}encodeEventLog(A,e){"string"==typeof A&&(A=this.getEvent(A));const t=[],r=[],i=[];return A.anonymous||t.push(this.getEventTopic(A)),e.length!==A.inputs.length&&B.throwArgumentError("event arguments/values mismatch","values",e),A.inputs.forEach(((A,n)=>{const s=e[n];if(A.indexed)if("string"===A.type)t.push((0,o.id)(s));else if("bytes"===A.type)t.push(l(s));else{if("tuple"===A.baseType||"array"===A.baseType)throw new Error("not implemented");t.push(this._abiCoder.encode([A.type],[s]))}else r.push(A),i.push(s)})),{data:this._abiCoder.encode(r,i),topics:t}}decodeEventLog(A,e,t){if("string"==typeof A&&(A=this.getEvent(A)),null!=t&&!A.anonymous){let e=this.getEventTopic(A);(0,n.isHexString)(t[0],32)&&t[0].toLowerCase()===e||B.throwError("fragment/topic mismatch",h.Yd.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:e,value:t[0]}),t=t.slice(1)}let r=[],i=[],o=[];A.inputs.forEach(((A,e)=>{A.indexed?"string"===A.type||"bytes"===A.type||"tuple"===A.baseType||"array"===A.baseType?(r.push(u._R.fromObject({type:"bytes32",name:A.name})),o.push(!0)):(r.push(A),o.push(!1)):(i.push(A),o.push(!1))}));let s=null!=t?this._abiCoder.decode(r,(0,n.concat)(t)):null,a=this._abiCoder.decode(i,e,!0),l=[],c=0,g=0;A.inputs.forEach(((A,e)=>{if(A.indexed)if(null==s)l[e]=new d({_isIndexed:!0,hash:null});else if(o[e])l[e]=new d({_isIndexed:!0,hash:s[g++]});else try{l[e]=s[g++]}catch(A){l[e]=A}else try{l[e]=a[c++]}catch(A){l[e]=A}if(A.name&&null==l[A.name]){const t=l[e];t instanceof Error?Object.defineProperty(l,A.name,{enumerable:!0,get:()=>{throw m(`property ${JSON.stringify(A.name)}`,t)}}):l[A.name]=t}}));for(let A=0;A<l.length;A++){const e=l[A];e instanceof Error&&Object.defineProperty(l,A,{enumerable:!0,get:()=>{throw m(`index ${A}`,e)}})}return Object.freeze(l)}parseTransaction(A){let e=this.getFunction(A.data.substring(0,10).toLowerCase());return e?new f({args:this._abiCoder.decode(e.inputs,"0x"+A.data.substring(10)),functionFragment:e,name:e.name,signature:e.format(),sighash:this.getSighash(e),value:i.O$.from(A.value||"0")}):null}parseLog(A){let e=this.getEvent(A.topics[0]);return!e||e.anonymous?null:new I({eventFragment:e,name:e.name,signature:e.format(),topic:this.getEventTopic(e),args:this.decodeEventLog(e,A.data,A.topics)})}parseError(A){const e=(0,n.hexlify)(A);let t=this.getError(e.substring(0,10).toLowerCase());return t?new p({args:this._abiCoder.decode(t.inputs,"0x"+e.substring(10)),errorFragment:t,name:t.name,signature:t.format(),sighash:this.getSighash(t)}):null}static isInterface(A){return!(!A||!A._isInterface)}}},89701:(A,e,t)=>{"use strict";t.r(e),t.d(e,{getAddress:()=>B,getContractAddress:()=>p,getCreate2Address:()=>d,getIcapAddress:()=>f,isAddress:()=>I});var r=t(67640),i=t(10528),n=t(83669),o=t.n(n);function s(A){return"0x"+o().keccak_256((0,r.arrayify)(A))}var a=t(48669);const l=new(t(78011).Yd)("address/5.7.0");function c(A){(0,r.isHexString)(A,20)||l.throwArgumentError("invalid address","address",A);const e=(A=A.toLowerCase()).substring(2).split(""),t=new Uint8Array(40);for(let A=0;A<40;A++)t[A]=e[A].charCodeAt(0);const i=(0,r.arrayify)(s(t));for(let A=0;A<40;A+=2)i[A>>1]>>4>=8&&(e[A]=e[A].toUpperCase()),(15&i[A>>1])>=8&&(e[A+1]=e[A+1].toUpperCase());return"0x"+e.join("")}const g={};for(let A=0;A<10;A++)g[String(A)]=String(A);for(let A=0;A<26;A++)g[String.fromCharCode(65+A)]=String(10+A);const u=Math.floor((h=9007199254740991,Math.log10?Math.log10(h):Math.log(h)/Math.LN10));var h;function E(A){let e=(A=(A=A.toUpperCase()).substring(4)+A.substring(0,2)+"00").split("").map((A=>g[A])).join("");for(;e.length>=u;){let A=e.substring(0,u);e=parseInt(A,10)%97+e.substring(A.length)}let t=String(98-parseInt(e,10)%97);for(;t.length<2;)t="0"+t;return t}function B(A){let e=null;if("string"!=typeof A&&l.throwArgumentError("invalid address","address",A),A.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==A.substring(0,2)&&(A="0x"+A),e=c(A),A.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&e!==A&&l.throwArgumentError("bad address checksum","address",A);else if(A.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(A.substring(2,4)!==E(A)&&l.throwArgumentError("bad icap checksum","address",A),e=(0,i.g$)(A.substring(4));e.length<40;)e="0"+e;e=c("0x"+e)}else l.throwArgumentError("invalid address","address",A);return e}function I(A){try{return B(A),!0}catch(A){}return!1}function f(A){let e=(0,i.t2)(B(A).substring(2)).toUpperCase();for(;e.length<30;)e="0"+e;return"XE"+E("XE00"+e)+e}function p(A){let e=null;try{e=B(A.from)}catch(e){l.throwArgumentError("missing from address","transaction",A)}const t=(0,r.stripZeros)((0,r.arrayify)(i.O$.from(A.nonce).toHexString()));return B((0,r.hexDataSlice)(s((0,a.c)([e,t])),12))}function d(A,e,t){return 32!==(0,r.hexDataLength)(e)&&l.throwArgumentError("salt must be 32 bytes","salt",e),32!==(0,r.hexDataLength)(t)&&l.throwArgumentError("initCodeHash must be 32 bytes","initCodeHash",t),B((0,r.hexDataSlice)(s((0,r.concat)(["0xff",B(A),e,t])),12))}},43495:(A,e,t)=>{"use strict";t.d(e,{i:()=>r});const r="bignumber/5.7.0"},10528:(A,e,t)=>{"use strict";t.d(e,{O$:()=>E,Zm:()=>u,g$:()=>d,t2:()=>w});var r=t(54269),i=t.n(r),n=t(67640),o=t(78011),s=t(43495),a=i().BN;const l=new o.Yd(s.i),c={},g=9007199254740991;function u(A){return null!=A&&(E.isBigNumber(A)||"number"==typeof A&&A%1==0||"string"==typeof A&&!!A.match(/^-?[0-9]+$/)||(0,n.isHexString)(A)||"bigint"==typeof A||(0,n.isBytes)(A))}let h=!1;class E{constructor(A,e){A!==c&&l.throwError("cannot call constructor directly; use BigNumber.from",o.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=e,this._isBigNumber=!0,Object.freeze(this)}fromTwos(A){return I(f(this).fromTwos(A))}toTwos(A){return I(f(this).toTwos(A))}abs(){return"-"===this._hex[0]?E.from(this._hex.substring(1)):this}add(A){return I(f(this).add(f(A)))}sub(A){return I(f(this).sub(f(A)))}div(A){return E.from(A).isZero()&&p("division-by-zero","div"),I(f(this).div(f(A)))}mul(A){return I(f(this).mul(f(A)))}mod(A){const e=f(A);return e.isNeg()&&p("division-by-zero","mod"),I(f(this).umod(e))}pow(A){const e=f(A);return e.isNeg()&&p("negative-power","pow"),I(f(this).pow(e))}and(A){const e=f(A);return(this.isNegative()||e.isNeg())&&p("unbound-bitwise-result","and"),I(f(this).and(e))}or(A){const e=f(A);return(this.isNegative()||e.isNeg())&&p("unbound-bitwise-result","or"),I(f(this).or(e))}xor(A){const e=f(A);return(this.isNegative()||e.isNeg())&&p("unbound-bitwise-result","xor"),I(f(this).xor(e))}mask(A){return(this.isNegative()||A<0)&&p("negative-width","mask"),I(f(this).maskn(A))}shl(A){return(this.isNegative()||A<0)&&p("negative-width","shl"),I(f(this).shln(A))}shr(A){return(this.isNegative()||A<0)&&p("negative-width","shr"),I(f(this).shrn(A))}eq(A){return f(this).eq(f(A))}lt(A){return f(this).lt(f(A))}lte(A){return f(this).lte(f(A))}gt(A){return f(this).gt(f(A))}gte(A){return f(this).gte(f(A))}isNegative(){return"-"===this._hex[0]}isZero(){return f(this).isZero()}toNumber(){try{return f(this).toNumber()}catch(A){p("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(A){}return l.throwError("this platform does not support BigInt",o.Yd.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?h||(h=!0,l.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?l.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",o.Yd.errors.UNEXPECTED_ARGUMENT,{}):l.throwError("BigNumber.toString does not accept parameters",o.Yd.errors.UNEXPECTED_ARGUMENT,{})),f(this).toString(10)}toHexString(){return this._hex}toJSON(A){return{type:"BigNumber",hex:this.toHexString()}}static from(A){if(A instanceof E)return A;if("string"==typeof A)return A.match(/^-?0x[0-9a-f]+$/i)?new E(c,B(A)):A.match(/^-?[0-9]+$/)?new E(c,B(new a(A))):l.throwArgumentError("invalid BigNumber string","value",A);if("number"==typeof A)return A%1&&p("underflow","BigNumber.from",A),(A>=g||A<=-g)&&p("overflow","BigNumber.from",A),E.from(String(A));const e=A;if("bigint"==typeof e)return E.from(e.toString());if((0,n.isBytes)(e))return E.from((0,n.hexlify)(e));if(e)if(e.toHexString){const A=e.toHexString();if("string"==typeof A)return E.from(A)}else{let A=e._hex;if(null==A&&"BigNumber"===e.type&&(A=e.hex),"string"==typeof A&&((0,n.isHexString)(A)||"-"===A[0]&&(0,n.isHexString)(A.substring(1))))return E.from(A)}return l.throwArgumentError("invalid BigNumber value","value",A)}static isBigNumber(A){return!(!A||!A._isBigNumber)}}function B(A){if("string"!=typeof A)return B(A.toString(16));if("-"===A[0])return"-"===(A=A.substring(1))[0]&&l.throwArgumentError("invalid hex","value",A),"0x00"===(A=B(A))?A:"-"+A;if("0x"!==A.substring(0,2)&&(A="0x"+A),"0x"===A)return"0x00";for(A.length%2&&(A="0x0"+A.substring(2));A.length>4&&"0x00"===A.substring(0,4);)A="0x"+A.substring(4);return A}function I(A){return E.from(B(A))}function f(A){const e=E.from(A).toHexString();return"-"===e[0]?new a("-"+e.substring(3),16):new a(e.substring(2),16)}function p(A,e,t){const r={fault:A,operation:e};return null!=t&&(r.value=t),l.throwError(A,o.Yd.errors.NUMERIC_FAULT,r)}function d(A){return new a(A,36).toString(16)}function w(A){return new a(A,16).toString(36)}},54269:function(A,e,t){!function(A,e){"use strict";function r(A,e){if(!A)throw new Error(e||"Assertion failed")}function i(A,e){A.super_=e;var t=function(){};t.prototype=e.prototype,A.prototype=new t,A.prototype.constructor=A}function n(A,e,t){if(n.isBN(A))return A;this.negative=0,this.words=null,this.length=0,this.red=null,null!==A&&("le"!==e&&"be"!==e||(t=e,e=10),this._init(A||0,e||10,t||"be"))}var o;"object"==typeof A?A.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:t(29005).Buffer}catch(A){}function s(A,e){var t=A.charCodeAt(e);return t>=48&&t<=57?t-48:t>=65&&t<=70?t-55:t>=97&&t<=102?t-87:void r(!1,"Invalid character in "+A)}function a(A,e,t){var r=s(A,t);return t-1>=e&&(r|=s(A,t-1)<<4),r}function l(A,e,t,i){for(var n=0,o=0,s=Math.min(A.length,t),a=e;a<s;a++){var l=A.charCodeAt(a)-48;n*=i,o=l>=49?l-49+10:l>=17?l-17+10:l,r(l>=0&&o<i,"Invalid character"),n+=o}return n}function c(A,e){A.words=e.words,A.length=e.length,A.negative=e.negative,A.red=e.red}if(n.isBN=function(A){return A instanceof n||null!==A&&"object"==typeof A&&A.constructor.wordSize===n.wordSize&&Array.isArray(A.words)},n.max=function(A,e){return A.cmp(e)>0?A:e},n.min=function(A,e){return A.cmp(e)<0?A:e},n.prototype._init=function(A,e,t){if("number"==typeof A)return this._initNumber(A,e,t);if("object"==typeof A)return this._initArray(A,e,t);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(A=A.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<A.length&&(16===e?this._parseHex(A,i,t):(this._parseBase(A,e,i),"le"===t&&this._initArray(this.toArray(),e,t)))},n.prototype._initNumber=function(A,e,t){A<0&&(this.negative=1,A=-A),A<67108864?(this.words=[67108863&A],this.length=1):A<4503599627370496?(this.words=[67108863&A,A/67108864&67108863],this.length=2):(r(A<9007199254740992),this.words=[67108863&A,A/67108864&67108863,1],this.length=3),"le"===t&&this._initArray(this.toArray(),e,t)},n.prototype._initArray=function(A,e,t){if(r("number"==typeof A.length),A.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(A.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o,s=0;if("be"===t)for(i=A.length-1,n=0;i>=0;i-=3)o=A[i]|A[i-1]<<8|A[i-2]<<16,this.words[n]|=o<<s&67108863,this.words[n+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,n++);else if("le"===t)for(i=0,n=0;i<A.length;i+=3)o=A[i]|A[i+1]<<8|A[i+2]<<16,this.words[n]|=o<<s&67108863,this.words[n+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,n++);return this._strip()},n.prototype._parseHex=function(A,e,t){this.length=Math.ceil((A.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,n=0,o=0;if("be"===t)for(r=A.length-1;r>=e;r-=2)i=a(A,e,r)<<n,this.words[o]|=67108863&i,n>=18?(n-=18,o+=1,this.words[o]|=i>>>26):n+=8;else for(r=(A.length-e)%2==0?e+1:e;r<A.length;r+=2)i=a(A,e,r)<<n,this.words[o]|=67108863&i,n>=18?(n-=18,o+=1,this.words[o]|=i>>>26):n+=8;this._strip()},n.prototype._parseBase=function(A,e,t){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var n=A.length-t,o=n%r,s=Math.min(n,n-o)+t,a=0,c=t;c<s;c+=r)a=l(A,c,c+r,e),this.imuln(i),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==o){var g=1;for(a=l(A,c,A.length,e),c=0;c<o;c++)g*=e;this.imuln(g),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}this._strip()},n.prototype.copy=function(A){A.words=new Array(this.length);for(var e=0;e<this.length;e++)A.words[e]=this.words[e];A.length=this.length,A.negative=this.negative,A.red=this.red},n.prototype._move=function(A){c(A,this)},n.prototype.clone=function(){var A=new n(null);return this.copy(A),A},n.prototype._expand=function(A){for(;this.length<A;)this.words[this.length++]=0;return this},n.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{n.prototype[Symbol.for("nodejs.util.inspect.custom")]=g}catch(A){n.prototype.inspect=g}else n.prototype.inspect=g;function g(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],h=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],E=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function B(A,e,t){t.negative=e.negative^A.negative;var r=A.length+e.length|0;t.length=r,r=r-1|0;var i=0|A.words[0],n=0|e.words[0],o=i*n,s=67108863&o,a=o/67108864|0;t.words[0]=s;for(var l=1;l<r;l++){for(var c=a>>>26,g=67108863&a,u=Math.min(l,e.length-1),h=Math.max(0,l-A.length+1);h<=u;h++){var E=l-h|0;c+=(o=(i=0|A.words[E])*(n=0|e.words[h])+g)/67108864|0,g=67108863&o}t.words[l]=0|g,a=0|c}return 0!==a?t.words[l]=0|a:t.length--,t._strip()}n.prototype.toString=function(A,e){var t;if(e=0|e||1,16===(A=A||10)||"hex"===A){t="";for(var i=0,n=0,o=0;o<this.length;o++){var s=this.words[o],a=(16777215&(s<<i|n)).toString(16);n=s>>>24-i&16777215,(i+=2)>=26&&(i-=26,o--),t=0!==n||o!==this.length-1?u[6-a.length]+a+t:a+t}for(0!==n&&(t=n.toString(16)+t);t.length%e!=0;)t="0"+t;return 0!==this.negative&&(t="-"+t),t}if(A===(0|A)&&A>=2&&A<=36){var l=h[A],c=E[A];t="";var g=this.clone();for(g.negative=0;!g.isZero();){var B=g.modrn(c).toString(A);t=(g=g.idivn(c)).isZero()?B+t:u[l-B.length]+B+t}for(this.isZero()&&(t="0"+t);t.length%e!=0;)t="0"+t;return 0!==this.negative&&(t="-"+t),t}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var A=this.words[0];return 2===this.length?A+=67108864*this.words[1]:3===this.length&&1===this.words[2]?A+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-A:A},n.prototype.toJSON=function(){return this.toString(16,2)},o&&(n.prototype.toBuffer=function(A,e){return this.toArrayLike(o,A,e)}),n.prototype.toArray=function(A,e){return this.toArrayLike(Array,A,e)},n.prototype.toArrayLike=function(A,e,t){this._strip();var i=this.byteLength(),n=t||Math.max(1,i);r(i<=n,"byte array longer than desired length"),r(n>0,"Requested array length <= 0");var o=function(A,e){return A.allocUnsafe?A.allocUnsafe(e):new A(e)}(A,n);return this["_toArrayLike"+("le"===e?"LE":"BE")](o,i),o},n.prototype._toArrayLikeLE=function(A,e){for(var t=0,r=0,i=0,n=0;i<this.length;i++){var o=this.words[i]<<n|r;A[t++]=255&o,t<A.length&&(A[t++]=o>>8&255),t<A.length&&(A[t++]=o>>16&255),6===n?(t<A.length&&(A[t++]=o>>24&255),r=0,n=0):(r=o>>>24,n+=2)}if(t<A.length)for(A[t++]=r;t<A.length;)A[t++]=0},n.prototype._toArrayLikeBE=function(A,e){for(var t=A.length-1,r=0,i=0,n=0;i<this.length;i++){var o=this.words[i]<<n|r;A[t--]=255&o,t>=0&&(A[t--]=o>>8&255),t>=0&&(A[t--]=o>>16&255),6===n?(t>=0&&(A[t--]=o>>24&255),r=0,n=0):(r=o>>>24,n+=2)}if(t>=0)for(A[t--]=r;t>=0;)A[t--]=0},Math.clz32?n.prototype._countBits=function(A){return 32-Math.clz32(A)}:n.prototype._countBits=function(A){var e=A,t=0;return e>=4096&&(t+=13,e>>>=13),e>=64&&(t+=7,e>>>=7),e>=8&&(t+=4,e>>>=4),e>=2&&(t+=2,e>>>=2),t+e},n.prototype._zeroBits=function(A){if(0===A)return 26;var e=A,t=0;return 0==(8191&e)&&(t+=13,e>>>=13),0==(127&e)&&(t+=7,e>>>=7),0==(15&e)&&(t+=4,e>>>=4),0==(3&e)&&(t+=2,e>>>=2),0==(1&e)&&t++,t},n.prototype.bitLength=function(){var A=this.words[this.length-1],e=this._countBits(A);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var A=0,e=0;e<this.length;e++){var t=this._zeroBits(this.words[e]);if(A+=t,26!==t)break}return A},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(A){return 0!==this.negative?this.abs().inotn(A).iaddn(1):this.clone()},n.prototype.fromTwos=function(A){return this.testn(A-1)?this.notn(A).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(A){for(;this.length<A.length;)this.words[this.length++]=0;for(var e=0;e<A.length;e++)this.words[e]=this.words[e]|A.words[e];return this._strip()},n.prototype.ior=function(A){return r(0==(this.negative|A.negative)),this.iuor(A)},n.prototype.or=function(A){return this.length>A.length?this.clone().ior(A):A.clone().ior(this)},n.prototype.uor=function(A){return this.length>A.length?this.clone().iuor(A):A.clone().iuor(this)},n.prototype.iuand=function(A){var e;e=this.length>A.length?A:this;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]&A.words[t];return this.length=e.length,this._strip()},n.prototype.iand=function(A){return r(0==(this.negative|A.negative)),this.iuand(A)},n.prototype.and=function(A){return this.length>A.length?this.clone().iand(A):A.clone().iand(this)},n.prototype.uand=function(A){return this.length>A.length?this.clone().iuand(A):A.clone().iuand(this)},n.prototype.iuxor=function(A){var e,t;this.length>A.length?(e=this,t=A):(e=A,t=this);for(var r=0;r<t.length;r++)this.words[r]=e.words[r]^t.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this._strip()},n.prototype.ixor=function(A){return r(0==(this.negative|A.negative)),this.iuxor(A)},n.prototype.xor=function(A){return this.length>A.length?this.clone().ixor(A):A.clone().ixor(this)},n.prototype.uxor=function(A){return this.length>A.length?this.clone().iuxor(A):A.clone().iuxor(this)},n.prototype.inotn=function(A){r("number"==typeof A&&A>=0);var e=0|Math.ceil(A/26),t=A%26;this._expand(e),t>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return t>0&&(this.words[i]=~this.words[i]&67108863>>26-t),this._strip()},n.prototype.notn=function(A){return this.clone().inotn(A)},n.prototype.setn=function(A,e){r("number"==typeof A&&A>=0);var t=A/26|0,i=A%26;return this._expand(t+1),this.words[t]=e?this.words[t]|1<<i:this.words[t]&~(1<<i),this._strip()},n.prototype.iadd=function(A){var e,t,r;if(0!==this.negative&&0===A.negative)return this.negative=0,e=this.isub(A),this.negative^=1,this._normSign();if(0===this.negative&&0!==A.negative)return A.negative=0,e=this.isub(A),A.negative=1,e._normSign();this.length>A.length?(t=this,r=A):(t=A,r=this);for(var i=0,n=0;n<r.length;n++)e=(0|t.words[n])+(0|r.words[n])+i,this.words[n]=67108863&e,i=e>>>26;for(;0!==i&&n<t.length;n++)e=(0|t.words[n])+i,this.words[n]=67108863&e,i=e>>>26;if(this.length=t.length,0!==i)this.words[this.length]=i,this.length++;else if(t!==this)for(;n<t.length;n++)this.words[n]=t.words[n];return this},n.prototype.add=function(A){var e;return 0!==A.negative&&0===this.negative?(A.negative=0,e=this.sub(A),A.negative^=1,e):0===A.negative&&0!==this.negative?(this.negative=0,e=A.sub(this),this.negative=1,e):this.length>A.length?this.clone().iadd(A):A.clone().iadd(this)},n.prototype.isub=function(A){if(0!==A.negative){A.negative=0;var e=this.iadd(A);return A.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(A),this.negative=1,this._normSign();var t,r,i=this.cmp(A);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(t=this,r=A):(t=A,r=this);for(var n=0,o=0;o<r.length;o++)n=(e=(0|t.words[o])-(0|r.words[o])+n)>>26,this.words[o]=67108863&e;for(;0!==n&&o<t.length;o++)n=(e=(0|t.words[o])+n)>>26,this.words[o]=67108863&e;if(0===n&&o<t.length&&t!==this)for(;o<t.length;o++)this.words[o]=t.words[o];return this.length=Math.max(this.length,o),t!==this&&(this.negative=1),this._strip()},n.prototype.sub=function(A){return this.clone().isub(A)};var I=function(A,e,t){var r,i,n,o=A.words,s=e.words,a=t.words,l=0,c=0|o[0],g=8191&c,u=c>>>13,h=0|o[1],E=8191&h,B=h>>>13,I=0|o[2],f=8191&I,p=I>>>13,d=0|o[3],w=8191&d,m=d>>>13,C=0|o[4],Q=8191&C,R=C>>>13,y=0|o[5],U=8191&y,v=y>>>13,M=0|o[6],T=8191&M,b=M>>>13,S=0|o[7],F=8191&S,D=S>>>13,N=0|o[8],G=8191&N,V=N>>>13,k=0|o[9],O=8191&k,x=k>>>13,Z=0|s[0],J=8191&Z,P=Z>>>13,Y=0|s[1],H=8191&Y,L=Y>>>13,j=0|s[2],W=8191&j,z=j>>>13,K=0|s[3],q=8191&K,X=K>>>13,_=0|s[4],$=8191&_,AA=_>>>13,eA=0|s[5],tA=8191&eA,rA=eA>>>13,iA=0|s[6],nA=8191&iA,oA=iA>>>13,sA=0|s[7],aA=8191&sA,lA=sA>>>13,cA=0|s[8],gA=8191&cA,uA=cA>>>13,hA=0|s[9],EA=8191&hA,BA=hA>>>13;t.negative=A.negative^e.negative,t.length=19;var IA=(l+(r=Math.imul(g,J))|0)+((8191&(i=(i=Math.imul(g,P))+Math.imul(u,J)|0))<<13)|0;l=((n=Math.imul(u,P))+(i>>>13)|0)+(IA>>>26)|0,IA&=67108863,r=Math.imul(E,J),i=(i=Math.imul(E,P))+Math.imul(B,J)|0,n=Math.imul(B,P);var fA=(l+(r=r+Math.imul(g,H)|0)|0)+((8191&(i=(i=i+Math.imul(g,L)|0)+Math.imul(u,H)|0))<<13)|0;l=((n=n+Math.imul(u,L)|0)+(i>>>13)|0)+(fA>>>26)|0,fA&=67108863,r=Math.imul(f,J),i=(i=Math.imul(f,P))+Math.imul(p,J)|0,n=Math.imul(p,P),r=r+Math.imul(E,H)|0,i=(i=i+Math.imul(E,L)|0)+Math.imul(B,H)|0,n=n+Math.imul(B,L)|0;var pA=(l+(r=r+Math.imul(g,W)|0)|0)+((8191&(i=(i=i+Math.imul(g,z)|0)+Math.imul(u,W)|0))<<13)|0;l=((n=n+Math.imul(u,z)|0)+(i>>>13)|0)+(pA>>>26)|0,pA&=67108863,r=Math.imul(w,J),i=(i=Math.imul(w,P))+Math.imul(m,J)|0,n=Math.imul(m,P),r=r+Math.imul(f,H)|0,i=(i=i+Math.imul(f,L)|0)+Math.imul(p,H)|0,n=n+Math.imul(p,L)|0,r=r+Math.imul(E,W)|0,i=(i=i+Math.imul(E,z)|0)+Math.imul(B,W)|0,n=n+Math.imul(B,z)|0;var dA=(l+(r=r+Math.imul(g,q)|0)|0)+((8191&(i=(i=i+Math.imul(g,X)|0)+Math.imul(u,q)|0))<<13)|0;l=((n=n+Math.imul(u,X)|0)+(i>>>13)|0)+(dA>>>26)|0,dA&=67108863,r=Math.imul(Q,J),i=(i=Math.imul(Q,P))+Math.imul(R,J)|0,n=Math.imul(R,P),r=r+Math.imul(w,H)|0,i=(i=i+Math.imul(w,L)|0)+Math.imul(m,H)|0,n=n+Math.imul(m,L)|0,r=r+Math.imul(f,W)|0,i=(i=i+Math.imul(f,z)|0)+Math.imul(p,W)|0,n=n+Math.imul(p,z)|0,r=r+Math.imul(E,q)|0,i=(i=i+Math.imul(E,X)|0)+Math.imul(B,q)|0,n=n+Math.imul(B,X)|0;var wA=(l+(r=r+Math.imul(g,$)|0)|0)+((8191&(i=(i=i+Math.imul(g,AA)|0)+Math.imul(u,$)|0))<<13)|0;l=((n=n+Math.imul(u,AA)|0)+(i>>>13)|0)+(wA>>>26)|0,wA&=67108863,r=Math.imul(U,J),i=(i=Math.imul(U,P))+Math.imul(v,J)|0,n=Math.imul(v,P),r=r+Math.imul(Q,H)|0,i=(i=i+Math.imul(Q,L)|0)+Math.imul(R,H)|0,n=n+Math.imul(R,L)|0,r=r+Math.imul(w,W)|0,i=(i=i+Math.imul(w,z)|0)+Math.imul(m,W)|0,n=n+Math.imul(m,z)|0,r=r+Math.imul(f,q)|0,i=(i=i+Math.imul(f,X)|0)+Math.imul(p,q)|0,n=n+Math.imul(p,X)|0,r=r+Math.imul(E,$)|0,i=(i=i+Math.imul(E,AA)|0)+Math.imul(B,$)|0,n=n+Math.imul(B,AA)|0;var mA=(l+(r=r+Math.imul(g,tA)|0)|0)+((8191&(i=(i=i+Math.imul(g,rA)|0)+Math.imul(u,tA)|0))<<13)|0;l=((n=n+Math.imul(u,rA)|0)+(i>>>13)|0)+(mA>>>26)|0,mA&=67108863,r=Math.imul(T,J),i=(i=Math.imul(T,P))+Math.imul(b,J)|0,n=Math.imul(b,P),r=r+Math.imul(U,H)|0,i=(i=i+Math.imul(U,L)|0)+Math.imul(v,H)|0,n=n+Math.imul(v,L)|0,r=r+Math.imul(Q,W)|0,i=(i=i+Math.imul(Q,z)|0)+Math.imul(R,W)|0,n=n+Math.imul(R,z)|0,r=r+Math.imul(w,q)|0,i=(i=i+Math.imul(w,X)|0)+Math.imul(m,q)|0,n=n+Math.imul(m,X)|0,r=r+Math.imul(f,$)|0,i=(i=i+Math.imul(f,AA)|0)+Math.imul(p,$)|0,n=n+Math.imul(p,AA)|0,r=r+Math.imul(E,tA)|0,i=(i=i+Math.imul(E,rA)|0)+Math.imul(B,tA)|0,n=n+Math.imul(B,rA)|0;var CA=(l+(r=r+Math.imul(g,nA)|0)|0)+((8191&(i=(i=i+Math.imul(g,oA)|0)+Math.imul(u,nA)|0))<<13)|0;l=((n=n+Math.imul(u,oA)|0)+(i>>>13)|0)+(CA>>>26)|0,CA&=67108863,r=Math.imul(F,J),i=(i=Math.imul(F,P))+Math.imul(D,J)|0,n=Math.imul(D,P),r=r+Math.imul(T,H)|0,i=(i=i+Math.imul(T,L)|0)+Math.imul(b,H)|0,n=n+Math.imul(b,L)|0,r=r+Math.imul(U,W)|0,i=(i=i+Math.imul(U,z)|0)+Math.imul(v,W)|0,n=n+Math.imul(v,z)|0,r=r+Math.imul(Q,q)|0,i=(i=i+Math.imul(Q,X)|0)+Math.imul(R,q)|0,n=n+Math.imul(R,X)|0,r=r+Math.imul(w,$)|0,i=(i=i+Math.imul(w,AA)|0)+Math.imul(m,$)|0,n=n+Math.imul(m,AA)|0,r=r+Math.imul(f,tA)|0,i=(i=i+Math.imul(f,rA)|0)+Math.imul(p,tA)|0,n=n+Math.imul(p,rA)|0,r=r+Math.imul(E,nA)|0,i=(i=i+Math.imul(E,oA)|0)+Math.imul(B,nA)|0,n=n+Math.imul(B,oA)|0;var QA=(l+(r=r+Math.imul(g,aA)|0)|0)+((8191&(i=(i=i+Math.imul(g,lA)|0)+Math.imul(u,aA)|0))<<13)|0;l=((n=n+Math.imul(u,lA)|0)+(i>>>13)|0)+(QA>>>26)|0,QA&=67108863,r=Math.imul(G,J),i=(i=Math.imul(G,P))+Math.imul(V,J)|0,n=Math.imul(V,P),r=r+Math.imul(F,H)|0,i=(i=i+Math.imul(F,L)|0)+Math.imul(D,H)|0,n=n+Math.imul(D,L)|0,r=r+Math.imul(T,W)|0,i=(i=i+Math.imul(T,z)|0)+Math.imul(b,W)|0,n=n+Math.imul(b,z)|0,r=r+Math.imul(U,q)|0,i=(i=i+Math.imul(U,X)|0)+Math.imul(v,q)|0,n=n+Math.imul(v,X)|0,r=r+Math.imul(Q,$)|0,i=(i=i+Math.imul(Q,AA)|0)+Math.imul(R,$)|0,n=n+Math.imul(R,AA)|0,r=r+Math.imul(w,tA)|0,i=(i=i+Math.imul(w,rA)|0)+Math.imul(m,tA)|0,n=n+Math.imul(m,rA)|0,r=r+Math.imul(f,nA)|0,i=(i=i+Math.imul(f,oA)|0)+Math.imul(p,nA)|0,n=n+Math.imul(p,oA)|0,r=r+Math.imul(E,aA)|0,i=(i=i+Math.imul(E,lA)|0)+Math.imul(B,aA)|0,n=n+Math.imul(B,lA)|0;var RA=(l+(r=r+Math.imul(g,gA)|0)|0)+((8191&(i=(i=i+Math.imul(g,uA)|0)+Math.imul(u,gA)|0))<<13)|0;l=((n=n+Math.imul(u,uA)|0)+(i>>>13)|0)+(RA>>>26)|0,RA&=67108863,r=Math.imul(O,J),i=(i=Math.imul(O,P))+Math.imul(x,J)|0,n=Math.imul(x,P),r=r+Math.imul(G,H)|0,i=(i=i+Math.imul(G,L)|0)+Math.imul(V,H)|0,n=n+Math.imul(V,L)|0,r=r+Math.imul(F,W)|0,i=(i=i+Math.imul(F,z)|0)+Math.imul(D,W)|0,n=n+Math.imul(D,z)|0,r=r+Math.imul(T,q)|0,i=(i=i+Math.imul(T,X)|0)+Math.imul(b,q)|0,n=n+Math.imul(b,X)|0,r=r+Math.imul(U,$)|0,i=(i=i+Math.imul(U,AA)|0)+Math.imul(v,$)|0,n=n+Math.imul(v,AA)|0,r=r+Math.imul(Q,tA)|0,i=(i=i+Math.imul(Q,rA)|0)+Math.imul(R,tA)|0,n=n+Math.imul(R,rA)|0,r=r+Math.imul(w,nA)|0,i=(i=i+Math.imul(w,oA)|0)+Math.imul(m,nA)|0,n=n+Math.imul(m,oA)|0,r=r+Math.imul(f,aA)|0,i=(i=i+Math.imul(f,lA)|0)+Math.imul(p,aA)|0,n=n+Math.imul(p,lA)|0,r=r+Math.imul(E,gA)|0,i=(i=i+Math.imul(E,uA)|0)+Math.imul(B,gA)|0,n=n+Math.imul(B,uA)|0;var yA=(l+(r=r+Math.imul(g,EA)|0)|0)+((8191&(i=(i=i+Math.imul(g,BA)|0)+Math.imul(u,EA)|0))<<13)|0;l=((n=n+Math.imul(u,BA)|0)+(i>>>13)|0)+(yA>>>26)|0,yA&=67108863,r=Math.imul(O,H),i=(i=Math.imul(O,L))+Math.imul(x,H)|0,n=Math.imul(x,L),r=r+Math.imul(G,W)|0,i=(i=i+Math.imul(G,z)|0)+Math.imul(V,W)|0,n=n+Math.imul(V,z)|0,r=r+Math.imul(F,q)|0,i=(i=i+Math.imul(F,X)|0)+Math.imul(D,q)|0,n=n+Math.imul(D,X)|0,r=r+Math.imul(T,$)|0,i=(i=i+Math.imul(T,AA)|0)+Math.imul(b,$)|0,n=n+Math.imul(b,AA)|0,r=r+Math.imul(U,tA)|0,i=(i=i+Math.imul(U,rA)|0)+Math.imul(v,tA)|0,n=n+Math.imul(v,rA)|0,r=r+Math.imul(Q,nA)|0,i=(i=i+Math.imul(Q,oA)|0)+Math.imul(R,nA)|0,n=n+Math.imul(R,oA)|0,r=r+Math.imul(w,aA)|0,i=(i=i+Math.imul(w,lA)|0)+Math.imul(m,aA)|0,n=n+Math.imul(m,lA)|0,r=r+Math.imul(f,gA)|0,i=(i=i+Math.imul(f,uA)|0)+Math.imul(p,gA)|0,n=n+Math.imul(p,uA)|0;var UA=(l+(r=r+Math.imul(E,EA)|0)|0)+((8191&(i=(i=i+Math.imul(E,BA)|0)+Math.imul(B,EA)|0))<<13)|0;l=((n=n+Math.imul(B,BA)|0)+(i>>>13)|0)+(UA>>>26)|0,UA&=67108863,r=Math.imul(O,W),i=(i=Math.imul(O,z))+Math.imul(x,W)|0,n=Math.imul(x,z),r=r+Math.imul(G,q)|0,i=(i=i+Math.imul(G,X)|0)+Math.imul(V,q)|0,n=n+Math.imul(V,X)|0,r=r+Math.imul(F,$)|0,i=(i=i+Math.imul(F,AA)|0)+Math.imul(D,$)|0,n=n+Math.imul(D,AA)|0,r=r+Math.imul(T,tA)|0,i=(i=i+Math.imul(T,rA)|0)+Math.imul(b,tA)|0,n=n+Math.imul(b,rA)|0,r=r+Math.imul(U,nA)|0,i=(i=i+Math.imul(U,oA)|0)+Math.imul(v,nA)|0,n=n+Math.imul(v,oA)|0,r=r+Math.imul(Q,aA)|0,i=(i=i+Math.imul(Q,lA)|0)+Math.imul(R,aA)|0,n=n+Math.imul(R,lA)|0,r=r+Math.imul(w,gA)|0,i=(i=i+Math.imul(w,uA)|0)+Math.imul(m,gA)|0,n=n+Math.imul(m,uA)|0;var vA=(l+(r=r+Math.imul(f,EA)|0)|0)+((8191&(i=(i=i+Math.imul(f,BA)|0)+Math.imul(p,EA)|0))<<13)|0;l=((n=n+Math.imul(p,BA)|0)+(i>>>13)|0)+(vA>>>26)|0,vA&=67108863,r=Math.imul(O,q),i=(i=Math.imul(O,X))+Math.imul(x,q)|0,n=Math.imul(x,X),r=r+Math.imul(G,$)|0,i=(i=i+Math.imul(G,AA)|0)+Math.imul(V,$)|0,n=n+Math.imul(V,AA)|0,r=r+Math.imul(F,tA)|0,i=(i=i+Math.imul(F,rA)|0)+Math.imul(D,tA)|0,n=n+Math.imul(D,rA)|0,r=r+Math.imul(T,nA)|0,i=(i=i+Math.imul(T,oA)|0)+Math.imul(b,nA)|0,n=n+Math.imul(b,oA)|0,r=r+Math.imul(U,aA)|0,i=(i=i+Math.imul(U,lA)|0)+Math.imul(v,aA)|0,n=n+Math.imul(v,lA)|0,r=r+Math.imul(Q,gA)|0,i=(i=i+Math.imul(Q,uA)|0)+Math.imul(R,gA)|0,n=n+Math.imul(R,uA)|0;var MA=(l+(r=r+Math.imul(w,EA)|0)|0)+((8191&(i=(i=i+Math.imul(w,BA)|0)+Math.imul(m,EA)|0))<<13)|0;l=((n=n+Math.imul(m,BA)|0)+(i>>>13)|0)+(MA>>>26)|0,MA&=67108863,r=Math.imul(O,$),i=(i=Math.imul(O,AA))+Math.imul(x,$)|0,n=Math.imul(x,AA),r=r+Math.imul(G,tA)|0,i=(i=i+Math.imul(G,rA)|0)+Math.imul(V,tA)|0,n=n+Math.imul(V,rA)|0,r=r+Math.imul(F,nA)|0,i=(i=i+Math.imul(F,oA)|0)+Math.imul(D,nA)|0,n=n+Math.imul(D,oA)|0,r=r+Math.imul(T,aA)|0,i=(i=i+Math.imul(T,lA)|0)+Math.imul(b,aA)|0,n=n+Math.imul(b,lA)|0,r=r+Math.imul(U,gA)|0,i=(i=i+Math.imul(U,uA)|0)+Math.imul(v,gA)|0,n=n+Math.imul(v,uA)|0;var TA=(l+(r=r+Math.imul(Q,EA)|0)|0)+((8191&(i=(i=i+Math.imul(Q,BA)|0)+Math.imul(R,EA)|0))<<13)|0;l=((n=n+Math.imul(R,BA)|0)+(i>>>13)|0)+(TA>>>26)|0,TA&=67108863,r=Math.imul(O,tA),i=(i=Math.imul(O,rA))+Math.imul(x,tA)|0,n=Math.imul(x,rA),r=r+Math.imul(G,nA)|0,i=(i=i+Math.imul(G,oA)|0)+Math.imul(V,nA)|0,n=n+Math.imul(V,oA)|0,r=r+Math.imul(F,aA)|0,i=(i=i+Math.imul(F,lA)|0)+Math.imul(D,aA)|0,n=n+Math.imul(D,lA)|0,r=r+Math.imul(T,gA)|0,i=(i=i+Math.imul(T,uA)|0)+Math.imul(b,gA)|0,n=n+Math.imul(b,uA)|0;var bA=(l+(r=r+Math.imul(U,EA)|0)|0)+((8191&(i=(i=i+Math.imul(U,BA)|0)+Math.imul(v,EA)|0))<<13)|0;l=((n=n+Math.imul(v,BA)|0)+(i>>>13)|0)+(bA>>>26)|0,bA&=67108863,r=Math.imul(O,nA),i=(i=Math.imul(O,oA))+Math.imul(x,nA)|0,n=Math.imul(x,oA),r=r+Math.imul(G,aA)|0,i=(i=i+Math.imul(G,lA)|0)+Math.imul(V,aA)|0,n=n+Math.imul(V,lA)|0,r=r+Math.imul(F,gA)|0,i=(i=i+Math.imul(F,uA)|0)+Math.imul(D,gA)|0,n=n+Math.imul(D,uA)|0;var SA=(l+(r=r+Math.imul(T,EA)|0)|0)+((8191&(i=(i=i+Math.imul(T,BA)|0)+Math.imul(b,EA)|0))<<13)|0;l=((n=n+Math.imul(b,BA)|0)+(i>>>13)|0)+(SA>>>26)|0,SA&=67108863,r=Math.imul(O,aA),i=(i=Math.imul(O,lA))+Math.imul(x,aA)|0,n=Math.imul(x,lA),r=r+Math.imul(G,gA)|0,i=(i=i+Math.imul(G,uA)|0)+Math.imul(V,gA)|0,n=n+Math.imul(V,uA)|0;var FA=(l+(r=r+Math.imul(F,EA)|0)|0)+((8191&(i=(i=i+Math.imul(F,BA)|0)+Math.imul(D,EA)|0))<<13)|0;l=((n=n+Math.imul(D,BA)|0)+(i>>>13)|0)+(FA>>>26)|0,FA&=67108863,r=Math.imul(O,gA),i=(i=Math.imul(O,uA))+Math.imul(x,gA)|0,n=Math.imul(x,uA);var DA=(l+(r=r+Math.imul(G,EA)|0)|0)+((8191&(i=(i=i+Math.imul(G,BA)|0)+Math.imul(V,EA)|0))<<13)|0;l=((n=n+Math.imul(V,BA)|0)+(i>>>13)|0)+(DA>>>26)|0,DA&=67108863;var NA=(l+(r=Math.imul(O,EA))|0)+((8191&(i=(i=Math.imul(O,BA))+Math.imul(x,EA)|0))<<13)|0;return l=((n=Math.imul(x,BA))+(i>>>13)|0)+(NA>>>26)|0,NA&=67108863,a[0]=IA,a[1]=fA,a[2]=pA,a[3]=dA,a[4]=wA,a[5]=mA,a[6]=CA,a[7]=QA,a[8]=RA,a[9]=yA,a[10]=UA,a[11]=vA,a[12]=MA,a[13]=TA,a[14]=bA,a[15]=SA,a[16]=FA,a[17]=DA,a[18]=NA,0!==l&&(a[19]=l,t.length++),t};function f(A,e,t){t.negative=e.negative^A.negative,t.length=A.length+e.length;for(var r=0,i=0,n=0;n<t.length-1;n++){var o=i;i=0;for(var s=67108863&r,a=Math.min(n,e.length-1),l=Math.max(0,n-A.length+1);l<=a;l++){var c=n-l,g=(0|A.words[c])*(0|e.words[l]),u=67108863&g;s=67108863&(u=u+s|0),i+=(o=(o=o+(g/67108864|0)|0)+(u>>>26)|0)>>>26,o&=67108863}t.words[n]=s,r=o,o=i}return 0!==r?t.words[n]=r:t.length--,t._strip()}function p(A,e,t){return f(A,e,t)}function d(A,e){this.x=A,this.y=e}Math.imul||(I=B),n.prototype.mulTo=function(A,e){var t=this.length+A.length;return 10===this.length&&10===A.length?I(this,A,e):t<63?B(this,A,e):t<1024?f(this,A,e):p(this,A,e)},d.prototype.makeRBT=function(A){for(var e=new Array(A),t=n.prototype._countBits(A)-1,r=0;r<A;r++)e[r]=this.revBin(r,t,A);return e},d.prototype.revBin=function(A,e,t){if(0===A||A===t-1)return A;for(var r=0,i=0;i<e;i++)r|=(1&A)<<e-i-1,A>>=1;return r},d.prototype.permute=function(A,e,t,r,i,n){for(var o=0;o<n;o++)r[o]=e[A[o]],i[o]=t[A[o]]},d.prototype.transform=function(A,e,t,r,i,n){this.permute(n,A,e,t,r,i);for(var o=1;o<i;o<<=1)for(var s=o<<1,a=Math.cos(2*Math.PI/s),l=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var g=a,u=l,h=0;h<o;h++){var E=t[c+h],B=r[c+h],I=t[c+h+o],f=r[c+h+o],p=g*I-u*f;f=g*f+u*I,I=p,t[c+h]=E+I,r[c+h]=B+f,t[c+h+o]=E-I,r[c+h+o]=B-f,h!==s&&(p=a*g-l*u,u=a*u+l*g,g=p)}},d.prototype.guessLen13b=function(A,e){var t=1|Math.max(e,A),r=1&t,i=0;for(t=t/2|0;t;t>>>=1)i++;return 1<<i+1+r},d.prototype.conjugate=function(A,e,t){if(!(t<=1))for(var r=0;r<t/2;r++){var i=A[r];A[r]=A[t-r-1],A[t-r-1]=i,i=e[r],e[r]=-e[t-r-1],e[t-r-1]=-i}},d.prototype.normalize13b=function(A,e){for(var t=0,r=0;r<e/2;r++){var i=8192*Math.round(A[2*r+1]/e)+Math.round(A[2*r]/e)+t;A[r]=67108863&i,t=i<67108864?0:i/67108864|0}return A},d.prototype.convert13b=function(A,e,t,i){for(var n=0,o=0;o<e;o++)n+=0|A[o],t[2*o]=8191&n,n>>>=13,t[2*o+1]=8191&n,n>>>=13;for(o=2*e;o<i;++o)t[o]=0;r(0===n),r(0==(-8192&n))},d.prototype.stub=function(A){for(var e=new Array(A),t=0;t<A;t++)e[t]=0;return e},d.prototype.mulp=function(A,e,t){var r=2*this.guessLen13b(A.length,e.length),i=this.makeRBT(r),n=this.stub(r),o=new Array(r),s=new Array(r),a=new Array(r),l=new Array(r),c=new Array(r),g=new Array(r),u=t.words;u.length=r,this.convert13b(A.words,A.length,o,r),this.convert13b(e.words,e.length,l,r),this.transform(o,n,s,a,r,i),this.transform(l,n,c,g,r,i);for(var h=0;h<r;h++){var E=s[h]*c[h]-a[h]*g[h];a[h]=s[h]*g[h]+a[h]*c[h],s[h]=E}return this.conjugate(s,a,r),this.transform(s,a,u,n,r,i),this.conjugate(u,n,r),this.normalize13b(u,r),t.negative=A.negative^e.negative,t.length=A.length+e.length,t._strip()},n.prototype.mul=function(A){var e=new n(null);return e.words=new Array(this.length+A.length),this.mulTo(A,e)},n.prototype.mulf=function(A){var e=new n(null);return e.words=new Array(this.length+A.length),p(this,A,e)},n.prototype.imul=function(A){return this.clone().mulTo(A,this)},n.prototype.imuln=function(A){var e=A<0;e&&(A=-A),r("number"==typeof A),r(A<67108864);for(var t=0,i=0;i<this.length;i++){var n=(0|this.words[i])*A,o=(67108863&n)+(67108863&t);t>>=26,t+=n/67108864|0,t+=o>>>26,this.words[i]=67108863&o}return 0!==t&&(this.words[i]=t,this.length++),e?this.ineg():this},n.prototype.muln=function(A){return this.clone().imuln(A)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(A){var e=function(A){for(var e=new Array(A.bitLength()),t=0;t<e.length;t++){var r=t/26|0,i=t%26;e[t]=A.words[r]>>>i&1}return e}(A);if(0===e.length)return new n(1);for(var t=this,r=0;r<e.length&&0===e[r];r++,t=t.sqr());if(++r<e.length)for(var i=t.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(t=t.mul(i));return t},n.prototype.iushln=function(A){r("number"==typeof A&&A>=0);var e,t=A%26,i=(A-t)/26,n=67108863>>>26-t<<26-t;if(0!==t){var o=0;for(e=0;e<this.length;e++){var s=this.words[e]&n,a=(0|this.words[e])-s<<t;this.words[e]=a|o,o=s>>>26-t}o&&(this.words[e]=o,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this._strip()},n.prototype.ishln=function(A){return r(0===this.negative),this.iushln(A)},n.prototype.iushrn=function(A,e,t){var i;r("number"==typeof A&&A>=0),i=e?(e-e%26)/26:0;var n=A%26,o=Math.min((A-n)/26,this.length),s=67108863^67108863>>>n<<n,a=t;if(i-=o,i=Math.max(0,i),a){for(var l=0;l<o;l++)a.words[l]=this.words[l];a.length=o}if(0===o);else if(this.length>o)for(this.length-=o,l=0;l<this.length;l++)this.words[l]=this.words[l+o];else this.words[0]=0,this.length=1;var c=0;for(l=this.length-1;l>=0&&(0!==c||l>=i);l--){var g=0|this.words[l];this.words[l]=c<<26-n|g>>>n,c=g&s}return a&&0!==c&&(a.words[a.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},n.prototype.ishrn=function(A,e,t){return r(0===this.negative),this.iushrn(A,e,t)},n.prototype.shln=function(A){return this.clone().ishln(A)},n.prototype.ushln=function(A){return this.clone().iushln(A)},n.prototype.shrn=function(A){return this.clone().ishrn(A)},n.prototype.ushrn=function(A){return this.clone().iushrn(A)},n.prototype.testn=function(A){r("number"==typeof A&&A>=0);var e=A%26,t=(A-e)/26,i=1<<e;return!(this.length<=t||!(this.words[t]&i))},n.prototype.imaskn=function(A){r("number"==typeof A&&A>=0);var e=A%26,t=(A-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=t)return this;if(0!==e&&t++,this.length=Math.min(t,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this._strip()},n.prototype.maskn=function(A){return this.clone().imaskn(A)},n.prototype.iaddn=function(A){return r("number"==typeof A),r(A<67108864),A<0?this.isubn(-A):0!==this.negative?1===this.length&&(0|this.words[0])<=A?(this.words[0]=A-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(A),this.negative=1,this):this._iaddn(A)},n.prototype._iaddn=function(A){this.words[0]+=A;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(A){if(r("number"==typeof A),r(A<67108864),A<0)return this.iaddn(-A);if(0!==this.negative)return this.negative=0,this.iaddn(A),this.negative=1,this;if(this.words[0]-=A,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},n.prototype.addn=function(A){return this.clone().iaddn(A)},n.prototype.subn=function(A){return this.clone().isubn(A)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(A,e,t){var i,n,o=A.length+t;this._expand(o);var s=0;for(i=0;i<A.length;i++){n=(0|this.words[i+t])+s;var a=(0|A.words[i])*e;s=((n-=67108863&a)>>26)-(a/67108864|0),this.words[i+t]=67108863&n}for(;i<this.length-t;i++)s=(n=(0|this.words[i+t])+s)>>26,this.words[i+t]=67108863&n;if(0===s)return this._strip();for(r(-1===s),s=0,i=0;i<this.length;i++)s=(n=-(0|this.words[i])+s)>>26,this.words[i]=67108863&n;return this.negative=1,this._strip()},n.prototype._wordDiv=function(A,e){var t=(this.length,A.length),r=this.clone(),i=A,o=0|i.words[i.length-1];0!=(t=26-this._countBits(o))&&(i=i.ushln(t),r.iushln(t),o=0|i.words[i.length-1]);var s,a=r.length-i.length;if("mod"!==e){(s=new n(null)).length=a+1,s.words=new Array(s.length);for(var l=0;l<s.length;l++)s.words[l]=0}var c=r.clone()._ishlnsubmul(i,1,a);0===c.negative&&(r=c,s&&(s.words[a]=1));for(var g=a-1;g>=0;g--){var u=67108864*(0|r.words[i.length+g])+(0|r.words[i.length+g-1]);for(u=Math.min(u/o|0,67108863),r._ishlnsubmul(i,u,g);0!==r.negative;)u--,r.negative=0,r._ishlnsubmul(i,1,g),r.isZero()||(r.negative^=1);s&&(s.words[g]=u)}return s&&s._strip(),r._strip(),"div"!==e&&0!==t&&r.iushrn(t),{div:s||null,mod:r}},n.prototype.divmod=function(A,e,t){return r(!A.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===A.negative?(s=this.neg().divmod(A,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(o=s.mod.neg(),t&&0!==o.negative&&o.iadd(A)),{div:i,mod:o}):0===this.negative&&0!==A.negative?(s=this.divmod(A.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&A.negative)?(s=this.neg().divmod(A.neg(),e),"div"!==e&&(o=s.mod.neg(),t&&0!==o.negative&&o.isub(A)),{div:s.div,mod:o}):A.length>this.length||this.cmp(A)<0?{div:new n(0),mod:this}:1===A.length?"div"===e?{div:this.divn(A.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modrn(A.words[0]))}:{div:this.divn(A.words[0]),mod:new n(this.modrn(A.words[0]))}:this._wordDiv(A,e);var i,o,s},n.prototype.div=function(A){return this.divmod(A,"div",!1).div},n.prototype.mod=function(A){return this.divmod(A,"mod",!1).mod},n.prototype.umod=function(A){return this.divmod(A,"mod",!0).mod},n.prototype.divRound=function(A){var e=this.divmod(A);if(e.mod.isZero())return e.div;var t=0!==e.div.negative?e.mod.isub(A):e.mod,r=A.ushrn(1),i=A.andln(1),n=t.cmp(r);return n<0||1===i&&0===n?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modrn=function(A){var e=A<0;e&&(A=-A),r(A<=67108863);for(var t=(1<<26)%A,i=0,n=this.length-1;n>=0;n--)i=(t*i+(0|this.words[n]))%A;return e?-i:i},n.prototype.modn=function(A){return this.modrn(A)},n.prototype.idivn=function(A){var e=A<0;e&&(A=-A),r(A<=67108863);for(var t=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*t;this.words[i]=n/A|0,t=n%A}return this._strip(),e?this.ineg():this},n.prototype.divn=function(A){return this.clone().idivn(A)},n.prototype.egcd=function(A){r(0===A.negative),r(!A.isZero());var e=this,t=A.clone();e=0!==e.negative?e.umod(A):e.clone();for(var i=new n(1),o=new n(0),s=new n(0),a=new n(1),l=0;e.isEven()&&t.isEven();)e.iushrn(1),t.iushrn(1),++l;for(var c=t.clone(),g=e.clone();!e.isZero();){for(var u=0,h=1;0==(e.words[0]&h)&&u<26;++u,h<<=1);if(u>0)for(e.iushrn(u);u-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(c),o.isub(g)),i.iushrn(1),o.iushrn(1);for(var E=0,B=1;0==(t.words[0]&B)&&E<26;++E,B<<=1);if(E>0)for(t.iushrn(E);E-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(g)),s.iushrn(1),a.iushrn(1);e.cmp(t)>=0?(e.isub(t),i.isub(s),o.isub(a)):(t.isub(e),s.isub(i),a.isub(o))}return{a:s,b:a,gcd:t.iushln(l)}},n.prototype._invmp=function(A){r(0===A.negative),r(!A.isZero());var e=this,t=A.clone();e=0!==e.negative?e.umod(A):e.clone();for(var i,o=new n(1),s=new n(0),a=t.clone();e.cmpn(1)>0&&t.cmpn(1)>0;){for(var l=0,c=1;0==(e.words[0]&c)&&l<26;++l,c<<=1);if(l>0)for(e.iushrn(l);l-- >0;)o.isOdd()&&o.iadd(a),o.iushrn(1);for(var g=0,u=1;0==(t.words[0]&u)&&g<26;++g,u<<=1);if(g>0)for(t.iushrn(g);g-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(t)>=0?(e.isub(t),o.isub(s)):(t.isub(e),s.isub(o))}return(i=0===e.cmpn(1)?o:s).cmpn(0)<0&&i.iadd(A),i},n.prototype.gcd=function(A){if(this.isZero())return A.abs();if(A.isZero())return this.abs();var e=this.clone(),t=A.clone();e.negative=0,t.negative=0;for(var r=0;e.isEven()&&t.isEven();r++)e.iushrn(1),t.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;t.isEven();)t.iushrn(1);var i=e.cmp(t);if(i<0){var n=e;e=t,t=n}else if(0===i||0===t.cmpn(1))break;e.isub(t)}return t.iushln(r)},n.prototype.invm=function(A){return this.egcd(A).a.umod(A)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(A){return this.words[0]&A},n.prototype.bincn=function(A){r("number"==typeof A);var e=A%26,t=(A-e)/26,i=1<<e;if(this.length<=t)return this._expand(t+1),this.words[t]|=i,this;for(var n=i,o=t;0!==n&&o<this.length;o++){var s=0|this.words[o];n=(s+=n)>>>26,s&=67108863,this.words[o]=s}return 0!==n&&(this.words[o]=n,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(A){var e,t=A<0;if(0!==this.negative&&!t)return-1;if(0===this.negative&&t)return 1;if(this._strip(),this.length>1)e=1;else{t&&(A=-A),r(A<=67108863,"Number is too big");var i=0|this.words[0];e=i===A?0:i<A?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(A){if(0!==this.negative&&0===A.negative)return-1;if(0===this.negative&&0!==A.negative)return 1;var e=this.ucmp(A);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(A){if(this.length>A.length)return 1;if(this.length<A.length)return-1;for(var e=0,t=this.length-1;t>=0;t--){var r=0|this.words[t],i=0|A.words[t];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},n.prototype.gtn=function(A){return 1===this.cmpn(A)},n.prototype.gt=function(A){return 1===this.cmp(A)},n.prototype.gten=function(A){return this.cmpn(A)>=0},n.prototype.gte=function(A){return this.cmp(A)>=0},n.prototype.ltn=function(A){return-1===this.cmpn(A)},n.prototype.lt=function(A){return-1===this.cmp(A)},n.prototype.lten=function(A){return this.cmpn(A)<=0},n.prototype.lte=function(A){return this.cmp(A)<=0},n.prototype.eqn=function(A){return 0===this.cmpn(A)},n.prototype.eq=function(A){return 0===this.cmp(A)},n.red=function(A){return new U(A)},n.prototype.toRed=function(A){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),A.convertTo(this)._forceRed(A)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(A){return this.red=A,this},n.prototype.forceRed=function(A){return r(!this.red,"Already a number in reduction context"),this._forceRed(A)},n.prototype.redAdd=function(A){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,A)},n.prototype.redIAdd=function(A){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,A)},n.prototype.redSub=function(A){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,A)},n.prototype.redISub=function(A){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,A)},n.prototype.redShl=function(A){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,A)},n.prototype.redMul=function(A){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,A),this.red.mul(this,A)},n.prototype.redIMul=function(A){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,A),this.red.imul(this,A)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(A){return r(this.red&&!A.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,A)};var w={k256:null,p224:null,p192:null,p25519:null};function m(A,e){this.name=A,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function C(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function Q(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function R(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function y(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function U(A){if("string"==typeof A){var e=n._prime(A);this.m=e.p,this.prime=e}else r(A.gtn(1),"modulus must be greater than 1"),this.m=A,this.prime=null}function v(A){U.call(this,A),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var A=new n(null);return A.words=new Array(Math.ceil(this.n/13)),A},m.prototype.ireduce=function(A){var e,t=A;do{this.split(t,this.tmp),e=(t=(t=this.imulK(t)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:t.ucmp(this.p);return 0===r?(t.words[0]=0,t.length=1):r>0?t.isub(this.p):void 0!==t.strip?t.strip():t._strip(),t},m.prototype.split=function(A,e){A.iushrn(this.n,0,e)},m.prototype.imulK=function(A){return A.imul(this.k)},i(C,m),C.prototype.split=function(A,e){for(var t=4194303,r=Math.min(A.length,9),i=0;i<r;i++)e.words[i]=A.words[i];if(e.length=r,A.length<=9)return A.words[0]=0,void(A.length=1);var n=A.words[9];for(e.words[e.length++]=n&t,i=10;i<A.length;i++){var o=0|A.words[i];A.words[i-10]=(o&t)<<4|n>>>22,n=o}n>>>=22,A.words[i-10]=n,0===n&&A.length>10?A.length-=10:A.length-=9},C.prototype.imulK=function(A){A.words[A.length]=0,A.words[A.length+1]=0,A.length+=2;for(var e=0,t=0;t<A.length;t++){var r=0|A.words[t];e+=977*r,A.words[t]=67108863&e,e=64*r+(e/67108864|0)}return 0===A.words[A.length-1]&&(A.length--,0===A.words[A.length-1]&&A.length--),A},i(Q,m),i(R,m),i(y,m),y.prototype.imulK=function(A){for(var e=0,t=0;t<A.length;t++){var r=19*(0|A.words[t])+e,i=67108863&r;r>>>=26,A.words[t]=i,e=r}return 0!==e&&(A.words[A.length++]=e),A},n._prime=function(A){if(w[A])return w[A];var e;if("k256"===A)e=new C;else if("p224"===A)e=new Q;else if("p192"===A)e=new R;else{if("p25519"!==A)throw new Error("Unknown prime "+A);e=new y}return w[A]=e,e},U.prototype._verify1=function(A){r(0===A.negative,"red works only with positives"),r(A.red,"red works only with red numbers")},U.prototype._verify2=function(A,e){r(0==(A.negative|e.negative),"red works only with positives"),r(A.red&&A.red===e.red,"red works only with red numbers")},U.prototype.imod=function(A){return this.prime?this.prime.ireduce(A)._forceRed(this):(c(A,A.umod(this.m)._forceRed(this)),A)},U.prototype.neg=function(A){return A.isZero()?A.clone():this.m.sub(A)._forceRed(this)},U.prototype.add=function(A,e){this._verify2(A,e);var t=A.add(e);return t.cmp(this.m)>=0&&t.isub(this.m),t._forceRed(this)},U.prototype.iadd=function(A,e){this._verify2(A,e);var t=A.iadd(e);return t.cmp(this.m)>=0&&t.isub(this.m),t},U.prototype.sub=function(A,e){this._verify2(A,e);var t=A.sub(e);return t.cmpn(0)<0&&t.iadd(this.m),t._forceRed(this)},U.prototype.isub=function(A,e){this._verify2(A,e);var t=A.isub(e);return t.cmpn(0)<0&&t.iadd(this.m),t},U.prototype.shl=function(A,e){return this._verify1(A),this.imod(A.ushln(e))},U.prototype.imul=function(A,e){return this._verify2(A,e),this.imod(A.imul(e))},U.prototype.mul=function(A,e){return this._verify2(A,e),this.imod(A.mul(e))},U.prototype.isqr=function(A){return this.imul(A,A.clone())},U.prototype.sqr=function(A){return this.mul(A,A)},U.prototype.sqrt=function(A){if(A.isZero())return A.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var t=this.m.add(new n(1)).iushrn(2);return this.pow(A,t)}for(var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);r(!i.isZero());var s=new n(1).toRed(this),a=s.redNeg(),l=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new n(2*c*c).toRed(this);0!==this.pow(c,l).cmp(a);)c.redIAdd(a);for(var g=this.pow(c,i),u=this.pow(A,i.addn(1).iushrn(1)),h=this.pow(A,i),E=o;0!==h.cmp(s);){for(var B=h,I=0;0!==B.cmp(s);I++)B=B.redSqr();r(I<E);var f=this.pow(g,new n(1).iushln(E-I-1));u=u.redMul(f),g=f.redSqr(),h=h.redMul(g),E=I}return u},U.prototype.invm=function(A){var e=A._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},U.prototype.pow=function(A,e){if(e.isZero())return new n(1).toRed(this);if(0===e.cmpn(1))return A.clone();var t=new Array(16);t[0]=new n(1).toRed(this),t[1]=A;for(var r=2;r<t.length;r++)t[r]=this.mul(t[r-1],A);var i=t[0],o=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var l=e.words[r],c=a-1;c>=0;c--){var g=l>>c&1;i!==t[0]&&(i=this.sqr(i)),0!==g||0!==o?(o<<=1,o|=g,(4==++s||0===r&&0===c)&&(i=this.mul(i,t[o]),s=0,o=0)):s=0}a=26}return i},U.prototype.convertTo=function(A){var e=A.umod(this.m);return e===A?e.clone():e},U.prototype.convertFrom=function(A){var e=A.clone();return e.red=null,e},n.mont=function(A){return new v(A)},i(v,U),v.prototype.convertTo=function(A){return this.imod(A.ushln(this.shift))},v.prototype.convertFrom=function(A){var e=this.imod(A.mul(this.rinv));return e.red=null,e},v.prototype.imul=function(A,e){if(A.isZero()||e.isZero())return A.words[0]=0,A.length=1,A;var t=A.imul(e),r=t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=t.isub(r).iushrn(this.shift),n=i;return i.cmp(this.m)>=0?n=i.isub(this.m):i.cmpn(0)<0&&(n=i.iadd(this.m)),n._forceRed(this)},v.prototype.mul=function(A,e){if(A.isZero()||e.isZero())return new n(0)._forceRed(this);var t=A.mul(e),r=t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=t.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},v.prototype.invm=function(A){return this.imod(A._invmp(this.m).mul(this.r2))._forceRed(this)}}(A=t.nmd(A),this)},67640:(A,e,t)=>{"use strict";t.r(e),t.d(e,{arrayify:()=>l,concat:()=>c,hexConcat:()=>p,hexDataLength:()=>I,hexDataSlice:()=>f,hexStripZeros:()=>w,hexValue:()=>d,hexZeroPad:()=>m,hexlify:()=>B,isBytes:()=>a,isBytesLike:()=>o,isHexString:()=>h,joinSignature:()=>Q,splitSignature:()=>C,stripZeros:()=>g,zeroPad:()=>u});const r=new(t(78011).Yd)("bytes/5.7.0");function i(A){return!!A.toHexString}function n(A){return A.slice||(A.slice=function(){const e=Array.prototype.slice.call(arguments);return n(new Uint8Array(Array.prototype.slice.apply(A,e)))}),A}function o(A){return h(A)&&!(A.length%2)||a(A)}function s(A){return"number"==typeof A&&A==A&&A%1==0}function a(A){if(null==A)return!1;if(A.constructor===Uint8Array)return!0;if("string"==typeof A)return!1;if(!s(A.length)||A.length<0)return!1;for(let e=0;e<A.length;e++){const t=A[e];if(!s(t)||t<0||t>=256)return!1}return!0}function l(A,e){if(e||(e={}),"number"==typeof A){r.checkSafeUint53(A,"invalid arrayify value");const e=[];for(;A;)e.unshift(255&A),A=parseInt(String(A/256));return 0===e.length&&e.push(0),n(new Uint8Array(e))}if(e.allowMissingPrefix&&"string"==typeof A&&"0x"!==A.substring(0,2)&&(A="0x"+A),i(A)&&(A=A.toHexString()),h(A)){let t=A.substring(2);t.length%2&&("left"===e.hexPad?t="0"+t:"right"===e.hexPad?t+="0":r.throwArgumentError("hex data is odd-length","value",A));const i=[];for(let A=0;A<t.length;A+=2)i.push(parseInt(t.substring(A,A+2),16));return n(new Uint8Array(i))}return a(A)?n(new Uint8Array(A)):r.throwArgumentError("invalid arrayify value","value",A)}function c(A){const e=A.map((A=>l(A))),t=e.reduce(((A,e)=>A+e.length),0),r=new Uint8Array(t);return e.reduce(((A,e)=>(r.set(e,A),A+e.length)),0),n(r)}function g(A){let e=l(A);if(0===e.length)return e;let t=0;for(;t<e.length&&0===e[t];)t++;return t&&(e=e.slice(t)),e}function u(A,e){(A=l(A)).length>e&&r.throwArgumentError("value out of range","value",arguments[0]);const t=new Uint8Array(e);return t.set(A,e-A.length),n(t)}function h(A,e){return!("string"!=typeof A||!A.match(/^0x[0-9A-Fa-f]*$/)||e&&A.length!==2+2*e)}const E="0123456789abcdef";function B(A,e){if(e||(e={}),"number"==typeof A){r.checkSafeUint53(A,"invalid hexlify value");let e="";for(;A;)e=E[15&A]+e,A=Math.floor(A/16);return e.length?(e.length%2&&(e="0"+e),"0x"+e):"0x00"}if("bigint"==typeof A)return(A=A.toString(16)).length%2?"0x0"+A:"0x"+A;if(e.allowMissingPrefix&&"string"==typeof A&&"0x"!==A.substring(0,2)&&(A="0x"+A),i(A))return A.toHexString();if(h(A))return A.length%2&&("left"===e.hexPad?A="0x0"+A.substring(2):"right"===e.hexPad?A+="0":r.throwArgumentError("hex data is odd-length","value",A)),A.toLowerCase();if(a(A)){let e="0x";for(let t=0;t<A.length;t++){let r=A[t];e+=E[(240&r)>>4]+E[15&r]}return e}return r.throwArgumentError("invalid hexlify value","value",A)}function I(A){if("string"!=typeof A)A=B(A);else if(!h(A)||A.length%2)return null;return(A.length-2)/2}function f(A,e,t){return"string"!=typeof A?A=B(A):(!h(A)||A.length%2)&&r.throwArgumentError("invalid hexData","value",A),e=2+2*e,null!=t?"0x"+A.substring(e,2+2*t):"0x"+A.substring(e)}function p(A){let e="0x";return A.forEach((A=>{e+=B(A).substring(2)})),e}function d(A){const e=w(B(A,{hexPad:"left"}));return"0x"===e?"0x0":e}function w(A){"string"!=typeof A&&(A=B(A)),h(A)||r.throwArgumentError("invalid hex string","value",A),A=A.substring(2);let e=0;for(;e<A.length&&"0"===A[e];)e++;return"0x"+A.substring(e)}function m(A,e){for("string"!=typeof A?A=B(A):h(A)||r.throwArgumentError("invalid hex string","value",A),A.length>2*e+2&&r.throwArgumentError("value out of range","value",arguments[1]);A.length<2*e+2;)A="0x0"+A.substring(2);return A}function C(A){const e={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(o(A)){let t=l(A);64===t.length?(e.v=27+(t[32]>>7),t[32]&=127,e.r=B(t.slice(0,32)),e.s=B(t.slice(32,64))):65===t.length?(e.r=B(t.slice(0,32)),e.s=B(t.slice(32,64)),e.v=t[64]):r.throwArgumentError("invalid signature string","signature",A),e.v<27&&(0===e.v||1===e.v?e.v+=27:r.throwArgumentError("signature invalid v byte","signature",A)),e.recoveryParam=1-e.v%2,e.recoveryParam&&(t[32]|=128),e._vs=B(t.slice(32,64))}else{if(e.r=A.r,e.s=A.s,e.v=A.v,e.recoveryParam=A.recoveryParam,e._vs=A._vs,null!=e._vs){const t=u(l(e._vs),32);e._vs=B(t);const i=t[0]>=128?1:0;null==e.recoveryParam?e.recoveryParam=i:e.recoveryParam!==i&&r.throwArgumentError("signature recoveryParam mismatch _vs","signature",A),t[0]&=127;const n=B(t);null==e.s?e.s=n:e.s!==n&&r.throwArgumentError("signature v mismatch _vs","signature",A)}if(null==e.recoveryParam)null==e.v?r.throwArgumentError("signature missing v and recoveryParam","signature",A):0===e.v||1===e.v?e.recoveryParam=e.v:e.recoveryParam=1-e.v%2;else if(null==e.v)e.v=27+e.recoveryParam;else{const t=0===e.v||1===e.v?e.v:1-e.v%2;e.recoveryParam!==t&&r.throwArgumentError("signature recoveryParam mismatch v","signature",A)}null!=e.r&&h(e.r)?e.r=m(e.r,32):r.throwArgumentError("signature missing or invalid r","signature",A),null!=e.s&&h(e.s)?e.s=m(e.s,32):r.throwArgumentError("signature missing or invalid s","signature",A);const t=l(e.s);t[0]>=128&&r.throwArgumentError("signature s out of range","signature",A),e.recoveryParam&&(t[0]|=128);const i=B(t);e._vs&&(h(e._vs)||r.throwArgumentError("signature invalid _vs","signature",A),e._vs=m(e._vs,32)),null==e._vs?e._vs=i:e._vs!==i&&r.throwArgumentError("signature _vs mismatch v and s","signature",A)}return e.yParityAndS=e._vs,e.compact=e.r+e.yParityAndS.substring(2),e}function Q(A){return B(c([(A=C(A)).r,A.s,A.recoveryParam?"0x1c":"0x1b"]))}},90711:(A,e,t)=>{"use strict";t.d(e,{Bz:()=>s,_Y:()=>n,fh:()=>o,tL:()=>i});var r=t(10528);const i=r.O$.from(-1),n=r.O$.from(0),o=r.O$.from(1),s=r.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},32235:(A,e,t)=>{"use strict";t.d(e,{id:()=>n});var r=t(90712),i=t(2222);function n(A){return(0,r.w)((0,i.Y0)(A))}},49022:(A,e,t)=>{"use strict";t.r(e),t.d(e,{_TypedDataEncoder:()=>eA,dnsEncode:()=>G,ensNormalize:()=>F,hashMessage:()=>k,id:()=>r.id,isValidName:()=>D,messagePrefix:()=>V,namehash:()=>N});var r=t(32235),i=t(67640),n=t(2222),o=t(90712),s=t(78011);const a="hash/5.7.0";function l(A,e){null==e&&(e=1);const t=[],r=t.forEach,i=function(A,e){r.call(A,(function(A){e>0&&Array.isArray(A)?i(A,e-1):t.push(A)}))};return i(A,e),t}function c(A){return 1&A?~A>>1:A>>1}function g(A,e){let t=Array(A);for(let r=0,i=-1;r<A;r++)t[r]=i+=1+e();return t}function u(A,e){let t=Array(A);for(let r=0,i=0;r<A;r++)t[r]=i+=c(e());return t}function h(A,e){let t=g(A(),A),r=A(),i=g(r,A),n=function(A,e){let t=Array(A);for(let r=0;r<A;r++)t[r]=1+e();return t}(r,A);for(let A=0;A<r;A++)for(let e=0;e<n[A];e++)t.push(i[A]+e);return e?t.map((A=>e[A])):t}function E(A,e,t){let r=Array(A).fill(void 0).map((()=>[]));for(let i=0;i<e;i++)u(A,t).forEach(((A,e)=>r[e].push(A)));return r}function B(A,e){let t=1+e(),r=e(),i=function(A){let e=[];for(;;){let t=A();if(0==t)break;e.push(t)}return e}(e);return l(E(i.length,1+A,e).map(((A,e)=>{const n=A[0],o=A.slice(1);return Array(i[e]).fill(void 0).map(((A,e)=>{let i=e*r;return[n+e*t,o.map((A=>A+i))]}))})))}function I(A,e){return E(1+e(),1+A,e).map((A=>[A[0],A.slice(1)]))}const f=function(A){let e=0;return()=>A[e++]}(function(A){let e=0;function t(){return A[e++]<<8|A[e++]}let r=t(),i=1,n=[0,1];for(let A=1;A<r;A++)n.push(i+=t());let o=t(),s=e;e+=o;let a=0,l=0;function c(){return 0==a&&(l=l<<8|A[e++],a=8),l>>--a&1}const g=Math.pow(2,31),u=g>>>1,h=u>>1,E=g-1;let B=0;for(let A=0;A<31;A++)B=B<<1|c();let I=[],f=0,p=g;for(;;){let A=Math.floor(((B-f+1)*i-1)/p),e=0,t=r;for(;t-e>1;){let r=e+t>>>1;A<n[r]?t=r:e=r}if(0==e)break;I.push(e);let o=f+Math.floor(p*n[e]/i),s=f+Math.floor(p*n[e+1]/i)-1;for(;0==((o^s)&u);)B=B<<1&E|c(),o=o<<1&E,s=s<<1&E|1;for(;o&~s&h;)B=B&u|B<<1&E>>>1|c(),o=o<<1^u,s=(s^u)<<1|u|1;f=o,p=1+s-o}let d=r-4;return I.map((e=>{switch(e-d){case 3:return d+65792+(A[s++]<<16|A[s++]<<8|A[s++]);case 2:return d+256+(A[s++]<<8|A[s++]);case 1:return d+A[s++];default:return e-1}}))}(function(A){A=atob(A);const e=[];for(let t=0;t<A.length;t++)e.push(A.charCodeAt(t));return(0,i.arrayify)(e)}("AEQF2AO2DEsA2wIrAGsBRABxAN8AZwCcAEwAqgA0AGwAUgByADcATAAVAFYAIQAyACEAKAAYAFgAGwAjABQAMAAmADIAFAAfABQAKwATACoADgAbAA8AHQAYABoAGQAxADgALAAoADwAEwA9ABMAGgARAA4ADwAWABMAFgAIAA8AHgQXBYMA5BHJAS8JtAYoAe4AExozi0UAH21tAaMnBT8CrnIyhrMDhRgDygIBUAEHcoFHUPe8AXBjAewCjgDQR8IICIcEcQLwATXCDgzvHwBmBoHNAqsBdBcUAykgDhAMShskMgo8AY8jqAQfAUAfHw8BDw87MioGlCIPBwZCa4ELatMAAMspJVgsDl8AIhckSg8XAHdvTwBcIQEiDT4OPhUqbyECAEoAS34Aej8Ybx83JgT/Xw8gHxZ/7w8RICxPHA9vBw+Pfw8PHwAPFv+fAsAvCc8vEr8ivwD/EQ8Bol8OEBa/A78hrwAPCU8vESNvvwWfHwNfAVoDHr+ZAAED34YaAdJPAK7PLwSEgDLHAGo1Pz8Pvx9fUwMrpb8O/58VTzAPIBoXIyQJNF8hpwIVAT8YGAUADDNBaX3RAMomJCg9EhUeA29MABsZBTMNJipjOhc19gcIDR8bBwQHEggCWi6DIgLuAQYA+BAFCha3A5XiAEsqM7UFFgFLhAMjFTMYE1Klnw74nRVBG/ASCm0BYRN/BrsU3VoWy+S0vV8LQx+vN8gF2AC2AK5EAWwApgYDKmAAroQ0NDQ0AT+OCg7wAAIHRAbpNgVcBV0APTA5BfbPFgMLzcYL/QqqA82eBALKCjQCjqYCht0/k2+OAsXQAoP3ASTKDgDw6ACKAUYCMpIKJpRaAE4A5womABzZvs0REEKiACIQAd5QdAECAj4Ywg/wGqY2AVgAYADYvAoCGAEubA0gvAY2ALAAbpbvqpyEAGAEpgQAJgAG7gAgAEACmghUFwCqAMpAINQIwC4DthRAAPcycKgApoIdABwBfCisABoATwBqASIAvhnSBP8aH/ECeAKXAq40NjgDBTwFYQU6AXs3oABgAD4XNgmcCY1eCl5tIFZeUqGgyoNHABgAEQAaABNwWQAmABMATPMa3T34ADldyprmM1M2XociUQgLzvwAXT3xABgAEQAaABNwIGFAnADD8AAgAD4BBJWzaCcIAIEBFMAWwKoAAdq9BWAF5wLQpALEtQAKUSGkahR4GnJM+gsAwCgeFAiUAECQ0BQuL8AAIAAAADKeIheclvFqQAAETr4iAMxIARMgAMIoHhQIAn0E0pDQFC4HhznoAAAAIAI2C0/4lvFqQAAETgBJJwYCAy4ABgYAFAA8MBKYEH4eRhTkAjYeFcgACAYAeABsOqyQ5gRwDayqugEgaIIAtgoACgDmEABmBAWGme5OBJJA2m4cDeoAmITWAXwrMgOgAGwBCh6CBXYF1Tzg1wKAAFdiuABRAFwAXQBsAG8AdgBrAHYAbwCEAHEwfxQBVE5TEQADVFhTBwBDANILAqcCzgLTApQCrQL6vAAMAL8APLhNBKkE6glGKTAU4Dr4N2EYEwBCkABKk8rHAbYBmwIoAiU4Ajf/Aq4CowCAANIChzgaNBsCsTgeODcFXrgClQKdAqQBiQGYAqsCsjTsNHsfNPA0ixsAWTWiOAMFPDQSNCk2BDZHNow2TTZUNhk28Jk9VzI3QkEoAoICoQKwAqcAQAAxBV4FXbS9BW47YkIXP1ciUqs05DS/FwABUwJW11e6nHuYZmSh/RAYA8oMKvZ8KASoUAJYWAJ6ILAsAZSoqjpgA0ocBIhmDgDWAAawRDQoAAcuAj5iAHABZiR2AIgiHgCaAU68ACxuHAG0ygM8MiZIAlgBdF4GagJqAPZOHAMuBgoATkYAsABiAHgAMLoGDPj0HpKEBAAOJgAuALggTAHWAeAMEDbd20Uege0ADwAWADkAQgA9OHd+2MUQZBBhBgNNDkxxPxUQArEPqwvqERoM1irQ090ANK4H8ANYB/ADWANYB/AH8ANYB/ADWANYA1gDWBwP8B/YxRBkD00EcgWTBZAE2wiIJk4RhgctCNdUEnQjHEwDSgEBIypJITuYMxAlR0wRTQgIATZHbKx9PQNMMbBU+pCnA9AyVDlxBgMedhKlAC8PeCE1uk6DekxxpQpQT7NX9wBFBgASqwAS5gBJDSgAUCwGPQBI4zTYABNGAE2bAE3KAExdGABKaAbgAFBXAFCOAFBJABI2SWdObALDOq0//QomCZhvwHdTBkIQHCemEPgMNAG2ATwN7kvZBPIGPATKH34ZGg/OlZ0Ipi3eDO4m5C6igFsj9iqEBe5L9TzeC05RaQ9aC2YJ5DpkgU8DIgEOIowK3g06CG4Q9ArKbA3mEUYHOgPWSZsApgcCCxIdNhW2JhFirQsKOXgG/Br3C5AmsBMqev0F1BoiBk4BKhsAANAu6IWxWjJcHU9gBgQLJiPIFKlQIQ0mQLh4SRocBxYlqgKSQ3FKiFE3HpQh9zw+DWcuFFF9B/Y8BhlQC4I8n0asRQ8R0z6OPUkiSkwtBDaALDAnjAnQD4YMunxzAVoJIgmyDHITMhEYN8YIOgcaLpclJxYIIkaWYJsE+KAD9BPSAwwFQAlCBxQDthwuEy8VKgUOgSXYAvQ21i60ApBWgQEYBcwPJh/gEFFH4Q7qCJwCZgOEJewALhUiABginAhEZABgj9lTBi7MCMhqbSN1A2gU6GIRdAeSDlgHqBw0FcAc4nDJXgyGCSiksAlcAXYJmgFgBOQICjVcjKEgQmdUi1kYnCBiQUBd/QIyDGYVoES+h3kCjA9sEhwBNgF0BzoNAgJ4Ee4RbBCWCOyGBTW2M/k6JgRQIYQgEgooA1BszwsoJvoM+WoBpBJjAw00PnfvZ6xgtyUX/gcaMsZBYSHyC5NPzgydGsIYQ1QvGeUHwAP0GvQn60FYBgADpAQUOk4z7wS+C2oIjAlAAEoOpBgH2BhrCnKM0QEyjAG4mgNYkoQCcJAGOAcMAGgMiAV65gAeAqgIpAAGANADWAA6Aq4HngAaAIZCAT4DKDABIuYCkAOUCDLMAZYwAfQqBBzEDBYA+DhuSwLDsgKAa2ajBd5ZAo8CSjYBTiYEBk9IUgOwcuIA3ABMBhTgSAEWrEvMG+REAeBwLADIAPwABjYHBkIBzgH0bgC4AWALMgmjtLYBTuoqAIQAFmwB2AKKAN4ANgCA8gFUAE4FWvoF1AJQSgESMhksWGIBvAMgATQBDgB6BsyOpsoIIARuB9QCEBwV4gLvLwe2AgMi4BPOQsYCvd9WADIXUu5eZwqoCqdeaAC0YTQHMnM9UQAPH6k+yAdy/BZIiQImSwBQ5gBQQzSaNTFWSTYBpwGqKQK38AFtqwBI/wK37gK3rQK3sAK6280C0gK33AK3zxAAUEIAUD9SklKDArekArw5AEQAzAHCO147WTteO1k7XjtZO147WTteO1kDmChYI03AVU0oJqkKbV9GYewMpw3VRMk6ShPcYFJgMxPJLbgUwhXPJVcZPhq9JwYl5VUKDwUt1GYxCC00dhe9AEApaYNCY4ceMQpMHOhTklT5LRwAskujM7ANrRsWREEFSHXuYisWDwojAmSCAmJDXE6wXDchAqH4AmiZAmYKAp+FOBwMAmY8AmYnBG8EgAN/FAN+kzkHOXgYOYM6JCQCbB4CMjc4CwJtyAJtr/CLADRoRiwBaADfAOIASwYHmQyOAP8MwwAOtgJ3MAJ2o0ACeUxEAni7Hl3cRa9G9AJ8QAJ6yQJ9CgJ88UgBSH5kJQAsFklZSlwWGErNAtECAtDNSygDiFADh+dExpEzAvKiXQQDA69Lz0wuJgTQTU1NsAKLQAKK2cIcCB5EaAa4Ao44Ao5dQZiCAo7aAo5deVG1UzYLUtVUhgKT/AKTDQDqAB1VH1WwVdEHLBwplocy4nhnRTw6ApegAu+zWCKpAFomApaQApZ9nQCqWa1aCoJOADwClrYClk9cRVzSApnMApllXMtdCBoCnJw5wzqeApwXAp+cAp65iwAeEDIrEAKd8gKekwC2PmE1YfACntQCoG8BqgKeoCACnk+mY8lkKCYsAiewAiZ/AqD8AqBN2AKmMAKlzwKoAAB+AqfzaH1osgAESmodatICrOQCrK8CrWgCrQMCVx4CVd0CseLYAx9PbJgCsr4OArLpGGzhbWRtSWADJc4Ctl08QG6RAylGArhfArlIFgK5K3hwN3DiAr0aAy2zAzISAr6JcgMDM3ICvhtzI3NQAsPMAsMFc4N0TDZGdOEDPKgDPJsDPcACxX0CxkgCxhGKAshqUgLIRQLJUALJLwJkngLd03h6YniveSZL0QMYpGcDAmH1GfSVJXsMXpNevBICz2wCz20wTFTT9BSgAMeuAs90ASrrA04TfkwGAtwoAtuLAtJQA1JdA1NgAQIDVY2AikABzBfuYUZ2AILPg44C2sgC2d+EEYRKpz0DhqYAMANkD4ZyWvoAVgLfZgLeuXR4AuIw7RUB8zEoAfScAfLTiALr9ALpcXoAAur6AurlAPpIAboC7ooC652Wq5cEAu5AA4XhmHpw4XGiAvMEAGoDjheZlAL3FAORbwOSiAL3mQL52gL4Z5odmqy8OJsfA52EAv77ARwAOp8dn7QDBY4DpmsDptoA0sYDBmuhiaIGCgMMSgFgASACtgNGAJwEgLpoBgC8BGzAEowcggCEDC6kdjoAJAM0C5IKRoABZCgiAIzw3AYBLACkfng9ogigkgNmWAN6AEQCvrkEVqTGAwCsBRbAA+4iQkMCHR072jI2PTbUNsk2RjY5NvA23TZKNiU3EDcZN5I+RTxDRTBCJkK5VBYKFhZfwQCWygU3AJBRHpu+OytgNxa61A40GMsYjsn7BVwFXQVcBV0FaAVdBVwFXQVcBV0FXAVdBVwFXUsaCNyKAK4AAQUHBwKU7oICoW1e7jAEzgPxA+YDwgCkBFDAwADABKzAAOxFLhitA1UFTDeyPkM+bj51QkRCuwTQWWQ8X+0AWBYzsACNA8xwzAGm7EZ/QisoCTAbLDs6fnLfb8H2GccsbgFw13M1HAVkBW/Jxsm9CNRO8E8FDD0FBQw9FkcClOYCoMFegpDfADgcMiA2AJQACB8AsigKAIzIEAJKeBIApY5yPZQIAKQiHb4fvj5BKSRPQrZCOz0oXyxgOywfKAnGbgMClQaCAkILXgdeCD9IIGUgQj5fPoY+dT52Ao5CM0dAX9BTVG9SDzFwWTQAbxBzJF/lOEIQQglCCkKJIAls5AcClQICoKPMODEFxhi6KSAbiyfIRrMjtCgdWCAkPlFBIitCsEJRzAbMAV/OEyQzDg0OAQQEJ36i328/Mk9AybDJsQlq3tDRApUKAkFzXf1d/j9uALYP6hCoFgCTGD8kPsFKQiobrm0+zj0KSD8kPnVCRBwMDyJRTHFgMTJa5rwXQiQ2YfI/JD7BMEJEHGINTw4TOFlIRzwJO0icMQpyPyQ+wzJCRBv6DVgnKB01NgUKj2bwYzMqCoBkznBgEF+zYDIocwRIX+NgHj4HICNfh2C4CwdwFWpTG/lgUhYGAwRfv2Ts8mAaXzVgml/XYIJfuWC4HI1gUF9pYJZgMR6ilQHMAOwLAlDRefC0in4AXAEJA6PjCwc0IamOANMMCAECRQDFNRTZBgd+CwQlRA+r6+gLBDEFBnwUBXgKATIArwAGRAAHA3cDdAN2A3kDdwN9A3oDdQN7A30DfAN4A3oDfQAYEAAlAtYASwMAUAFsAHcKAHcAmgB3AHUAdQB2AHVu8UgAygDAAHcAdQB1AHYAdQALCgB3AAsAmgB3AAsCOwB3AAtu8UgAygDAAHgKAJoAdwB3AHUAdQB2AHUAeAB1AHUAdgB1bvFIAMoAwAALCgCaAHcACwB3AAsCOwB3AAtu8UgAygDAAH4ACwGgALcBpwC6AahdAu0COwLtbvFIAMoAwAALCgCaAu0ACwLtAAsCOwLtAAtu8UgAygDAA24ACwNvAAu0VsQAAzsAABCkjUIpAAsAUIusOggWcgMeBxVsGwL67U/2HlzmWOEeOgALASvuAAseAfpKUpnpGgYJDCIZM6YyARUE9ThqAD5iXQgnAJYJPnOzw0ZAEZxEKsIAkA4DhAHnTAIDxxUDK0lxCQlPYgIvIQVYJQBVqE1GakUAKGYiDToSBA1EtAYAXQJYAIF8GgMHRyAAIAjOe9YncekRAA0KACUrjwE7Ayc6AAYWAqaiKG4McEcqANoN3+Mg9TwCBhIkuCny+JwUQ29L008JluRxu3K+oAdqiHOqFH0AG5SUIfUJ5SxCGfxdipRzqTmT4V5Zb+r1Uo4Vm+NqSSEl2mNvR2JhIa8SpYO6ntdwFXHCWTCK8f2+Hxo7uiG3drDycAuKIMP5bhi06ACnqArH1rz4Rqg//lm6SgJGEVbF9xJHISaR6HxqxSnkw6shDnelHKNEfGUXSJRJ1GcsmtJw25xrZMDK9gXSm1/YMkdX4/6NKYOdtk/NQ3/NnDASjTc3fPjIjW/5sVfVObX2oTDWkr1dF9f3kxBsD3/3aQO8hPfRz+e0uEiJqt1161griu7gz8hDDwtpy+F+BWtefnKHZPAxcZoWbnznhJpy0e842j36bcNzGnIEusgGX0a8ZxsnjcSsPDZ09yZ36fCQbriHeQ72JRMILNl6ePPf2HWoVwgWAm1fb3V2sAY0+B6rAXqSwPBgseVmoqsBTSrm91+XasMYYySI8eeRxH3ZvHkMz3BQ5aJ3iUVbYPNM3/7emRtjlsMgv/9VyTsyt/mK+8fgWeT6SoFaclXqn42dAIsvAarF5vNNWHzKSkKQ/8Hfk5ZWK7r9yliOsooyBjRhfkHP4Q2DkWXQi6FG/9r/IwbmkV5T7JSopHKn1pJwm9tb5Ot0oyN1Z2mPpKXHTxx2nlK08fKk1hEYA8WgVVWL5lgx0iTv+KdojJeU23ZDjmiubXOxVXJKKi2Wjuh2HLZOFLiSC7Tls5SMh4f+Pj6xUSrNjFqLGehRNB8lC0QSLNmkJJx/wSG3MnjE9T1CkPwJI0wH2lfzwETIiVqUxg0dfu5q39Gt+hwdcxkhhNvQ4TyrBceof3Mhs/IxFci1HmHr4FMZgXEEczPiGCx0HRwzAqDq2j9AVm1kwN0mRVLWLylgtoPNapF5cY4Y1wJh/e0BBwZj44YgZrDNqvD/9Hv7GFYdUQeDJuQ3EWI4HaKqavU1XjC/n41kT4L79kqGq0kLhdTZvgP3TA3fS0ozVz+5piZsoOtIvBUFoMKbNcmBL6YxxaUAusHB38XrS8dQMnQwJfUUkpRoGr5AUeWicvBTzyK9g77+yCkf5PAysL7r/JjcZgrbvRpMW9iyaxZvKO6ceZN2EwIxKwVFPuvFuiEPGCoagbMo+SpydLrXqBzNCDGFCrO/rkcwa2xhokQZ5CdZ0AsU3JfSqJ6n5I14YA+P/uAgfhPU84Tlw7cEFfp7AEE8ey4sP12PTt4Cods1GRgDOB5xvyiR5m+Bx8O5nBCNctU8BevfV5A08x6RHd5jcwPTMDSZJOedIZ1cGQ704lxbAzqZOP05ZxaOghzSdvFBHYqomATARyAADK4elP8Ly3IrUZKfWh23Xy20uBUmLS4Pfagu9+oyVa2iPgqRP3F2CTUsvJ7+RYnN8fFZbU/HVvxvcFFDKkiTqV5UBZ3Gz54JAKByi9hkKMZJvuGgcSYXFmw08UyoQyVdfTD1/dMkCHXcTGAKeROgArsvmRrQTLUOXioOHGK2QkjHuoYFgXciZoTJd6Fs5q1QX1G+p/e26hYsEf7QZD1nnIyl/SFkNtYYmmBhpBrxl9WbY0YpHWRuw2Ll/tj9mD8P4snVzJl4F9J+1arVeTb9E5r2ILH04qStjxQNwn3m4YNqxmaNbLAqW2TN6LidwuJRqS+NXbtqxoeDXpxeGWmxzSkWxjkyCkX4NQRme6q5SAcC+M7+9ETfA/EwrzQajKakCwYyeunP6ZFlxU2oMEn1Pz31zeStW74G406ZJFCl1wAXIoUKkWotYEpOuXB1uVNxJ63dpJEqfxBeptwIHNrPz8BllZoIcBoXwgfJ+8VAUnVPvRvexnw0Ma/WiGYuJO5y8QTvEYBigFmhUxY5RqzE8OcywN/8m4UYrlaniJO75XQ6KSo9+tWHlu+hMi0UVdiKQp7NelnoZUzNaIyBPVeOwK6GNp+FfHuPOoyhaWuNvTYFkvxscMQWDh+zeFCFkgwbXftiV23ywJ4+uwRqmg9k3KzwIQpzppt8DBBOMbrqwQM5Gb05sEwdKzMiAqOloaA/lr0KA+1pr0/+HiWoiIjHA/wir2nIuS3PeU/ji3O6ZwoxcR1SZ9FhtLC5S0FIzFhbBWcGVP/KpxOPSiUoAdWUpqKH++6Scz507iCcxYI6rdMBICPJZea7OcmeFw5mObJSiqpjg2UoWNIs+cFhyDSt6geV5qgi3FunmwwDoGSMgerFOZGX1m0dMCYo5XOruxO063dwENK9DbnVM9wYFREzh4vyU1WYYJ/LRRp6oxgjqP/X5a8/4Af6p6NWkQferzBmXme0zY/4nwMJm/wd1tIqSwGz+E3xPEAOoZlJit3XddD7/BT1pllzOx+8bmQtANQ/S6fZexc6qi3W+Q2xcmXTUhuS5mpHQRvcxZUN0S5+PL9lXWUAaRZhEH8hTdAcuNMMCuVNKTEGtSUKNi3O6KhSaTzck8csZ2vWRZ+d7mW8c4IKwXIYd25S/zIftPkwPzufjEvOHWVD1m+FjpDVUTV0DGDuHj6QnaEwLu/dEgdLQOg9E1Sro9XHJ8ykLAwtPu+pxqKDuFexqON1sKQm7rwbE1E68UCfA/erovrTCG+DBSNg0l4goDQvZN6uNlbyLpcZAwj2UclycvLpIZMgv4yRlpb3YuMftozorbcGVHt/VeDV3+Fdf1TP0iuaCsPi2G4XeGhsyF1ubVDxkoJhmniQ0/jSg/eYML9KLfnCFgISWkp91eauR3IQvED0nAPXK+6hPCYs+n3+hCZbiskmVMG2da+0EsZPonUeIY8EbfusQXjsK/eFDaosbPjEfQS0RKG7yj5GG69M7MeO1HmiUYocgygJHL6M1qzUDDwUSmr99V7Sdr2F3JjQAJY+F0yH33Iv3+C9M38eML7gTgmNu/r2bUMiPvpYbZ6v1/IaESirBHNa7mPKn4dEmYg7v/+HQgPN1G79jBQ1+soydfDC2r+h2Bl/KIc5KjMK7OH6nb1jLsNf0EHVe2KBiE51ox636uyG6Lho0t3J34L5QY/ilE3mikaF4HKXG1mG1rCevT1Vv6GavltxoQe/bMrpZvRggnBxSEPEeEzkEdOxTnPXHVjUYdw8JYvjB/o7Eegc3Ma+NUxLLnsK0kJlinPmUHzHGtrk5+CAbVzFOBqpyy3QVUnzTDfC/0XD94/okH+OB+i7g9lolhWIjSnfIb+Eq43ZXOWmwvjyV/qqD+t0e+7mTEM74qP/Ozt8nmC7mRpyu63OB4KnUzFc074SqoyPUAgM+/TJGFo6T44EHnQU4X4z6qannVqgw/U7zCpwcmXV1AubIrvOmkKHazJAR55ePjp5tLBsN8vAqs3NAHdcEHOR2xQ0lsNAFzSUuxFQCFYvXLZJdOj9p4fNq6p0HBGUik2YzaI4xySy91KzhQ0+q1hjxvImRwPRf76tChlRkhRCi74NXZ9qUNeIwP+s5p+3m5nwPdNOHgSLD79n7O9m1n1uDHiMntq4nkYwV5OZ1ENbXxFd4PgrlvavZsyUO4MqYlqqn1O8W/I1dEZq5dXhrbETLaZIbC2Kj/Aa/QM+fqUOHdf0tXAQ1huZ3cmWECWSXy/43j35+Mvq9xws7JKseriZ1pEWKc8qlzNrGPUGcVgOa9cPJYIJsGnJTAUsEcDOEVULO5x0rXBijc1lgXEzQQKhROf8zIV82w8eswc78YX11KYLWQRcgHNJElBxfXr72lS2RBSl07qTKorO2uUDZr3sFhYsvnhLZn0A94KRzJ/7DEGIAhW5ZWFpL8gEwu1aLA9MuWZzNwl8Oze9Y+bX+v9gywRVnoB5I/8kXTXU3141yRLYrIOOz6SOnyHNy4SieqzkBXharjfjqq1q6tklaEbA8Qfm2DaIPs7OTq/nvJBjKfO2H9bH2cCMh1+5gspfycu8f/cuuRmtDjyqZ7uCIMyjdV3a+p3fqmXsRx4C8lujezIFHnQiVTXLXuI1XrwN3+siYYj2HHTvESUx8DlOTXpak9qFRK+L3mgJ1WsD7F4cu1aJoFoYQnu+wGDMOjJM3kiBQWHCcvhJ/HRdxodOQp45YZaOTA22Nb4XKCVxqkbwMYFhzYQYIAnCW8FW14uf98jhUG2zrKhQQ0q0CEq0t5nXyvUyvR8DvD69LU+g3i+HFWQMQ8PqZuHD+sNKAV0+M6EJC0szq7rEr7B5bQ8BcNHzvDMc9eqB5ZCQdTf80Obn4uzjwpYU7SISdtV0QGa9D3Wrh2BDQtpBKxaNFV+/Cy2P/Sv+8s7Ud0Fd74X4+o/TNztWgETUapy+majNQ68Lq3ee0ZO48VEbTZYiH1Co4OlfWef82RWeyUXo7woM03PyapGfikTnQinoNq5z5veLpeMV3HCAMTaZmA1oGLAn7XS3XYsz+XK7VMQsc4XKrmDXOLU/pSXVNUq8dIqTba///3x6LiLS6xs1xuCAYSfcQ3+rQgmu7uvf3THKt5Ooo97TqcbRqxx7EASizaQCBQllG/rYxVapMLgtLbZS64w1MDBMXX+PQpBKNwqUKOf2DDRDUXQf9EhOS0Qj4nTmlA8dzSLz/G1d+Ud8MTy/6ghhdiLpeerGY/UlDOfiuqFsMUU5/UYlP+BAmgRLuNpvrUaLlVkrqDievNVEAwF+4CoM1MZTmjxjJMsKJq+u8Zd7tNCUFy6LiyYXRJQ4VyvEQFFaCGKsxIwQkk7EzZ6LTJq2hUuPhvAW+gQnSG6J+MszC+7QCRHcnqDdyNRJ6T9xyS87A6MDutbzKGvGktpbXqtzWtXb9HsfK2cBMomjN9a4y+TaJLnXxAeX/HWzmf4cR4vALt/P4w4qgKY04ml4ZdLOinFYS6cup3G/1ie4+t1eOnpBNlqGqs75ilzkT4+DsZQxNvaSKJ//6zIbbk/M7LOhFmRc/1R+kBtz7JFGdZm/COotIdvQoXpTqP/1uqEUmCb/QWoGLMwO5ANcHzxdY48IGP5+J+zKOTBFZ4Pid+GTM+Wq12MV/H86xEJptBa6T+p3kgpwLedManBHC2GgNrFpoN2xnrMz9WFWX/8/ygSBkavq2Uv7FdCsLEYLu9LLIvAU0bNRDtzYl+/vXmjpIvuJFYjmI0im6QEYqnIeMsNjXG4vIutIGHijeAG/9EDBozKV5cldkHbLxHh25vT+ZEzbhXlqvpzKJwcEgfNwLAKFeo0/pvEE10XDB+EXRTXtSzJozQKFFAJhMxYkVaCW+E9AL7tMeU8acxidHqzb6lX4691UsDpy/LLRmT+epgW56+5Cw8tB4kMUv6s9lh3eRKbyGs+H/4mQMaYzPTf2OOdokEn+zzgvoD3FqNKk8QqGAXVsqcGdXrT62fSPkR2vROFi68A6se86UxRUk4cajfPyCC4G5wDhD+zNq4jodQ4u4n/m37Lr36n4LIAAsVr02dFi9AiwA81MYs2rm4eDlDNmdMRvEKRHfBwW5DdMNp0jPFZMeARqF/wL4XBfd+EMLBfMzpH5GH6NaW+1vrvMdg+VxDzatk3MXgO3ro3P/DpcC6+Mo4MySJhKJhSR01SGGGp5hPWmrrUgrv3lDnP+HhcI3nt3YqBoVAVTBAQT5iuhTg8nvPtd8ZeYj6w1x6RqGUBrSku7+N1+BaasZvjTk64RoIDlL8brpEcJx3OmY7jLoZsswdtmhfC/G21llXhITOwmvRDDeTTPbyASOa16cF5/A1fZAidJpqju3wYAy9avPR1ya6eNp9K8XYrrtuxlqi+bDKwlfrYdR0RRiKRVTLOH85+ZY7XSmzRpfZBJjaTa81VDcJHpZnZnSQLASGYW9l51ZV/h7eVzTi3Hv6hUsgc/51AqJRTkpbFVLXXszoBL8nBX0u/0jBLT8nH+fJePbrwURT58OY+UieRjd1vs04w0VG5VN2U6MoGZkQzKN/ptz0Q366dxoTGmj7i1NQGHi9GgnquXFYdrCfZBmeb7s0T6yrdlZH5cZuwHFyIJ/kAtGsTg0xH5taAAq44BAk1CPk9KVVbqQzrCUiFdF/6gtlPQ8bHHc1G1W92MXGZ5HEHftyLYs8mbD/9xYRUWkHmlM0zC2ilJlnNgV4bfALpQghxOUoZL7VTqtCHIaQSXm+YUMnpkXybnV+A6xlm2CVy8fn0Xlm2XRa0+zzOa21JWWmixfiPMSCZ7qA4rS93VN3pkpF1s5TonQjisHf7iU9ZGvUPOAKZcR1pbeVf/Ul7OhepGCaId9wOtqo7pJ7yLcBZ0pFkOF28y4zEI/kcUNmutBHaQpBdNM8vjCS6HZRokkeo88TBAjGyG7SR+6vUgTcyK9Imalj0kuxz0wmK+byQU11AiJFk/ya5dNduRClcnU64yGu/ieWSeOos1t3ep+RPIWQ2pyTYVbZltTbsb7NiwSi3AV+8KLWk7LxCnfZUetEM8ThnsSoGH38/nyAwFguJp8FjvlHtcWZuU4hPva0rHfr0UhOOJ/F6vS62FW7KzkmRll2HEc7oUq4fyi5T70Vl7YVIfsPHUCdHesf9Lk7WNVWO75JDkYbMI8TOW8JKVtLY9d6UJRITO8oKo0xS+o99Yy04iniGHAaGj88kEWgwv0OrHdY/nr76DOGNS59hXCGXzTKUvDl9iKpLSWYN1lxIeyywdNpTkhay74w2jFT6NS8qkjo5CxA1yfSYwp6AJIZNKIeEK5PJAW7ORgWgwp0VgzYpqovMrWxbu+DGZ6Lhie1RAqpzm8VUzKJOH3mCzWuTOLsN3VT/dv2eeYe9UjbR8YTBsLz7q60VN1sU51k+um1f8JxD5pPhbhSC8rRaB454tmh6YUWrJI3+GWY0qeWioj/tbkYITOkJaeuGt4JrJvHA+l0Gu7kY7XOaa05alMnRWVCXqFgLIwSY4uF59Ue5SU4QKuc/HamDxbr0x6csCetXGoP7Qn1Bk/J9DsynO/UD6iZ1Hyrz+jit0hDCwi/E9OjgKTbB3ZQKQ/0ZOvevfNHG0NK4Aj3Cp7NpRk07RT1i/S0EL93Ag8GRgKI9CfpajKyK6+Jj/PI1KO5/85VAwz2AwzP8FTBb075IxCXv6T9RVvWT2tUaqxDS92zrGUbWzUYk9mSs82pECH+fkqsDt93VW++4YsR/dHCYcQSYTO/KaBMDj9LSD/J/+z20Kq8XvZUAIHtm9hRPP3ItbuAu2Hm5lkPs92pd7kCxgRs0xOVBnZ13ccdA0aunrwv9SdqElJRC3g+oCu+nXyCgmXUs9yMjTMAIHfxZV+aPKcZeUBWt057Xo85Ks1Ir5gzEHCWqZEhrLZMuF11ziGtFQUds/EESajhagzcKsxamcSZxGth4UII+adPhQkUnx2WyN+4YWR+r3f8MnkyGFuR4zjzxJS8WsQYR5PTyRaD9ixa6Mh741nBHbzfjXHskGDq179xaRNrCIB1z1xRfWfjqw2pHc1zk9xlPpL8sQWAIuETZZhbnmL54rceXVNRvUiKrrqIkeogsl0XXb17ylNb0f4GA9Wd44vffEG8FSZGHEL2fbaTGRcSiCeA8PmA/f6Hz8HCS76fXUHwgwkzSwlI71ekZ7Fapmlk/KC+Hs8hUcw3N2LN5LhkVYyizYFl/uPeVP5lsoJHhhfWvvSWruCUW1ZcJOeuTbrDgywJ/qG07gZJplnTvLcYdNaH0KMYOYMGX+rB4NGPFmQsNaIwlWrfCezxre8zXBrsMT+edVLbLqN1BqB76JH4BvZTqUIMfGwPGEn+EnmTV86fPBaYbFL3DFEhjB45CewkXEAtJxk4/Ms2pPXnaRqdky0HOYdcUcE2zcXq4vaIvW2/v0nHFJH2XXe22ueDmq/18XGtELSq85j9X8q0tcNSSKJIX8FTuJF/Pf8j5PhqG2u+osvsLxYrvvfeVJL+4tkcXcr9JV7v0ERmj/X6fM3NC4j6dS1+9Umr2oPavqiAydTZPLMNRGY23LO9zAVDly7jD+70G5TPPLdhRIl4WxcYjLnM+SNcJ26FOrkrISUtPObIz5Zb3AG612krnpy15RMW+1cQjlnWFI6538qky9axd2oJmHIHP08KyP0ubGO+TQNOYuv2uh17yCIvR8VcStw7o1g0NM60sk+8Tq7YfIBJrtp53GkvzXH7OA0p8/n/u1satf/VJhtR1l8Wa6Gmaug7haSpaCaYQax6ta0mkutlb+eAOSG1aobM81D9A4iS1RRlzBBoVX6tU1S6WE2N9ORY6DfeLRC4l9Rvr5h95XDWB2mR1d4WFudpsgVYwiTwT31ljskD8ZyDOlm5DkGh9N/UB/0AI5Xvb8ZBmai2hQ4BWMqFwYnzxwB26YHSOv9WgY3JXnvoN+2R4rqGVh/LLDMtpFP+SpMGJNWvbIl5SOodbCczW2RKleksPoUeGEzrjtKHVdtZA+kfqO+rVx/iclCqwoopepvJpSTDjT+b9GWylGRF8EDbGlw6eUzmJM95Ovoz+kwLX3c2fTjFeYEsE7vUZm3mqdGJuKh2w9/QGSaqRHs99aScGOdDqkFcACoqdbBoQqqjamhH6Q9ng39JCg3lrGJwd50Qk9ovnqBTr8MME7Ps2wiVfygUmPoUBJJfJWX5Nda0nuncbFkA=="))),p=new Set(h(f)),d=new Set(h(f)),w=function(A){let e=[];for(;;){let t=A();if(0==t)break;e.push(B(t,A))}for(;;){let t=A()-1;if(t<0)break;e.push(I(t,A))}return function(A){const e={};for(let t=0;t<A.length;t++){const r=A[t];e[r[0]]=r[1]}return e}(l(e))}(f),m=function(A){let e=h(A).sort(((A,e)=>A-e));return function t(){let r=[];for(;;){let i=h(A,e);if(0==i.length)break;r.push({set:new Set(i),node:t()})}r.sort(((A,e)=>e.set.size-A.set.size));let i=A(),n=i%3;i=i/3|0;let o=!!(1&i);return i>>=1,{branches:r,valid:n,fe0f:o,save:1==i,check:2==i}}()}(f),C=45,Q=95;function R(A){return(0,n.XL)(A)}function y(A){return A.filter((A=>65039!=A))}function U(A){for(let e of A.split(".")){let A=R(e);try{for(let e=A.lastIndexOf(Q)-1;e>=0;e--)if(A[e]!==Q)throw new Error("underscore only allowed at start");if(A.length>=4&&A.every((A=>A<128))&&A[2]===C&&A[3]===C)throw new Error("invalid label extension")}catch(A){throw new Error(`Invalid label "${e}": ${A.message}`)}}return A}function v(A,e){var t;let r,i,n=m,o=[],s=A.length;for(e&&(e.length=0);s;){let a=A[--s];if(n=null===(t=n.branches.find((A=>A.set.has(a))))||void 0===t?void 0:t.node,!n)break;if(n.save)i=a;else if(n.check&&a===i)break;o.push(a),n.fe0f&&(o.push(65039),s>0&&65039==A[s-1]&&s--),n.valid&&(r=o.slice(),2==n.valid&&r.splice(1,1),e&&e.push(...A.slice(s).reverse()),A.length=s)}return r}const M=new s.Yd(a),T=new Uint8Array(32);function b(A){if(0===A.length)throw new Error("invalid ENS name; empty component");return A}function S(A){const e=(0,n.Y0)(function(A){return U(function(A,e){let t=R(A).reverse(),r=[];for(;t.length;){let A=v(t);if(A){r.push(...e(A));continue}let i=t.pop();if(p.has(i)){r.push(i);continue}if(d.has(i))continue;let n=w[i];if(!n)throw new Error(`Disallowed codepoint: 0x${i.toString(16).toUpperCase()}`);r.push(...n)}return U(String.fromCodePoint(...r).normalize("NFC"))}(A,y))}(A)),t=[];if(0===A.length)return t;let r=0;for(let A=0;A<e.length;A++)46===e[A]&&(t.push(b(e.slice(r,A))),r=A+1);if(r>=e.length)throw new Error("invalid ENS name; empty component");return t.push(b(e.slice(r))),t}function F(A){return S(A).map((A=>(0,n.ZN)(A))).join(".")}function D(A){try{return 0!==S(A).length}catch(A){}return!1}function N(A){"string"!=typeof A&&M.throwArgumentError("invalid ENS name; not a string","name",A);let e=T;const t=S(A);for(;t.length;)e=(0,o.w)((0,i.concat)([e,(0,o.w)(t.pop())]));return(0,i.hexlify)(e)}function G(A){return(0,i.hexlify)((0,i.concat)(S(A).map((A=>{if(A.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const e=new Uint8Array(A.length+1);return e.set(A,1),e[0]=e.length-1,e}))))+"00"}T.fill(0);const V="Ethereum Signed Message:\n";function k(A){return"string"==typeof A&&(A=(0,n.Y0)(A)),(0,o.w)((0,i.concat)([(0,n.Y0)(V),(0,n.Y0)(String(A.length)),A]))}var O=t(89701),x=t(10528),Z=t(80221);const J=new s.Yd(a),P=new Uint8Array(32);P.fill(0);const Y=x.O$.from(-1),H=x.O$.from(0),L=x.O$.from(1),j=x.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),W=(0,i.hexZeroPad)(L.toHexString(),32),z=(0,i.hexZeroPad)(H.toHexString(),32),K={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},q=["name","version","chainId","verifyingContract","salt"];function X(A){return function(e){return"string"!=typeof e&&J.throwArgumentError(`invalid domain value for ${JSON.stringify(A)}`,`domain.${A}`,e),e}}const _={name:X("name"),version:X("version"),chainId:function(A){try{return x.O$.from(A).toString()}catch(A){}return J.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",A)},verifyingContract:function(A){try{return(0,O.getAddress)(A).toLowerCase()}catch(A){}return J.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",A)},salt:function(A){try{const e=(0,i.arrayify)(A);if(32!==e.length)throw new Error("bad length");return(0,i.hexlify)(e)}catch(A){}return J.throwArgumentError('invalid domain value "salt"',"domain.salt",A)}};function $(A){{const e=A.match(/^(u?)int(\d*)$/);if(e){const t=""===e[1],r=parseInt(e[2]||"256");(r%8!=0||r>256||e[2]&&e[2]!==String(r))&&J.throwArgumentError("invalid numeric width","type",A);const n=j.mask(t?r-1:r),o=t?n.add(L).mul(Y):H;return function(e){const t=x.O$.from(e);return(t.lt(o)||t.gt(n))&&J.throwArgumentError(`value out-of-bounds for ${A}`,"value",e),(0,i.hexZeroPad)(t.toTwos(256).toHexString(),32)}}}{const e=A.match(/^bytes(\d+)$/);if(e){const t=parseInt(e[1]);return(0===t||t>32||e[1]!==String(t))&&J.throwArgumentError("invalid bytes width","type",A),function(e){return(0,i.arrayify)(e).length!==t&&J.throwArgumentError(`invalid length for ${A}`,"value",e),function(A){const e=(0,i.arrayify)(A),t=e.length%32;return t?(0,i.hexConcat)([e,P.slice(t)]):(0,i.hexlify)(e)}(e)}}}switch(A){case"address":return function(A){return(0,i.hexZeroPad)((0,O.getAddress)(A),32)};case"bool":return function(A){return A?W:z};case"bytes":return function(A){return(0,o.w)(A)};case"string":return function(A){return(0,r.id)(A)}}return null}function AA(A,e){return`${A}(${e.map((({name:A,type:e})=>e+" "+A)).join(",")})`}class eA{constructor(A){(0,Z.zG)(this,"types",Object.freeze((0,Z.p$)(A))),(0,Z.zG)(this,"_encoderCache",{}),(0,Z.zG)(this,"_types",{});const e={},t={},r={};Object.keys(A).forEach((A=>{e[A]={},t[A]=[],r[A]={}}));for(const r in A){const i={};A[r].forEach((n=>{i[n.name]&&J.throwArgumentError(`duplicate variable name ${JSON.stringify(n.name)} in ${JSON.stringify(r)}`,"types",A),i[n.name]=!0;const o=n.type.match(/^([^\x5b]*)(\x5b|$)/)[1];o===r&&J.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",A),$(o)||(t[o]||J.throwArgumentError(`unknown type ${JSON.stringify(o)}`,"types",A),t[o].push(r),e[r][o]=!0)}))}const i=Object.keys(t).filter((A=>0===t[A].length));0===i.length?J.throwArgumentError("missing primary type","types",A):i.length>1&&J.throwArgumentError(`ambiguous primary types or unused types: ${i.map((A=>JSON.stringify(A))).join(", ")}`,"types",A),(0,Z.zG)(this,"primaryType",i[0]),function i(n,o){o[n]&&J.throwArgumentError(`circular type reference to ${JSON.stringify(n)}`,"types",A),o[n]=!0,Object.keys(e[n]).forEach((A=>{t[A]&&(i(A,o),Object.keys(o).forEach((e=>{r[e][A]=!0})))})),delete o[n]}(this.primaryType,{});for(const e in r){const t=Object.keys(r[e]);t.sort(),this._types[e]=AA(e,A[e])+t.map((e=>AA(e,A[e]))).join("")}}getEncoder(A){let e=this._encoderCache[A];return e||(e=this._encoderCache[A]=this._getEncoder(A)),e}_getEncoder(A){{const e=$(A);if(e)return e}const e=A.match(/^(.*)(\x5b(\d*)\x5d)$/);if(e){const A=e[1],t=this.getEncoder(A),r=parseInt(e[3]);return e=>{r>=0&&e.length!==r&&J.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e);let n=e.map(t);return this._types[A]&&(n=n.map(o.w)),(0,o.w)((0,i.hexConcat)(n))}}const t=this.types[A];if(t){const e=(0,r.id)(this._types[A]);return A=>{const r=t.map((({name:e,type:t})=>{const r=this.getEncoder(t)(A[e]);return this._types[t]?(0,o.w)(r):r}));return r.unshift(e),(0,i.hexConcat)(r)}}return J.throwArgumentError(`unknown type: ${A}`,"type",A)}encodeType(A){const e=this._types[A];return e||J.throwArgumentError(`unknown type: ${JSON.stringify(A)}`,"name",A),e}encodeData(A,e){return this.getEncoder(A)(e)}hashStruct(A,e){return(0,o.w)(this.encodeData(A,e))}encode(A){return this.encodeData(this.primaryType,A)}hash(A){return this.hashStruct(this.primaryType,A)}_visit(A,e,t){if($(A))return t(A,e);const r=A.match(/^(.*)(\x5b(\d*)\x5d)$/);if(r){const A=r[1],i=parseInt(r[3]);return i>=0&&e.length!==i&&J.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e),e.map((e=>this._visit(A,e,t)))}const i=this.types[A];return i?i.reduce(((A,{name:r,type:i})=>(A[r]=this._visit(i,e[r],t),A)),{}):J.throwArgumentError(`unknown type: ${A}`,"type",A)}visit(A,e){return this._visit(this.primaryType,A,e)}static from(A){return new eA(A)}static getPrimaryType(A){return eA.from(A).primaryType}static hashStruct(A,e,t){return eA.from(e).hashStruct(A,t)}static hashDomain(A){const e=[];for(const t in A){const r=K[t];r||J.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(t)}`,"domain",A),e.push({name:t,type:r})}return e.sort(((A,e)=>q.indexOf(A.name)-q.indexOf(e.name))),eA.hashStruct("EIP712Domain",{EIP712Domain:e},A)}static encode(A,e,t){return(0,i.hexConcat)(["0x1901",eA.hashDomain(A),eA.from(e).hash(t)])}static hash(A,e,t){return(0,o.w)(eA.encode(A,e,t))}static resolveNames(A,e,t,r){return n=this,o=void 0,a=function*(){A=(0,Z.DC)(A);const n={};A.verifyingContract&&!(0,i.isHexString)(A.verifyingContract,20)&&(n[A.verifyingContract]="0x");const o=eA.from(e);o.visit(t,((A,e)=>("address"!==A||(0,i.isHexString)(e,20)||(n[e]="0x"),e)));for(const A in n)n[A]=yield r(A);return A.verifyingContract&&n[A.verifyingContract]&&(A.verifyingContract=n[A.verifyingContract]),t=o.visit(t,((A,e)=>"address"===A&&n[e]?n[e]:e)),{domain:A,value:t}},new((s=void 0)||(s=Promise))((function(A,e){function t(A){try{i(a.next(A))}catch(A){e(A)}}function r(A){try{i(a.throw(A))}catch(A){e(A)}}function i(e){var i;e.done?A(e.value):(i=e.value,i instanceof s?i:new s((function(A){A(i)}))).then(t,r)}i((a=a.apply(n,o||[])).next())}));var n,o,s,a}static getPayload(A,e,t){eA.hashDomain(A);const r={},n=[];q.forEach((e=>{const t=A[e];null!=t&&(r[e]=_[e](t),n.push({name:e,type:K[e]}))}));const o=eA.from(e),s=(0,Z.DC)(e);return s.EIP712Domain?J.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",e):s.EIP712Domain=n,o.encode(t),{types:s,domain:r,primaryType:o.primaryType,message:o.visit(t,((A,e)=>{if(A.match(/^bytes(\d*)/))return(0,i.hexlify)((0,i.arrayify)(e));if(A.match(/^u?int/))return x.O$.from(e).toString();switch(A){case"address":return e.toLowerCase();case"bool":return!!e;case"string":return"string"!=typeof e&&J.throwArgumentError("invalid string","value",e),e}return J.throwArgumentError("unsupported type","type",A)}))}}}},90712:(A,e,t)=>{"use strict";t.d(e,{w:()=>o});var r=t(83669),i=t.n(r),n=t(67640);function o(A){return"0x"+i().keccak_256((0,n.arrayify)(A))}},94509:(A,e,t)=>{"use strict";t.r(e),t.d(e,{keccak256:()=>d});var r=t(83669),i=t.n(r);let n=!1,o=!1;const s={debug:1,default:2,info:2,warning:3,error:4,off:5};let a=s.default,l=null;const c=function(){try{const A=[];if(["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(t){A.push(e)}})),A.length)throw new Error("missing "+A.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(A){return A.message}return null}();var g,u;!function(A){A.DEBUG="DEBUG",A.INFO="INFO",A.WARNING="WARNING",A.ERROR="ERROR",A.OFF="OFF"}(g||(g={})),function(A){A.UNKNOWN_ERROR="UNKNOWN_ERROR",A.NOT_IMPLEMENTED="NOT_IMPLEMENTED",A.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",A.NETWORK_ERROR="NETWORK_ERROR",A.SERVER_ERROR="SERVER_ERROR",A.TIMEOUT="TIMEOUT",A.BUFFER_OVERRUN="BUFFER_OVERRUN",A.NUMERIC_FAULT="NUMERIC_FAULT",A.MISSING_NEW="MISSING_NEW",A.INVALID_ARGUMENT="INVALID_ARGUMENT",A.MISSING_ARGUMENT="MISSING_ARGUMENT",A.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",A.CALL_EXCEPTION="CALL_EXCEPTION",A.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",A.NONCE_EXPIRED="NONCE_EXPIRED",A.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",A.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",A.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(u||(u={}));const h="0123456789abcdef";class E{constructor(A){Object.defineProperty(this,"version",{enumerable:!0,value:A,writable:!1})}_log(A,e){const t=A.toLowerCase();null==s[t]&&this.throwArgumentError("invalid log level name","logLevel",A),a>s[t]||console.log.apply(console,e)}debug(...A){this._log(E.levels.DEBUG,A)}info(...A){this._log(E.levels.INFO,A)}warn(...A){this._log(E.levels.WARNING,A)}makeError(A,e,t){if(o)return this.makeError("censored error",e,{});e||(e=E.errors.UNKNOWN_ERROR),t||(t={});const r=[];Object.keys(t).forEach((A=>{const e=t[A];try{if(e instanceof Uint8Array){let t="";for(let A=0;A<e.length;A++)t+=h[e[A]>>4],t+=h[15&e[A]];r.push(A+"=Uint8Array(0x"+t+")")}else r.push(A+"="+JSON.stringify(e))}catch(e){r.push(A+"="+JSON.stringify(t[A].toString()))}})),r.push(`code=${e}`),r.push(`version=${this.version}`);const i=A;r.length&&(A+=" ("+r.join(", ")+")");const n=new Error(A);return n.reason=i,n.code=e,Object.keys(t).forEach((function(A){n[A]=t[A]})),n}throwError(A,e,t){throw this.makeError(A,e,t)}throwArgumentError(A,e,t){return this.throwError(A,E.errors.INVALID_ARGUMENT,{argument:e,value:t})}assert(A,e,t,r){A||this.throwError(e,t,r)}assertArgument(A,e,t,r){A||this.throwArgumentError(e,t,r)}checkNormalize(A){null==A&&(A="platform missing String.prototype.normalize"),c&&this.throwError("platform missing String.prototype.normalize",E.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:c})}checkSafeUint53(A,e){"number"==typeof A&&(null==e&&(e="value not safe"),(A<0||A>=9007199254740991)&&this.throwError(e,E.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:A}),A%1&&this.throwError(e,E.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:A}))}checkArgumentCount(A,e,t){t=t?": "+t:"",A<e&&this.throwError("missing argument"+t,E.errors.MISSING_ARGUMENT,{count:A,expectedCount:e}),A>e&&this.throwError("too many arguments"+t,E.errors.UNEXPECTED_ARGUMENT,{count:A,expectedCount:e})}checkNew(A,e){A!==Object&&null!=A||this.throwError("missing new",E.errors.MISSING_NEW,{name:e.name})}checkAbstract(A,e){A===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",E.errors.UNSUPPORTED_OPERATION,{name:A.name,operation:"new"}):A!==Object&&null!=A||this.throwError("missing new",E.errors.MISSING_NEW,{name:e.name})}static globalLogger(){return l||(l=new E("logger/5.5.0")),l}static setCensorship(A,e){if(!A&&e&&this.globalLogger().throwError("cannot permanently disable censorship",E.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),n){if(!A)return;this.globalLogger().throwError("error censorship permanent",E.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}o=!!A,n=!!e}static setLogLevel(A){const e=s[A.toLowerCase()];null!=e?a=e:E.globalLogger().warn("invalid log level - "+A)}static from(A){return new E(A)}}E.errors=u,E.levels=g;const B=new E("bytes/5.5.0");function I(A){return A.slice||(A.slice=function(){const e=Array.prototype.slice.call(arguments);return I(new Uint8Array(Array.prototype.slice.apply(A,e)))}),A}function f(A){return"number"==typeof A&&A==A&&A%1==0}function p(A,e){if(e||(e={}),"number"==typeof A){B.checkSafeUint53(A,"invalid arrayify value");const e=[];for(;A;)e.unshift(255&A),A=parseInt(String(A/256));return 0===e.length&&e.push(0),I(new Uint8Array(e))}if(e.allowMissingPrefix&&"string"==typeof A&&"0x"!==A.substring(0,2)&&(A="0x"+A),function(A){return!!A.toHexString}(A)&&(A=A.toHexString()),function(A,e){return!("string"!=typeof A||!A.match(/^0x[0-9A-Fa-f]*$/)||e&&A.length!==2+2*e)}(A)){let t=A.substring(2);t.length%2&&("left"===e.hexPad?t="0x0"+t.substring(2):"right"===e.hexPad?t+="0":B.throwArgumentError("hex data is odd-length","value",A));const r=[];for(let A=0;A<t.length;A+=2)r.push(parseInt(t.substring(A,A+2),16));return I(new Uint8Array(r))}return function(A){if(null==A)return!1;if(A.constructor===Uint8Array)return!0;if("string"==typeof A)return!1;if(!f(A.length)||A.length<0)return!1;for(let e=0;e<A.length;e++){const t=A[e];if(!f(t)||t<0||t>=256)return!1}return!0}(A)?I(new Uint8Array(A)):B.throwArgumentError("invalid arrayify value","value",A)}function d(A){return"0x"+i().keccak_256(p(A))}},78011:(A,e,t)=>{"use strict";t.d(e,{Yd:()=>u});let r=!1,i=!1;const n={debug:1,default:2,info:2,warning:3,error:4,off:5};let o=n.default,s=null;const a=function(){try{const A=[];if(["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(t){A.push(e)}})),A.length)throw new Error("missing "+A.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(A){return A.message}return null}();var l,c;!function(A){A.DEBUG="DEBUG",A.INFO="INFO",A.WARNING="WARNING",A.ERROR="ERROR",A.OFF="OFF"}(l||(l={})),function(A){A.UNKNOWN_ERROR="UNKNOWN_ERROR",A.NOT_IMPLEMENTED="NOT_IMPLEMENTED",A.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",A.NETWORK_ERROR="NETWORK_ERROR",A.SERVER_ERROR="SERVER_ERROR",A.TIMEOUT="TIMEOUT",A.BUFFER_OVERRUN="BUFFER_OVERRUN",A.NUMERIC_FAULT="NUMERIC_FAULT",A.MISSING_NEW="MISSING_NEW",A.INVALID_ARGUMENT="INVALID_ARGUMENT",A.MISSING_ARGUMENT="MISSING_ARGUMENT",A.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",A.CALL_EXCEPTION="CALL_EXCEPTION",A.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",A.NONCE_EXPIRED="NONCE_EXPIRED",A.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",A.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",A.TRANSACTION_REPLACED="TRANSACTION_REPLACED",A.ACTION_REJECTED="ACTION_REJECTED"}(c||(c={}));const g="0123456789abcdef";class u{constructor(A){Object.defineProperty(this,"version",{enumerable:!0,value:A,writable:!1})}_log(A,e){const t=A.toLowerCase();null==n[t]&&this.throwArgumentError("invalid log level name","logLevel",A),o>n[t]||console.log.apply(console,e)}debug(...A){this._log(u.levels.DEBUG,A)}info(...A){this._log(u.levels.INFO,A)}warn(...A){this._log(u.levels.WARNING,A)}makeError(A,e,t){if(i)return this.makeError("censored error",e,{});e||(e=u.errors.UNKNOWN_ERROR),t||(t={});const r=[];Object.keys(t).forEach((A=>{const e=t[A];try{if(e instanceof Uint8Array){let t="";for(let A=0;A<e.length;A++)t+=g[e[A]>>4],t+=g[15&e[A]];r.push(A+"=Uint8Array(0x"+t+")")}else r.push(A+"="+JSON.stringify(e))}catch(e){r.push(A+"="+JSON.stringify(t[A].toString()))}})),r.push(`code=${e}`),r.push(`version=${this.version}`);const n=A;let o="";switch(e){case c.NUMERIC_FAULT:{o="NUMERIC_FAULT";const e=A;switch(e){case"overflow":case"underflow":case"division-by-zero":o+="-"+e;break;case"negative-power":case"negative-width":o+="-unsupported";break;case"unbound-bitwise-result":o+="-unbound-result"}break}case c.CALL_EXCEPTION:case c.INSUFFICIENT_FUNDS:case c.MISSING_NEW:case c.NONCE_EXPIRED:case c.REPLACEMENT_UNDERPRICED:case c.TRANSACTION_REPLACED:case c.UNPREDICTABLE_GAS_LIMIT:o=e}o&&(A+=" [ See: https://links.ethers.org/v5-errors-"+o+" ]"),r.length&&(A+=" ("+r.join(", ")+")");const s=new Error(A);return s.reason=n,s.code=e,Object.keys(t).forEach((function(A){s[A]=t[A]})),s}throwError(A,e,t){throw this.makeError(A,e,t)}throwArgumentError(A,e,t){return this.throwError(A,u.errors.INVALID_ARGUMENT,{argument:e,value:t})}assert(A,e,t,r){A||this.throwError(e,t,r)}assertArgument(A,e,t,r){A||this.throwArgumentError(e,t,r)}checkNormalize(A){null==A&&(A="platform missing String.prototype.normalize"),a&&this.throwError("platform missing String.prototype.normalize",u.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:a})}checkSafeUint53(A,e){"number"==typeof A&&(null==e&&(e="value not safe"),(A<0||A>=9007199254740991)&&this.throwError(e,u.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:A}),A%1&&this.throwError(e,u.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:A}))}checkArgumentCount(A,e,t){t=t?": "+t:"",A<e&&this.throwError("missing argument"+t,u.errors.MISSING_ARGUMENT,{count:A,expectedCount:e}),A>e&&this.throwError("too many arguments"+t,u.errors.UNEXPECTED_ARGUMENT,{count:A,expectedCount:e})}checkNew(A,e){A!==Object&&null!=A||this.throwError("missing new",u.errors.MISSING_NEW,{name:e.name})}checkAbstract(A,e){A===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",u.errors.UNSUPPORTED_OPERATION,{name:A.name,operation:"new"}):A!==Object&&null!=A||this.throwError("missing new",u.errors.MISSING_NEW,{name:e.name})}static globalLogger(){return s||(s=new u("logger/5.7.0")),s}static setCensorship(A,e){if(!A&&e&&this.globalLogger().throwError("cannot permanently disable censorship",u.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),r){if(!A)return;this.globalLogger().throwError("error censorship permanent",u.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}i=!!A,r=!!e}static setLogLevel(A){const e=n[A.toLowerCase()];null!=e?o=e:u.globalLogger().warn("invalid log level - "+A)}static from(A){return new u(A)}}u.errors=c,u.levels=l},80221:(A,e,t)=>{"use strict";t.d(e,{dk:()=>u,uj:()=>o,p$:()=>g,zG:()=>i,tu:()=>n,DC:()=>s});const r=new(t(78011).Yd)("properties/5.7.0");function i(A,e,t){Object.defineProperty(A,e,{enumerable:!0,value:t,writable:!1})}function n(A,e){for(let t=0;t<32;t++){if(A[e])return A[e];if(!A.prototype||"object"!=typeof A.prototype)break;A=Object.getPrototypeOf(A.prototype).constructor}return null}function o(A,e){A&&"object"==typeof A||r.throwArgumentError("invalid object","object",A),Object.keys(A).forEach((t=>{e[t]||r.throwArgumentError("invalid object key - "+t,"transaction:"+t,A)}))}function s(A){const e={};for(const t in A)e[t]=A[t];return e}const a={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function l(A){if(null==A||a[typeof A])return!0;if(Array.isArray(A)||"object"==typeof A){if(!Object.isFrozen(A))return!1;const e=Object.keys(A);for(let t=0;t<e.length;t++){let r=null;try{r=A[e[t]]}catch(A){continue}if(!l(r))return!1}return!0}return r.throwArgumentError("Cannot deepCopy "+typeof A,"object",A)}function c(A){if(l(A))return A;if(Array.isArray(A))return Object.freeze(A.map((A=>g(A))));if("object"==typeof A){const e={};for(const t in A){const r=A[t];void 0!==r&&i(e,t,g(r))}return e}return r.throwArgumentError("Cannot deepCopy "+typeof A,"object",A)}function g(A){return c(A)}class u{constructor(A){for(const e in A)this[e]=g(A[e])}}},48669:(A,e,t)=>{"use strict";t.d(e,{J:()=>u,c:()=>l});var r=t(67640),i=t(78011);const n=new i.Yd("rlp/5.7.0");function o(A){const e=[];for(;A;)e.unshift(255&A),A>>=8;return e}function s(A,e,t){let r=0;for(let i=0;i<t;i++)r=256*r+A[e+i];return r}function a(A){if(Array.isArray(A)){let e=[];if(A.forEach((function(A){e=e.concat(a(A))})),e.length<=55)return e.unshift(192+e.length),e;const t=o(e.length);return t.unshift(247+t.length),t.concat(e)}(0,r.isBytesLike)(A)||n.throwArgumentError("RLP object must be BytesLike","object",A);const e=Array.prototype.slice.call((0,r.arrayify)(A));if(1===e.length&&e[0]<=127)return e;if(e.length<=55)return e.unshift(128+e.length),e;const t=o(e.length);return t.unshift(183+t.length),t.concat(e)}function l(A){return(0,r.hexlify)(a(A))}function c(A,e,t,r){const o=[];for(;t<e+1+r;){const s=g(A,t);o.push(s.result),(t+=s.consumed)>e+1+r&&n.throwError("child data too short",i.Yd.errors.BUFFER_OVERRUN,{})}return{consumed:1+r,result:o}}function g(A,e){if(0===A.length&&n.throwError("data too short",i.Yd.errors.BUFFER_OVERRUN,{}),A[e]>=248){const t=A[e]-247;e+1+t>A.length&&n.throwError("data short segment too short",i.Yd.errors.BUFFER_OVERRUN,{});const r=s(A,e+1,t);return e+1+t+r>A.length&&n.throwError("data long segment too short",i.Yd.errors.BUFFER_OVERRUN,{}),c(A,e,e+1+t,t+r)}if(A[e]>=192){const t=A[e]-192;return e+1+t>A.length&&n.throwError("data array too short",i.Yd.errors.BUFFER_OVERRUN,{}),c(A,e,e+1,t)}if(A[e]>=184){const t=A[e]-183;e+1+t>A.length&&n.throwError("data array too short",i.Yd.errors.BUFFER_OVERRUN,{});const o=s(A,e+1,t);return e+1+t+o>A.length&&n.throwError("data array too short",i.Yd.errors.BUFFER_OVERRUN,{}),{consumed:1+t+o,result:(0,r.hexlify)(A.slice(e+1+t,e+1+t+o))}}if(A[e]>=128){const t=A[e]-128;return e+1+t>A.length&&n.throwError("data too short",i.Yd.errors.BUFFER_OVERRUN,{}),{consumed:1+t,result:(0,r.hexlify)(A.slice(e+1,e+1+t))}}return{consumed:1,result:(0,r.hexlify)(A[e])}}function u(A){const e=(0,r.arrayify)(A),t=g(e,0);return t.consumed!==e.length&&n.throwArgumentError("invalid rlp data","data",A),t.result}},17459:(A,e,t)=>{"use strict";t.d(e,{VW:()=>q,LO:()=>K});var r=t(8434),i=t.n(r),n=t(34485),o=t.n(n);function s(A,e,t){return t={path:e,exports:{},require:function(A,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&t.path)}},A(t,t.exports),t.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self&&self;var a=l;function l(A,e){if(!A)throw new Error(e||"Assertion failed")}l.equal=function(A,e,t){if(A!=e)throw new Error(t||"Assertion failed: "+A+" != "+e)};var c=s((function(A,e){var t=e;function r(A){return 1===A.length?"0"+A:A}function i(A){for(var e="",t=0;t<A.length;t++)e+=r(A[t].toString(16));return e}t.toArray=function(A,e){if(Array.isArray(A))return A.slice();if(!A)return[];var t=[];if("string"!=typeof A){for(var r=0;r<A.length;r++)t[r]=0|A[r];return t}if("hex"===e)for((A=A.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(A="0"+A),r=0;r<A.length;r+=2)t.push(parseInt(A[r]+A[r+1],16));else for(r=0;r<A.length;r++){var i=A.charCodeAt(r),n=i>>8,o=255&i;n?t.push(n,o):t.push(o)}return t},t.zero2=r,t.toHex=i,t.encode=function(A,e){return"hex"===e?i(A):A}})),g=s((function(A,e){var t=e;t.assert=a,t.toArray=c.toArray,t.zero2=c.zero2,t.toHex=c.toHex,t.encode=c.encode,t.getNAF=function(A,e,t){var r=new Array(Math.max(A.bitLength(),t)+1);r.fill(0);for(var i=1<<e+1,n=A.clone(),o=0;o<r.length;o++){var s,a=n.andln(i-1);n.isOdd()?(s=a>(i>>1)-1?(i>>1)-a:a,n.isubn(s)):s=0,r[o]=s,n.iushrn(1)}return r},t.getJSF=function(A,e){var t=[[],[]];A=A.clone(),e=e.clone();for(var r,i=0,n=0;A.cmpn(-i)>0||e.cmpn(-n)>0;){var o,s,a=A.andln(3)+i&3,l=e.andln(3)+n&3;3===a&&(a=-1),3===l&&(l=-1),o=0==(1&a)?0:3!=(r=A.andln(7)+i&7)&&5!==r||2!==l?a:-a,t[0].push(o),s=0==(1&l)?0:3!=(r=e.andln(7)+n&7)&&5!==r||2!==a?l:-l,t[1].push(s),2*i===o+1&&(i=1-i),2*n===s+1&&(n=1-n),A.iushrn(1),e.iushrn(1)}return t},t.cachedProperty=function(A,e,t){var r="_"+e;A.prototype[e]=function(){return void 0!==this[r]?this[r]:this[r]=t.call(this)}},t.parseBytes=function(A){return"string"==typeof A?t.toArray(A,"hex"):A},t.intFromLE=function(A){return new(i())(A,"hex","le")}})),u=g.getNAF,h=g.getJSF,E=g.assert;function B(A,e){this.type=A,this.p=new(i())(e.p,16),this.red=e.prime?i().red(e.prime):i().mont(this.p),this.zero=new(i())(0).toRed(this.red),this.one=new(i())(1).toRed(this.red),this.two=new(i())(2).toRed(this.red),this.n=e.n&&new(i())(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var t=this.n&&this.p.div(this.n);!t||t.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var I=B;function f(A,e){this.curve=A,this.type=e,this.precomputed=null}B.prototype.point=function(){throw new Error("Not implemented")},B.prototype.validate=function(){throw new Error("Not implemented")},B.prototype._fixedNafMul=function(A,e){E(A.precomputed);var t=A._getDoubles(),r=u(e,1,this._bitLength),i=(1<<t.step+1)-(t.step%2==0?2:1);i/=3;var n,o,s=[];for(n=0;n<r.length;n+=t.step){o=0;for(var a=n+t.step-1;a>=n;a--)o=(o<<1)+r[a];s.push(o)}for(var l=this.jpoint(null,null,null),c=this.jpoint(null,null,null),g=i;g>0;g--){for(n=0;n<s.length;n++)(o=s[n])===g?c=c.mixedAdd(t.points[n]):o===-g&&(c=c.mixedAdd(t.points[n].neg()));l=l.add(c)}return l.toP()},B.prototype._wnafMul=function(A,e){var t=4,r=A._getNAFPoints(t);t=r.wnd;for(var i=r.points,n=u(e,t,this._bitLength),o=this.jpoint(null,null,null),s=n.length-1;s>=0;s--){for(var a=0;s>=0&&0===n[s];s--)a++;if(s>=0&&a++,o=o.dblp(a),s<0)break;var l=n[s];E(0!==l),o="affine"===A.type?l>0?o.mixedAdd(i[l-1>>1]):o.mixedAdd(i[-l-1>>1].neg()):l>0?o.add(i[l-1>>1]):o.add(i[-l-1>>1].neg())}return"affine"===A.type?o.toP():o},B.prototype._wnafMulAdd=function(A,e,t,r,i){var n,o,s,a=this._wnafT1,l=this._wnafT2,c=this._wnafT3,g=0;for(n=0;n<r;n++){var E=(s=e[n])._getNAFPoints(A);a[n]=E.wnd,l[n]=E.points}for(n=r-1;n>=1;n-=2){var B=n-1,I=n;if(1===a[B]&&1===a[I]){var f=[e[B],null,null,e[I]];0===e[B].y.cmp(e[I].y)?(f[1]=e[B].add(e[I]),f[2]=e[B].toJ().mixedAdd(e[I].neg())):0===e[B].y.cmp(e[I].y.redNeg())?(f[1]=e[B].toJ().mixedAdd(e[I]),f[2]=e[B].add(e[I].neg())):(f[1]=e[B].toJ().mixedAdd(e[I]),f[2]=e[B].toJ().mixedAdd(e[I].neg()));var p=[-3,-1,-5,-7,0,7,5,1,3],d=h(t[B],t[I]);for(g=Math.max(d[0].length,g),c[B]=new Array(g),c[I]=new Array(g),o=0;o<g;o++){var w=0|d[0][o],m=0|d[1][o];c[B][o]=p[3*(w+1)+(m+1)],c[I][o]=0,l[B]=f}}else c[B]=u(t[B],a[B],this._bitLength),c[I]=u(t[I],a[I],this._bitLength),g=Math.max(c[B].length,g),g=Math.max(c[I].length,g)}var C=this.jpoint(null,null,null),Q=this._wnafT4;for(n=g;n>=0;n--){for(var R=0;n>=0;){var y=!0;for(o=0;o<r;o++)Q[o]=0|c[o][n],0!==Q[o]&&(y=!1);if(!y)break;R++,n--}if(n>=0&&R++,C=C.dblp(R),n<0)break;for(o=0;o<r;o++){var U=Q[o];0!==U&&(U>0?s=l[o][U-1>>1]:U<0&&(s=l[o][-U-1>>1].neg()),C="affine"===s.type?C.mixedAdd(s):C.add(s))}}for(n=0;n<r;n++)l[n]=null;return i?C:C.toP()},B.BasePoint=f,f.prototype.eq=function(){throw new Error("Not implemented")},f.prototype.validate=function(){return this.curve.validate(this)},B.prototype.decodePoint=function(A,e){A=g.toArray(A,e);var t=this.p.byteLength();if((4===A[0]||6===A[0]||7===A[0])&&A.length-1==2*t)return 6===A[0]?E(A[A.length-1]%2==0):7===A[0]&&E(A[A.length-1]%2==1),this.point(A.slice(1,1+t),A.slice(1+t,1+2*t));if((2===A[0]||3===A[0])&&A.length-1===t)return this.pointFromX(A.slice(1,1+t),3===A[0]);throw new Error("Unknown point format")},f.prototype.encodeCompressed=function(A){return this.encode(A,!0)},f.prototype._encode=function(A){var e=this.curve.p.byteLength(),t=this.getX().toArray("be",e);return A?[this.getY().isEven()?2:3].concat(t):[4].concat(t,this.getY().toArray("be",e))},f.prototype.encode=function(A,e){return g.encode(this._encode(e),A)},f.prototype.precompute=function(A){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,A),e.beta=this._getBeta(),this.precomputed=e,this},f.prototype._hasDoubles=function(A){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((A.bitLength()+1)/e.step)},f.prototype._getDoubles=function(A,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var t=[this],r=this,i=0;i<e;i+=A){for(var n=0;n<A;n++)r=r.dbl();t.push(r)}return{step:A,points:t}},f.prototype._getNAFPoints=function(A){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],t=(1<<A)-1,r=1===t?null:this.dbl(),i=1;i<t;i++)e[i]=e[i-1].add(r);return{wnd:A,points:e}},f.prototype._getBeta=function(){return null},f.prototype.dblp=function(A){for(var e=this,t=0;t<A;t++)e=e.dbl();return e};var p=s((function(A){"function"==typeof Object.create?A.exports=function(A,e){e&&(A.super_=e,A.prototype=Object.create(e.prototype,{constructor:{value:A,enumerable:!1,writable:!0,configurable:!0}}))}:A.exports=function(A,e){if(e){A.super_=e;var t=function(){};t.prototype=e.prototype,A.prototype=new t,A.prototype.constructor=A}}})),d=g.assert;function w(A){I.call(this,"short",A),this.a=new(i())(A.a,16).toRed(this.red),this.b=new(i())(A.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(A),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}p(w,I);var m=w;function C(A,e,t,r){I.BasePoint.call(this,A,"affine"),null===e&&null===t?(this.x=null,this.y=null,this.inf=!0):(this.x=new(i())(e,16),this.y=new(i())(t,16),r&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function Q(A,e,t,r){I.BasePoint.call(this,A,"jacobian"),null===e&&null===t&&null===r?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(i())(0)):(this.x=new(i())(e,16),this.y=new(i())(t,16),this.z=new(i())(r,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}w.prototype._getEndomorphism=function(A){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,t;if(A.beta)e=new(i())(A.beta,16).toRed(this.red);else{var r=this._getEndoRoots(this.p);e=(e=r[0].cmp(r[1])<0?r[0]:r[1]).toRed(this.red)}if(A.lambda)t=new(i())(A.lambda,16);else{var n=this._getEndoRoots(this.n);0===this.g.mul(n[0]).x.cmp(this.g.x.redMul(e))?t=n[0]:(t=n[1],d(0===this.g.mul(t).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:t,basis:A.basis?A.basis.map((function(A){return{a:new(i())(A.a,16),b:new(i())(A.b,16)}})):this._getEndoBasis(t)}}},w.prototype._getEndoRoots=function(A){var e=A===this.p?this.red:i().mont(A),t=new(i())(2).toRed(e).redInvm(),r=t.redNeg(),n=new(i())(3).toRed(e).redNeg().redSqrt().redMul(t);return[r.redAdd(n).fromRed(),r.redSub(n).fromRed()]},w.prototype._getEndoBasis=function(A){for(var e,t,r,n,o,s,a,l,c,g=this.n.ushrn(Math.floor(this.n.bitLength()/2)),u=A,h=this.n.clone(),E=new(i())(1),B=new(i())(0),I=new(i())(0),f=new(i())(1),p=0;0!==u.cmpn(0);){var d=h.div(u);l=h.sub(d.mul(u)),c=I.sub(d.mul(E));var w=f.sub(d.mul(B));if(!r&&l.cmp(g)<0)e=a.neg(),t=E,r=l.neg(),n=c;else if(r&&2==++p)break;a=l,h=u,u=l,I=E,E=c,f=B,B=w}o=l.neg(),s=c;var m=r.sqr().add(n.sqr());return o.sqr().add(s.sqr()).cmp(m)>=0&&(o=e,s=t),r.negative&&(r=r.neg(),n=n.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:r,b:n},{a:o,b:s}]},w.prototype._endoSplit=function(A){var e=this.endo.basis,t=e[0],r=e[1],i=r.b.mul(A).divRound(this.n),n=t.b.neg().mul(A).divRound(this.n),o=i.mul(t.a),s=n.mul(r.a),a=i.mul(t.b),l=n.mul(r.b);return{k1:A.sub(o).sub(s),k2:a.add(l).neg()}},w.prototype.pointFromX=function(A,e){(A=new(i())(A,16)).red||(A=A.toRed(this.red));var t=A.redSqr().redMul(A).redIAdd(A.redMul(this.a)).redIAdd(this.b),r=t.redSqrt();if(0!==r.redSqr().redSub(t).cmp(this.zero))throw new Error("invalid point");var n=r.fromRed().isOdd();return(e&&!n||!e&&n)&&(r=r.redNeg()),this.point(A,r)},w.prototype.validate=function(A){if(A.inf)return!0;var e=A.x,t=A.y,r=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(r).redIAdd(this.b);return 0===t.redSqr().redISub(i).cmpn(0)},w.prototype._endoWnafMulAdd=function(A,e,t){for(var r=this._endoWnafT1,i=this._endoWnafT2,n=0;n<A.length;n++){var o=this._endoSplit(e[n]),s=A[n],a=s._getBeta();o.k1.negative&&(o.k1.ineg(),s=s.neg(!0)),o.k2.negative&&(o.k2.ineg(),a=a.neg(!0)),r[2*n]=s,r[2*n+1]=a,i[2*n]=o.k1,i[2*n+1]=o.k2}for(var l=this._wnafMulAdd(1,r,i,2*n,t),c=0;c<2*n;c++)r[c]=null,i[c]=null;return l},p(C,I.BasePoint),w.prototype.point=function(A,e,t){return new C(this,A,e,t)},w.prototype.pointFromJSON=function(A,e){return C.fromJSON(this,A,e)},C.prototype._getBeta=function(){if(this.curve.endo){var A=this.precomputed;if(A&&A.beta)return A.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(A){var t=this.curve,r=function(A){return t.point(A.x.redMul(t.endo.beta),A.y)};A.beta=e,e.precomputed={beta:null,naf:A.naf&&{wnd:A.naf.wnd,points:A.naf.points.map(r)},doubles:A.doubles&&{step:A.doubles.step,points:A.doubles.points.map(r)}}}return e}},C.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},C.fromJSON=function(A,e,t){"string"==typeof e&&(e=JSON.parse(e));var r=A.point(e[0],e[1],t);if(!e[2])return r;function i(e){return A.point(e[0],e[1],t)}var n=e[2];return r.precomputed={beta:null,doubles:n.doubles&&{step:n.doubles.step,points:[r].concat(n.doubles.points.map(i))},naf:n.naf&&{wnd:n.naf.wnd,points:[r].concat(n.naf.points.map(i))}},r},C.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},C.prototype.isInfinity=function(){return this.inf},C.prototype.add=function(A){if(this.inf)return A;if(A.inf)return this;if(this.eq(A))return this.dbl();if(this.neg().eq(A))return this.curve.point(null,null);if(0===this.x.cmp(A.x))return this.curve.point(null,null);var e=this.y.redSub(A.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(A.x).redInvm()));var t=e.redSqr().redISub(this.x).redISub(A.x),r=e.redMul(this.x.redSub(t)).redISub(this.y);return this.curve.point(t,r)},C.prototype.dbl=function(){if(this.inf)return this;var A=this.y.redAdd(this.y);if(0===A.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,t=this.x.redSqr(),r=A.redInvm(),i=t.redAdd(t).redIAdd(t).redIAdd(e).redMul(r),n=i.redSqr().redISub(this.x.redAdd(this.x)),o=i.redMul(this.x.redSub(n)).redISub(this.y);return this.curve.point(n,o)},C.prototype.getX=function(){return this.x.fromRed()},C.prototype.getY=function(){return this.y.fromRed()},C.prototype.mul=function(A){return A=new(i())(A,16),this.isInfinity()?this:this._hasDoubles(A)?this.curve._fixedNafMul(this,A):this.curve.endo?this.curve._endoWnafMulAdd([this],[A]):this.curve._wnafMul(this,A)},C.prototype.mulAdd=function(A,e,t){var r=[this,e],i=[A,t];return this.curve.endo?this.curve._endoWnafMulAdd(r,i):this.curve._wnafMulAdd(1,r,i,2)},C.prototype.jmulAdd=function(A,e,t){var r=[this,e],i=[A,t];return this.curve.endo?this.curve._endoWnafMulAdd(r,i,!0):this.curve._wnafMulAdd(1,r,i,2,!0)},C.prototype.eq=function(A){return this===A||this.inf===A.inf&&(this.inf||0===this.x.cmp(A.x)&&0===this.y.cmp(A.y))},C.prototype.neg=function(A){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(A&&this.precomputed){var t=this.precomputed,r=function(A){return A.neg()};e.precomputed={naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(r)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(r)}}}return e},C.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},p(Q,I.BasePoint),w.prototype.jpoint=function(A,e,t){return new Q(this,A,e,t)},Q.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var A=this.z.redInvm(),e=A.redSqr(),t=this.x.redMul(e),r=this.y.redMul(e).redMul(A);return this.curve.point(t,r)},Q.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},Q.prototype.add=function(A){if(this.isInfinity())return A;if(A.isInfinity())return this;var e=A.z.redSqr(),t=this.z.redSqr(),r=this.x.redMul(e),i=A.x.redMul(t),n=this.y.redMul(e.redMul(A.z)),o=A.y.redMul(t.redMul(this.z)),s=r.redSub(i),a=n.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var l=s.redSqr(),c=l.redMul(s),g=r.redMul(l),u=a.redSqr().redIAdd(c).redISub(g).redISub(g),h=a.redMul(g.redISub(u)).redISub(n.redMul(c)),E=this.z.redMul(A.z).redMul(s);return this.curve.jpoint(u,h,E)},Q.prototype.mixedAdd=function(A){if(this.isInfinity())return A.toJ();if(A.isInfinity())return this;var e=this.z.redSqr(),t=this.x,r=A.x.redMul(e),i=this.y,n=A.y.redMul(e).redMul(this.z),o=t.redSub(r),s=i.redSub(n);if(0===o.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var a=o.redSqr(),l=a.redMul(o),c=t.redMul(a),g=s.redSqr().redIAdd(l).redISub(c).redISub(c),u=s.redMul(c.redISub(g)).redISub(i.redMul(l)),h=this.z.redMul(o);return this.curve.jpoint(g,u,h)},Q.prototype.dblp=function(A){if(0===A)return this;if(this.isInfinity())return this;if(!A)return this.dbl();var e;if(this.curve.zeroA||this.curve.threeA){var t=this;for(e=0;e<A;e++)t=t.dbl();return t}var r=this.curve.a,i=this.curve.tinv,n=this.x,o=this.y,s=this.z,a=s.redSqr().redSqr(),l=o.redAdd(o);for(e=0;e<A;e++){var c=n.redSqr(),g=l.redSqr(),u=g.redSqr(),h=c.redAdd(c).redIAdd(c).redIAdd(r.redMul(a)),E=n.redMul(g),B=h.redSqr().redISub(E.redAdd(E)),I=E.redISub(B),f=h.redMul(I);f=f.redIAdd(f).redISub(u);var p=l.redMul(s);e+1<A&&(a=a.redMul(u)),n=B,s=p,l=f}return this.curve.jpoint(n,l.redMul(i),s)},Q.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},Q.prototype._zeroDbl=function(){var A,e,t;if(this.zOne){var r=this.x.redSqr(),i=this.y.redSqr(),n=i.redSqr(),o=this.x.redAdd(i).redSqr().redISub(r).redISub(n);o=o.redIAdd(o);var s=r.redAdd(r).redIAdd(r),a=s.redSqr().redISub(o).redISub(o),l=n.redIAdd(n);l=(l=l.redIAdd(l)).redIAdd(l),A=a,e=s.redMul(o.redISub(a)).redISub(l),t=this.y.redAdd(this.y)}else{var c=this.x.redSqr(),g=this.y.redSqr(),u=g.redSqr(),h=this.x.redAdd(g).redSqr().redISub(c).redISub(u);h=h.redIAdd(h);var E=c.redAdd(c).redIAdd(c),B=E.redSqr(),I=u.redIAdd(u);I=(I=I.redIAdd(I)).redIAdd(I),A=B.redISub(h).redISub(h),e=E.redMul(h.redISub(A)).redISub(I),t=(t=this.y.redMul(this.z)).redIAdd(t)}return this.curve.jpoint(A,e,t)},Q.prototype._threeDbl=function(){var A,e,t;if(this.zOne){var r=this.x.redSqr(),i=this.y.redSqr(),n=i.redSqr(),o=this.x.redAdd(i).redSqr().redISub(r).redISub(n);o=o.redIAdd(o);var s=r.redAdd(r).redIAdd(r).redIAdd(this.curve.a),a=s.redSqr().redISub(o).redISub(o);A=a;var l=n.redIAdd(n);l=(l=l.redIAdd(l)).redIAdd(l),e=s.redMul(o.redISub(a)).redISub(l),t=this.y.redAdd(this.y)}else{var c=this.z.redSqr(),g=this.y.redSqr(),u=this.x.redMul(g),h=this.x.redSub(c).redMul(this.x.redAdd(c));h=h.redAdd(h).redIAdd(h);var E=u.redIAdd(u),B=(E=E.redIAdd(E)).redAdd(E);A=h.redSqr().redISub(B),t=this.y.redAdd(this.z).redSqr().redISub(g).redISub(c);var I=g.redSqr();I=(I=(I=I.redIAdd(I)).redIAdd(I)).redIAdd(I),e=h.redMul(E.redISub(A)).redISub(I)}return this.curve.jpoint(A,e,t)},Q.prototype._dbl=function(){var A=this.curve.a,e=this.x,t=this.y,r=this.z,i=r.redSqr().redSqr(),n=e.redSqr(),o=t.redSqr(),s=n.redAdd(n).redIAdd(n).redIAdd(A.redMul(i)),a=e.redAdd(e),l=(a=a.redIAdd(a)).redMul(o),c=s.redSqr().redISub(l.redAdd(l)),g=l.redISub(c),u=o.redSqr();u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var h=s.redMul(g).redISub(u),E=t.redAdd(t).redMul(r);return this.curve.jpoint(c,h,E)},Q.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var A=this.x.redSqr(),e=this.y.redSqr(),t=this.z.redSqr(),r=e.redSqr(),i=A.redAdd(A).redIAdd(A),n=i.redSqr(),o=this.x.redAdd(e).redSqr().redISub(A).redISub(r),s=(o=(o=(o=o.redIAdd(o)).redAdd(o).redIAdd(o)).redISub(n)).redSqr(),a=r.redIAdd(r);a=(a=(a=a.redIAdd(a)).redIAdd(a)).redIAdd(a);var l=i.redIAdd(o).redSqr().redISub(n).redISub(s).redISub(a),c=e.redMul(l);c=(c=c.redIAdd(c)).redIAdd(c);var g=this.x.redMul(s).redISub(c);g=(g=g.redIAdd(g)).redIAdd(g);var u=this.y.redMul(l.redMul(a.redISub(l)).redISub(o.redMul(s)));u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var h=this.z.redAdd(o).redSqr().redISub(t).redISub(s);return this.curve.jpoint(g,u,h)},Q.prototype.mul=function(A,e){return A=new(i())(A,e),this.curve._wnafMul(this,A)},Q.prototype.eq=function(A){if("affine"===A.type)return this.eq(A.toJ());if(this===A)return!0;var e=this.z.redSqr(),t=A.z.redSqr();if(0!==this.x.redMul(t).redISub(A.x.redMul(e)).cmpn(0))return!1;var r=e.redMul(this.z),i=t.redMul(A.z);return 0===this.y.redMul(i).redISub(A.y.redMul(r)).cmpn(0)},Q.prototype.eqXToP=function(A){var e=this.z.redSqr(),t=A.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(t))return!0;for(var r=A.clone(),i=this.curve.redN.redMul(e);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(i),0===this.x.cmp(t))return!0}},Q.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},Q.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var R=s((function(A,e){var t=e;t.base=I,t.short=m,t.mont=null,t.edwards=null})),y=s((function(A,e){var t,r=e,i=g.assert;function n(A){"short"===A.type?this.curve=new R.short(A):"edwards"===A.type?this.curve=new R.edwards(A):this.curve=new R.mont(A),this.g=this.curve.g,this.n=this.curve.n,this.hash=A.hash,i(this.g.validate(),"Invalid curve"),i(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function s(A,e){Object.defineProperty(r,A,{configurable:!0,enumerable:!0,get:function(){var t=new n(e);return Object.defineProperty(r,A,{configurable:!0,enumerable:!0,value:t}),t}})}r.PresetCurve=n,s("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),s("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),s("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),s("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),s("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),s("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o().sha256,gRed:!1,g:["9"]}),s("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{t=null.crash()}catch(A){t=void 0}s("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",t]})}));function U(A){if(!(this instanceof U))return new U(A);this.hash=A.hash,this.predResist=!!A.predResist,this.outLen=this.hash.outSize,this.minEntropy=A.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=c.toArray(A.entropy,A.entropyEnc||"hex"),t=c.toArray(A.nonce,A.nonceEnc||"hex"),r=c.toArray(A.pers,A.persEnc||"hex");a(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,t,r)}var v=U;U.prototype._init=function(A,e,t){var r=A.concat(e).concat(t);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(r),this._reseed=1,this.reseedInterval=281474976710656},U.prototype._hmac=function(){return new(o().hmac)(this.hash,this.K)},U.prototype._update=function(A){var e=this._hmac().update(this.V).update([0]);A&&(e=e.update(A)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),A&&(this.K=this._hmac().update(this.V).update([1]).update(A).digest(),this.V=this._hmac().update(this.V).digest())},U.prototype.reseed=function(A,e,t,r){"string"!=typeof e&&(r=t,t=e,e=null),A=c.toArray(A,e),t=c.toArray(t,r),a(A.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(A.concat(t||[])),this._reseed=1},U.prototype.generate=function(A,e,t,r){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(r=t,t=e,e=null),t&&(t=c.toArray(t,r||"hex"),this._update(t));for(var i=[];i.length<A;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var n=i.slice(0,A);return this._update(t),this._reseed++,c.encode(n,e)};var M=g.assert;function T(A,e){this.ec=A,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}var b=T;T.fromPublic=function(A,e,t){return e instanceof T?e:new T(A,{pub:e,pubEnc:t})},T.fromPrivate=function(A,e,t){return e instanceof T?e:new T(A,{priv:e,privEnc:t})},T.prototype.validate=function(){var A=this.getPublic();return A.isInfinity()?{result:!1,reason:"Invalid public key"}:A.validate()?A.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},T.prototype.getPublic=function(A,e){return"string"==typeof A&&(e=A,A=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,A):this.pub},T.prototype.getPrivate=function(A){return"hex"===A?this.priv.toString(16,2):this.priv},T.prototype._importPrivate=function(A,e){this.priv=new(i())(A,e||16),this.priv=this.priv.umod(this.ec.curve.n)},T.prototype._importPublic=function(A,e){if(A.x||A.y)return"mont"===this.ec.curve.type?M(A.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||M(A.x&&A.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(A.x,A.y));this.pub=this.ec.curve.decodePoint(A,e)},T.prototype.derive=function(A){return A.validate()||M(A.validate(),"public point not validated"),A.mul(this.priv).getX()},T.prototype.sign=function(A,e,t){return this.ec.sign(A,this,e,t)},T.prototype.verify=function(A,e){return this.ec.verify(A,e,this)},T.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var S=g.assert;function F(A,e){if(A instanceof F)return A;this._importDER(A,e)||(S(A.r&&A.s,"Signature without r or s"),this.r=new(i())(A.r,16),this.s=new(i())(A.s,16),void 0===A.recoveryParam?this.recoveryParam=null:this.recoveryParam=A.recoveryParam)}var D=F;function N(){this.place=0}function G(A,e){var t=A[e.place++];if(!(128&t))return t;var r=15&t;if(0===r||r>4)return!1;for(var i=0,n=0,o=e.place;n<r;n++,o++)i<<=8,i|=A[o],i>>>=0;return!(i<=127)&&(e.place=o,i)}function V(A){for(var e=0,t=A.length-1;!A[e]&&!(128&A[e+1])&&e<t;)e++;return 0===e?A:A.slice(e)}function k(A,e){if(e<128)A.push(e);else{var t=1+(Math.log(e)/Math.LN2>>>3);for(A.push(128|t);--t;)A.push(e>>>(t<<3)&255);A.push(e)}}F.prototype._importDER=function(A,e){A=g.toArray(A,e);var t=new N;if(48!==A[t.place++])return!1;var r=G(A,t);if(!1===r)return!1;if(r+t.place!==A.length)return!1;if(2!==A[t.place++])return!1;var n=G(A,t);if(!1===n)return!1;var o=A.slice(t.place,n+t.place);if(t.place+=n,2!==A[t.place++])return!1;var s=G(A,t);if(!1===s)return!1;if(A.length!==s+t.place)return!1;var a=A.slice(t.place,s+t.place);if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}if(0===a[0]){if(!(128&a[1]))return!1;a=a.slice(1)}return this.r=new(i())(o),this.s=new(i())(a),this.recoveryParam=null,!0},F.prototype.toDER=function(A){var e=this.r.toArray(),t=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&t[0]&&(t=[0].concat(t)),e=V(e),t=V(t);!(t[0]||128&t[1]);)t=t.slice(1);var r=[2];k(r,e.length),(r=r.concat(e)).push(2),k(r,t.length);var i=r.concat(t),n=[48];return k(n,i.length),n=n.concat(i),g.encode(n,A)};var O=function(){throw new Error("unsupported")},x=g.assert;function Z(A){if(!(this instanceof Z))return new Z(A);"string"==typeof A&&(x(Object.prototype.hasOwnProperty.call(y,A),"Unknown curve "+A),A=y[A]),A instanceof y.PresetCurve&&(A={curve:A}),this.curve=A.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=A.curve.g,this.g.precompute(A.curve.n.bitLength()+1),this.hash=A.hash||A.curve.hash}var J=Z;Z.prototype.keyPair=function(A){return new b(this,A)},Z.prototype.keyFromPrivate=function(A,e){return b.fromPrivate(this,A,e)},Z.prototype.keyFromPublic=function(A,e){return b.fromPublic(this,A,e)},Z.prototype.genKeyPair=function(A){A||(A={});for(var e=new v({hash:this.hash,pers:A.pers,persEnc:A.persEnc||"utf8",entropy:A.entropy||O(this.hash.hmacStrength),entropyEnc:A.entropy&&A.entropyEnc||"utf8",nonce:this.n.toArray()}),t=this.n.byteLength(),r=this.n.sub(new(i())(2));;){var n=new(i())(e.generate(t));if(!(n.cmp(r)>0))return n.iaddn(1),this.keyFromPrivate(n)}},Z.prototype._truncateToN=function(A,e){var t=8*A.byteLength()-this.n.bitLength();return t>0&&(A=A.ushrn(t)),!e&&A.cmp(this.n)>=0?A.sub(this.n):A},Z.prototype.sign=function(A,e,t,r){"object"==typeof t&&(r=t,t=null),r||(r={}),e=this.keyFromPrivate(e,t),A=this._truncateToN(new(i())(A,16));for(var n=this.n.byteLength(),o=e.getPrivate().toArray("be",n),s=A.toArray("be",n),a=new v({hash:this.hash,entropy:o,nonce:s,pers:r.pers,persEnc:r.persEnc||"utf8"}),l=this.n.sub(new(i())(1)),c=0;;c++){var g=r.k?r.k(c):new(i())(a.generate(this.n.byteLength()));if(!((g=this._truncateToN(g,!0)).cmpn(1)<=0||g.cmp(l)>=0)){var u=this.g.mul(g);if(!u.isInfinity()){var h=u.getX(),E=h.umod(this.n);if(0!==E.cmpn(0)){var B=g.invm(this.n).mul(E.mul(e.getPrivate()).iadd(A));if(0!==(B=B.umod(this.n)).cmpn(0)){var I=(u.getY().isOdd()?1:0)|(0!==h.cmp(E)?2:0);return r.canonical&&B.cmp(this.nh)>0&&(B=this.n.sub(B),I^=1),new D({r:E,s:B,recoveryParam:I})}}}}}},Z.prototype.verify=function(A,e,t,r){A=this._truncateToN(new(i())(A,16)),t=this.keyFromPublic(t,r);var n=(e=new D(e,"hex")).r,o=e.s;if(n.cmpn(1)<0||n.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,a=o.invm(this.n),l=a.mul(A).umod(this.n),c=a.mul(n).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(l,t.getPublic(),c)).isInfinity()&&s.eqXToP(n):!(s=this.g.mulAdd(l,t.getPublic(),c)).isInfinity()&&0===s.getX().umod(this.n).cmp(n)},Z.prototype.recoverPubKey=function(A,e,t,r){x((3&t)===t,"The recovery param is more than two bits"),e=new D(e,r);var n=this.n,o=new(i())(A),s=e.r,a=e.s,l=1&t,c=t>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&c)throw new Error("Unable to find sencond key candinate");s=c?this.curve.pointFromX(s.add(this.curve.n),l):this.curve.pointFromX(s,l);var g=e.r.invm(n),u=n.sub(o).mul(g).umod(n),h=a.mul(g).umod(n);return this.g.mulAdd(u,s,h)},Z.prototype.getKeyRecoveryParam=function(A,e,t,r){if(null!==(e=new D(e,r)).recoveryParam)return e.recoveryParam;for(var i=0;i<4;i++){var n;try{n=this.recoverPubKey(A,e,i)}catch(A){continue}if(n.eq(t))return i}throw new Error("Unable to find valid recovery factor")};var P=s((function(A,e){var t=e;t.version="6.5.4",t.utils=g,t.rand=function(){throw new Error("unsupported")},t.curve=R,t.curves=y,t.ec=J,t.eddsa=null})).ec,Y=t(67640),H=t(80221);const L=new(t(78011).Yd)("signing-key/5.7.0");let j=null;function W(){return j||(j=new P("secp256k1")),j}class z{constructor(A){(0,H.zG)(this,"curve","secp256k1"),(0,H.zG)(this,"privateKey",(0,Y.hexlify)(A)),32!==(0,Y.hexDataLength)(this.privateKey)&&L.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const e=W().keyFromPrivate((0,Y.arrayify)(this.privateKey));(0,H.zG)(this,"publicKey","0x"+e.getPublic(!1,"hex")),(0,H.zG)(this,"compressedPublicKey","0x"+e.getPublic(!0,"hex")),(0,H.zG)(this,"_isSigningKey",!0)}_addPoint(A){const e=W().keyFromPublic((0,Y.arrayify)(this.publicKey)),t=W().keyFromPublic((0,Y.arrayify)(A));return"0x"+e.pub.add(t.pub).encodeCompressed("hex")}signDigest(A){const e=W().keyFromPrivate((0,Y.arrayify)(this.privateKey)),t=(0,Y.arrayify)(A);32!==t.length&&L.throwArgumentError("bad digest length","digest",A);const r=e.sign(t,{canonical:!0});return(0,Y.splitSignature)({recoveryParam:r.recoveryParam,r:(0,Y.hexZeroPad)("0x"+r.r.toString(16),32),s:(0,Y.hexZeroPad)("0x"+r.s.toString(16),32)})}computeSharedSecret(A){const e=W().keyFromPrivate((0,Y.arrayify)(this.privateKey)),t=W().keyFromPublic((0,Y.arrayify)(q(A)));return(0,Y.hexZeroPad)("0x"+e.derive(t.getPublic()).toString(16),32)}static isSigningKey(A){return!(!A||!A._isSigningKey)}}function K(A,e){const t=(0,Y.splitSignature)(e),r={r:(0,Y.arrayify)(t.r),s:(0,Y.arrayify)(t.s)};return"0x"+W().recoverPubKey((0,Y.arrayify)(A),r,t.recoveryParam).encode("hex",!1)}function q(A,e){const t=(0,Y.arrayify)(A);if(32===t.length){const A=new z(t);return e?"0x"+W().keyFromPrivate(t).getPublic(!0,"hex"):A.publicKey}return 33===t.length?e?(0,Y.hexlify)(t):"0x"+W().keyFromPublic(t).getPublic(!1,"hex"):65===t.length?e?"0x"+W().keyFromPublic(t).getPublic(!0,"hex"):(0,Y.hexlify)(t):L.throwArgumentError("invalid public or private key","key","[REDACTED]")}},8434:function(A,e,t){!function(A,e){"use strict";function r(A,e){if(!A)throw new Error(e||"Assertion failed")}function i(A,e){A.super_=e;var t=function(){};t.prototype=e.prototype,A.prototype=new t,A.prototype.constructor=A}function n(A,e,t){if(n.isBN(A))return A;this.negative=0,this.words=null,this.length=0,this.red=null,null!==A&&("le"!==e&&"be"!==e||(t=e,e=10),this._init(A||0,e||10,t||"be"))}var o;"object"==typeof A?A.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:t(45179).Buffer}catch(A){}function s(A,e){var t=A.charCodeAt(e);return t>=48&&t<=57?t-48:t>=65&&t<=70?t-55:t>=97&&t<=102?t-87:void r(!1,"Invalid character in "+A)}function a(A,e,t){var r=s(A,t);return t-1>=e&&(r|=s(A,t-1)<<4),r}function l(A,e,t,i){for(var n=0,o=0,s=Math.min(A.length,t),a=e;a<s;a++){var l=A.charCodeAt(a)-48;n*=i,o=l>=49?l-49+10:l>=17?l-17+10:l,r(l>=0&&o<i,"Invalid character"),n+=o}return n}function c(A,e){A.words=e.words,A.length=e.length,A.negative=e.negative,A.red=e.red}if(n.isBN=function(A){return A instanceof n||null!==A&&"object"==typeof A&&A.constructor.wordSize===n.wordSize&&Array.isArray(A.words)},n.max=function(A,e){return A.cmp(e)>0?A:e},n.min=function(A,e){return A.cmp(e)<0?A:e},n.prototype._init=function(A,e,t){if("number"==typeof A)return this._initNumber(A,e,t);if("object"==typeof A)return this._initArray(A,e,t);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(A=A.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<A.length&&(16===e?this._parseHex(A,i,t):(this._parseBase(A,e,i),"le"===t&&this._initArray(this.toArray(),e,t)))},n.prototype._initNumber=function(A,e,t){A<0&&(this.negative=1,A=-A),A<67108864?(this.words=[67108863&A],this.length=1):A<4503599627370496?(this.words=[67108863&A,A/67108864&67108863],this.length=2):(r(A<9007199254740992),this.words=[67108863&A,A/67108864&67108863,1],this.length=3),"le"===t&&this._initArray(this.toArray(),e,t)},n.prototype._initArray=function(A,e,t){if(r("number"==typeof A.length),A.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(A.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o,s=0;if("be"===t)for(i=A.length-1,n=0;i>=0;i-=3)o=A[i]|A[i-1]<<8|A[i-2]<<16,this.words[n]|=o<<s&67108863,this.words[n+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,n++);else if("le"===t)for(i=0,n=0;i<A.length;i+=3)o=A[i]|A[i+1]<<8|A[i+2]<<16,this.words[n]|=o<<s&67108863,this.words[n+1]=o>>>26-s&67108863,(s+=24)>=26&&(s-=26,n++);return this._strip()},n.prototype._parseHex=function(A,e,t){this.length=Math.ceil((A.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,n=0,o=0;if("be"===t)for(r=A.length-1;r>=e;r-=2)i=a(A,e,r)<<n,this.words[o]|=67108863&i,n>=18?(n-=18,o+=1,this.words[o]|=i>>>26):n+=8;else for(r=(A.length-e)%2==0?e+1:e;r<A.length;r+=2)i=a(A,e,r)<<n,this.words[o]|=67108863&i,n>=18?(n-=18,o+=1,this.words[o]|=i>>>26):n+=8;this._strip()},n.prototype._parseBase=function(A,e,t){this.words=[0],this.length=1;for(var r=0,i=1;i<=67108863;i*=e)r++;r--,i=i/e|0;for(var n=A.length-t,o=n%r,s=Math.min(n,n-o)+t,a=0,c=t;c<s;c+=r)a=l(A,c,c+r,e),this.imuln(i),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==o){var g=1;for(a=l(A,c,A.length,e),c=0;c<o;c++)g*=e;this.imuln(g),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}this._strip()},n.prototype.copy=function(A){A.words=new Array(this.length);for(var e=0;e<this.length;e++)A.words[e]=this.words[e];A.length=this.length,A.negative=this.negative,A.red=this.red},n.prototype._move=function(A){c(A,this)},n.prototype.clone=function(){var A=new n(null);return this.copy(A),A},n.prototype._expand=function(A){for(;this.length<A;)this.words[this.length++]=0;return this},n.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{n.prototype[Symbol.for("nodejs.util.inspect.custom")]=g}catch(A){n.prototype.inspect=g}else n.prototype.inspect=g;function g(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],h=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],E=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function B(A,e,t){t.negative=e.negative^A.negative;var r=A.length+e.length|0;t.length=r,r=r-1|0;var i=0|A.words[0],n=0|e.words[0],o=i*n,s=67108863&o,a=o/67108864|0;t.words[0]=s;for(var l=1;l<r;l++){for(var c=a>>>26,g=67108863&a,u=Math.min(l,e.length-1),h=Math.max(0,l-A.length+1);h<=u;h++){var E=l-h|0;c+=(o=(i=0|A.words[E])*(n=0|e.words[h])+g)/67108864|0,g=67108863&o}t.words[l]=0|g,a=0|c}return 0!==a?t.words[l]=0|a:t.length--,t._strip()}n.prototype.toString=function(A,e){var t;if(e=0|e||1,16===(A=A||10)||"hex"===A){t="";for(var i=0,n=0,o=0;o<this.length;o++){var s=this.words[o],a=(16777215&(s<<i|n)).toString(16);n=s>>>24-i&16777215,(i+=2)>=26&&(i-=26,o--),t=0!==n||o!==this.length-1?u[6-a.length]+a+t:a+t}for(0!==n&&(t=n.toString(16)+t);t.length%e!=0;)t="0"+t;return 0!==this.negative&&(t="-"+t),t}if(A===(0|A)&&A>=2&&A<=36){var l=h[A],c=E[A];t="";var g=this.clone();for(g.negative=0;!g.isZero();){var B=g.modrn(c).toString(A);t=(g=g.idivn(c)).isZero()?B+t:u[l-B.length]+B+t}for(this.isZero()&&(t="0"+t);t.length%e!=0;)t="0"+t;return 0!==this.negative&&(t="-"+t),t}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var A=this.words[0];return 2===this.length?A+=67108864*this.words[1]:3===this.length&&1===this.words[2]?A+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-A:A},n.prototype.toJSON=function(){return this.toString(16,2)},o&&(n.prototype.toBuffer=function(A,e){return this.toArrayLike(o,A,e)}),n.prototype.toArray=function(A,e){return this.toArrayLike(Array,A,e)},n.prototype.toArrayLike=function(A,e,t){this._strip();var i=this.byteLength(),n=t||Math.max(1,i);r(i<=n,"byte array longer than desired length"),r(n>0,"Requested array length <= 0");var o=function(A,e){return A.allocUnsafe?A.allocUnsafe(e):new A(e)}(A,n);return this["_toArrayLike"+("le"===e?"LE":"BE")](o,i),o},n.prototype._toArrayLikeLE=function(A,e){for(var t=0,r=0,i=0,n=0;i<this.length;i++){var o=this.words[i]<<n|r;A[t++]=255&o,t<A.length&&(A[t++]=o>>8&255),t<A.length&&(A[t++]=o>>16&255),6===n?(t<A.length&&(A[t++]=o>>24&255),r=0,n=0):(r=o>>>24,n+=2)}if(t<A.length)for(A[t++]=r;t<A.length;)A[t++]=0},n.prototype._toArrayLikeBE=function(A,e){for(var t=A.length-1,r=0,i=0,n=0;i<this.length;i++){var o=this.words[i]<<n|r;A[t--]=255&o,t>=0&&(A[t--]=o>>8&255),t>=0&&(A[t--]=o>>16&255),6===n?(t>=0&&(A[t--]=o>>24&255),r=0,n=0):(r=o>>>24,n+=2)}if(t>=0)for(A[t--]=r;t>=0;)A[t--]=0},Math.clz32?n.prototype._countBits=function(A){return 32-Math.clz32(A)}:n.prototype._countBits=function(A){var e=A,t=0;return e>=4096&&(t+=13,e>>>=13),e>=64&&(t+=7,e>>>=7),e>=8&&(t+=4,e>>>=4),e>=2&&(t+=2,e>>>=2),t+e},n.prototype._zeroBits=function(A){if(0===A)return 26;var e=A,t=0;return 0==(8191&e)&&(t+=13,e>>>=13),0==(127&e)&&(t+=7,e>>>=7),0==(15&e)&&(t+=4,e>>>=4),0==(3&e)&&(t+=2,e>>>=2),0==(1&e)&&t++,t},n.prototype.bitLength=function(){var A=this.words[this.length-1],e=this._countBits(A);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var A=0,e=0;e<this.length;e++){var t=this._zeroBits(this.words[e]);if(A+=t,26!==t)break}return A},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(A){return 0!==this.negative?this.abs().inotn(A).iaddn(1):this.clone()},n.prototype.fromTwos=function(A){return this.testn(A-1)?this.notn(A).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(A){for(;this.length<A.length;)this.words[this.length++]=0;for(var e=0;e<A.length;e++)this.words[e]=this.words[e]|A.words[e];return this._strip()},n.prototype.ior=function(A){return r(0==(this.negative|A.negative)),this.iuor(A)},n.prototype.or=function(A){return this.length>A.length?this.clone().ior(A):A.clone().ior(this)},n.prototype.uor=function(A){return this.length>A.length?this.clone().iuor(A):A.clone().iuor(this)},n.prototype.iuand=function(A){var e;e=this.length>A.length?A:this;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]&A.words[t];return this.length=e.length,this._strip()},n.prototype.iand=function(A){return r(0==(this.negative|A.negative)),this.iuand(A)},n.prototype.and=function(A){return this.length>A.length?this.clone().iand(A):A.clone().iand(this)},n.prototype.uand=function(A){return this.length>A.length?this.clone().iuand(A):A.clone().iuand(this)},n.prototype.iuxor=function(A){var e,t;this.length>A.length?(e=this,t=A):(e=A,t=this);for(var r=0;r<t.length;r++)this.words[r]=e.words[r]^t.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this._strip()},n.prototype.ixor=function(A){return r(0==(this.negative|A.negative)),this.iuxor(A)},n.prototype.xor=function(A){return this.length>A.length?this.clone().ixor(A):A.clone().ixor(this)},n.prototype.uxor=function(A){return this.length>A.length?this.clone().iuxor(A):A.clone().iuxor(this)},n.prototype.inotn=function(A){r("number"==typeof A&&A>=0);var e=0|Math.ceil(A/26),t=A%26;this._expand(e),t>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return t>0&&(this.words[i]=~this.words[i]&67108863>>26-t),this._strip()},n.prototype.notn=function(A){return this.clone().inotn(A)},n.prototype.setn=function(A,e){r("number"==typeof A&&A>=0);var t=A/26|0,i=A%26;return this._expand(t+1),this.words[t]=e?this.words[t]|1<<i:this.words[t]&~(1<<i),this._strip()},n.prototype.iadd=function(A){var e,t,r;if(0!==this.negative&&0===A.negative)return this.negative=0,e=this.isub(A),this.negative^=1,this._normSign();if(0===this.negative&&0!==A.negative)return A.negative=0,e=this.isub(A),A.negative=1,e._normSign();this.length>A.length?(t=this,r=A):(t=A,r=this);for(var i=0,n=0;n<r.length;n++)e=(0|t.words[n])+(0|r.words[n])+i,this.words[n]=67108863&e,i=e>>>26;for(;0!==i&&n<t.length;n++)e=(0|t.words[n])+i,this.words[n]=67108863&e,i=e>>>26;if(this.length=t.length,0!==i)this.words[this.length]=i,this.length++;else if(t!==this)for(;n<t.length;n++)this.words[n]=t.words[n];return this},n.prototype.add=function(A){var e;return 0!==A.negative&&0===this.negative?(A.negative=0,e=this.sub(A),A.negative^=1,e):0===A.negative&&0!==this.negative?(this.negative=0,e=A.sub(this),this.negative=1,e):this.length>A.length?this.clone().iadd(A):A.clone().iadd(this)},n.prototype.isub=function(A){if(0!==A.negative){A.negative=0;var e=this.iadd(A);return A.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(A),this.negative=1,this._normSign();var t,r,i=this.cmp(A);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(t=this,r=A):(t=A,r=this);for(var n=0,o=0;o<r.length;o++)n=(e=(0|t.words[o])-(0|r.words[o])+n)>>26,this.words[o]=67108863&e;for(;0!==n&&o<t.length;o++)n=(e=(0|t.words[o])+n)>>26,this.words[o]=67108863&e;if(0===n&&o<t.length&&t!==this)for(;o<t.length;o++)this.words[o]=t.words[o];return this.length=Math.max(this.length,o),t!==this&&(this.negative=1),this._strip()},n.prototype.sub=function(A){return this.clone().isub(A)};var I=function(A,e,t){var r,i,n,o=A.words,s=e.words,a=t.words,l=0,c=0|o[0],g=8191&c,u=c>>>13,h=0|o[1],E=8191&h,B=h>>>13,I=0|o[2],f=8191&I,p=I>>>13,d=0|o[3],w=8191&d,m=d>>>13,C=0|o[4],Q=8191&C,R=C>>>13,y=0|o[5],U=8191&y,v=y>>>13,M=0|o[6],T=8191&M,b=M>>>13,S=0|o[7],F=8191&S,D=S>>>13,N=0|o[8],G=8191&N,V=N>>>13,k=0|o[9],O=8191&k,x=k>>>13,Z=0|s[0],J=8191&Z,P=Z>>>13,Y=0|s[1],H=8191&Y,L=Y>>>13,j=0|s[2],W=8191&j,z=j>>>13,K=0|s[3],q=8191&K,X=K>>>13,_=0|s[4],$=8191&_,AA=_>>>13,eA=0|s[5],tA=8191&eA,rA=eA>>>13,iA=0|s[6],nA=8191&iA,oA=iA>>>13,sA=0|s[7],aA=8191&sA,lA=sA>>>13,cA=0|s[8],gA=8191&cA,uA=cA>>>13,hA=0|s[9],EA=8191&hA,BA=hA>>>13;t.negative=A.negative^e.negative,t.length=19;var IA=(l+(r=Math.imul(g,J))|0)+((8191&(i=(i=Math.imul(g,P))+Math.imul(u,J)|0))<<13)|0;l=((n=Math.imul(u,P))+(i>>>13)|0)+(IA>>>26)|0,IA&=67108863,r=Math.imul(E,J),i=(i=Math.imul(E,P))+Math.imul(B,J)|0,n=Math.imul(B,P);var fA=(l+(r=r+Math.imul(g,H)|0)|0)+((8191&(i=(i=i+Math.imul(g,L)|0)+Math.imul(u,H)|0))<<13)|0;l=((n=n+Math.imul(u,L)|0)+(i>>>13)|0)+(fA>>>26)|0,fA&=67108863,r=Math.imul(f,J),i=(i=Math.imul(f,P))+Math.imul(p,J)|0,n=Math.imul(p,P),r=r+Math.imul(E,H)|0,i=(i=i+Math.imul(E,L)|0)+Math.imul(B,H)|0,n=n+Math.imul(B,L)|0;var pA=(l+(r=r+Math.imul(g,W)|0)|0)+((8191&(i=(i=i+Math.imul(g,z)|0)+Math.imul(u,W)|0))<<13)|0;l=((n=n+Math.imul(u,z)|0)+(i>>>13)|0)+(pA>>>26)|0,pA&=67108863,r=Math.imul(w,J),i=(i=Math.imul(w,P))+Math.imul(m,J)|0,n=Math.imul(m,P),r=r+Math.imul(f,H)|0,i=(i=i+Math.imul(f,L)|0)+Math.imul(p,H)|0,n=n+Math.imul(p,L)|0,r=r+Math.imul(E,W)|0,i=(i=i+Math.imul(E,z)|0)+Math.imul(B,W)|0,n=n+Math.imul(B,z)|0;var dA=(l+(r=r+Math.imul(g,q)|0)|0)+((8191&(i=(i=i+Math.imul(g,X)|0)+Math.imul(u,q)|0))<<13)|0;l=((n=n+Math.imul(u,X)|0)+(i>>>13)|0)+(dA>>>26)|0,dA&=67108863,r=Math.imul(Q,J),i=(i=Math.imul(Q,P))+Math.imul(R,J)|0,n=Math.imul(R,P),r=r+Math.imul(w,H)|0,i=(i=i+Math.imul(w,L)|0)+Math.imul(m,H)|0,n=n+Math.imul(m,L)|0,r=r+Math.imul(f,W)|0,i=(i=i+Math.imul(f,z)|0)+Math.imul(p,W)|0,n=n+Math.imul(p,z)|0,r=r+Math.imul(E,q)|0,i=(i=i+Math.imul(E,X)|0)+Math.imul(B,q)|0,n=n+Math.imul(B,X)|0;var wA=(l+(r=r+Math.imul(g,$)|0)|0)+((8191&(i=(i=i+Math.imul(g,AA)|0)+Math.imul(u,$)|0))<<13)|0;l=((n=n+Math.imul(u,AA)|0)+(i>>>13)|0)+(wA>>>26)|0,wA&=67108863,r=Math.imul(U,J),i=(i=Math.imul(U,P))+Math.imul(v,J)|0,n=Math.imul(v,P),r=r+Math.imul(Q,H)|0,i=(i=i+Math.imul(Q,L)|0)+Math.imul(R,H)|0,n=n+Math.imul(R,L)|0,r=r+Math.imul(w,W)|0,i=(i=i+Math.imul(w,z)|0)+Math.imul(m,W)|0,n=n+Math.imul(m,z)|0,r=r+Math.imul(f,q)|0,i=(i=i+Math.imul(f,X)|0)+Math.imul(p,q)|0,n=n+Math.imul(p,X)|0,r=r+Math.imul(E,$)|0,i=(i=i+Math.imul(E,AA)|0)+Math.imul(B,$)|0,n=n+Math.imul(B,AA)|0;var mA=(l+(r=r+Math.imul(g,tA)|0)|0)+((8191&(i=(i=i+Math.imul(g,rA)|0)+Math.imul(u,tA)|0))<<13)|0;l=((n=n+Math.imul(u,rA)|0)+(i>>>13)|0)+(mA>>>26)|0,mA&=67108863,r=Math.imul(T,J),i=(i=Math.imul(T,P))+Math.imul(b,J)|0,n=Math.imul(b,P),r=r+Math.imul(U,H)|0,i=(i=i+Math.imul(U,L)|0)+Math.imul(v,H)|0,n=n+Math.imul(v,L)|0,r=r+Math.imul(Q,W)|0,i=(i=i+Math.imul(Q,z)|0)+Math.imul(R,W)|0,n=n+Math.imul(R,z)|0,r=r+Math.imul(w,q)|0,i=(i=i+Math.imul(w,X)|0)+Math.imul(m,q)|0,n=n+Math.imul(m,X)|0,r=r+Math.imul(f,$)|0,i=(i=i+Math.imul(f,AA)|0)+Math.imul(p,$)|0,n=n+Math.imul(p,AA)|0,r=r+Math.imul(E,tA)|0,i=(i=i+Math.imul(E,rA)|0)+Math.imul(B,tA)|0,n=n+Math.imul(B,rA)|0;var CA=(l+(r=r+Math.imul(g,nA)|0)|0)+((8191&(i=(i=i+Math.imul(g,oA)|0)+Math.imul(u,nA)|0))<<13)|0;l=((n=n+Math.imul(u,oA)|0)+(i>>>13)|0)+(CA>>>26)|0,CA&=67108863,r=Math.imul(F,J),i=(i=Math.imul(F,P))+Math.imul(D,J)|0,n=Math.imul(D,P),r=r+Math.imul(T,H)|0,i=(i=i+Math.imul(T,L)|0)+Math.imul(b,H)|0,n=n+Math.imul(b,L)|0,r=r+Math.imul(U,W)|0,i=(i=i+Math.imul(U,z)|0)+Math.imul(v,W)|0,n=n+Math.imul(v,z)|0,r=r+Math.imul(Q,q)|0,i=(i=i+Math.imul(Q,X)|0)+Math.imul(R,q)|0,n=n+Math.imul(R,X)|0,r=r+Math.imul(w,$)|0,i=(i=i+Math.imul(w,AA)|0)+Math.imul(m,$)|0,n=n+Math.imul(m,AA)|0,r=r+Math.imul(f,tA)|0,i=(i=i+Math.imul(f,rA)|0)+Math.imul(p,tA)|0,n=n+Math.imul(p,rA)|0,r=r+Math.imul(E,nA)|0,i=(i=i+Math.imul(E,oA)|0)+Math.imul(B,nA)|0,n=n+Math.imul(B,oA)|0;var QA=(l+(r=r+Math.imul(g,aA)|0)|0)+((8191&(i=(i=i+Math.imul(g,lA)|0)+Math.imul(u,aA)|0))<<13)|0;l=((n=n+Math.imul(u,lA)|0)+(i>>>13)|0)+(QA>>>26)|0,QA&=67108863,r=Math.imul(G,J),i=(i=Math.imul(G,P))+Math.imul(V,J)|0,n=Math.imul(V,P),r=r+Math.imul(F,H)|0,i=(i=i+Math.imul(F,L)|0)+Math.imul(D,H)|0,n=n+Math.imul(D,L)|0,r=r+Math.imul(T,W)|0,i=(i=i+Math.imul(T,z)|0)+Math.imul(b,W)|0,n=n+Math.imul(b,z)|0,r=r+Math.imul(U,q)|0,i=(i=i+Math.imul(U,X)|0)+Math.imul(v,q)|0,n=n+Math.imul(v,X)|0,r=r+Math.imul(Q,$)|0,i=(i=i+Math.imul(Q,AA)|0)+Math.imul(R,$)|0,n=n+Math.imul(R,AA)|0,r=r+Math.imul(w,tA)|0,i=(i=i+Math.imul(w,rA)|0)+Math.imul(m,tA)|0,n=n+Math.imul(m,rA)|0,r=r+Math.imul(f,nA)|0,i=(i=i+Math.imul(f,oA)|0)+Math.imul(p,nA)|0,n=n+Math.imul(p,oA)|0,r=r+Math.imul(E,aA)|0,i=(i=i+Math.imul(E,lA)|0)+Math.imul(B,aA)|0,n=n+Math.imul(B,lA)|0;var RA=(l+(r=r+Math.imul(g,gA)|0)|0)+((8191&(i=(i=i+Math.imul(g,uA)|0)+Math.imul(u,gA)|0))<<13)|0;l=((n=n+Math.imul(u,uA)|0)+(i>>>13)|0)+(RA>>>26)|0,RA&=67108863,r=Math.imul(O,J),i=(i=Math.imul(O,P))+Math.imul(x,J)|0,n=Math.imul(x,P),r=r+Math.imul(G,H)|0,i=(i=i+Math.imul(G,L)|0)+Math.imul(V,H)|0,n=n+Math.imul(V,L)|0,r=r+Math.imul(F,W)|0,i=(i=i+Math.imul(F,z)|0)+Math.imul(D,W)|0,n=n+Math.imul(D,z)|0,r=r+Math.imul(T,q)|0,i=(i=i+Math.imul(T,X)|0)+Math.imul(b,q)|0,n=n+Math.imul(b,X)|0,r=r+Math.imul(U,$)|0,i=(i=i+Math.imul(U,AA)|0)+Math.imul(v,$)|0,n=n+Math.imul(v,AA)|0,r=r+Math.imul(Q,tA)|0,i=(i=i+Math.imul(Q,rA)|0)+Math.imul(R,tA)|0,n=n+Math.imul(R,rA)|0,r=r+Math.imul(w,nA)|0,i=(i=i+Math.imul(w,oA)|0)+Math.imul(m,nA)|0,n=n+Math.imul(m,oA)|0,r=r+Math.imul(f,aA)|0,i=(i=i+Math.imul(f,lA)|0)+Math.imul(p,aA)|0,n=n+Math.imul(p,lA)|0,r=r+Math.imul(E,gA)|0,i=(i=i+Math.imul(E,uA)|0)+Math.imul(B,gA)|0,n=n+Math.imul(B,uA)|0;var yA=(l+(r=r+Math.imul(g,EA)|0)|0)+((8191&(i=(i=i+Math.imul(g,BA)|0)+Math.imul(u,EA)|0))<<13)|0;l=((n=n+Math.imul(u,BA)|0)+(i>>>13)|0)+(yA>>>26)|0,yA&=67108863,r=Math.imul(O,H),i=(i=Math.imul(O,L))+Math.imul(x,H)|0,n=Math.imul(x,L),r=r+Math.imul(G,W)|0,i=(i=i+Math.imul(G,z)|0)+Math.imul(V,W)|0,n=n+Math.imul(V,z)|0,r=r+Math.imul(F,q)|0,i=(i=i+Math.imul(F,X)|0)+Math.imul(D,q)|0,n=n+Math.imul(D,X)|0,r=r+Math.imul(T,$)|0,i=(i=i+Math.imul(T,AA)|0)+Math.imul(b,$)|0,n=n+Math.imul(b,AA)|0,r=r+Math.imul(U,tA)|0,i=(i=i+Math.imul(U,rA)|0)+Math.imul(v,tA)|0,n=n+Math.imul(v,rA)|0,r=r+Math.imul(Q,nA)|0,i=(i=i+Math.imul(Q,oA)|0)+Math.imul(R,nA)|0,n=n+Math.imul(R,oA)|0,r=r+Math.imul(w,aA)|0,i=(i=i+Math.imul(w,lA)|0)+Math.imul(m,aA)|0,n=n+Math.imul(m,lA)|0,r=r+Math.imul(f,gA)|0,i=(i=i+Math.imul(f,uA)|0)+Math.imul(p,gA)|0,n=n+Math.imul(p,uA)|0;var UA=(l+(r=r+Math.imul(E,EA)|0)|0)+((8191&(i=(i=i+Math.imul(E,BA)|0)+Math.imul(B,EA)|0))<<13)|0;l=((n=n+Math.imul(B,BA)|0)+(i>>>13)|0)+(UA>>>26)|0,UA&=67108863,r=Math.imul(O,W),i=(i=Math.imul(O,z))+Math.imul(x,W)|0,n=Math.imul(x,z),r=r+Math.imul(G,q)|0,i=(i=i+Math.imul(G,X)|0)+Math.imul(V,q)|0,n=n+Math.imul(V,X)|0,r=r+Math.imul(F,$)|0,i=(i=i+Math.imul(F,AA)|0)+Math.imul(D,$)|0,n=n+Math.imul(D,AA)|0,r=r+Math.imul(T,tA)|0,i=(i=i+Math.imul(T,rA)|0)+Math.imul(b,tA)|0,n=n+Math.imul(b,rA)|0,r=r+Math.imul(U,nA)|0,i=(i=i+Math.imul(U,oA)|0)+Math.imul(v,nA)|0,n=n+Math.imul(v,oA)|0,r=r+Math.imul(Q,aA)|0,i=(i=i+Math.imul(Q,lA)|0)+Math.imul(R,aA)|0,n=n+Math.imul(R,lA)|0,r=r+Math.imul(w,gA)|0,i=(i=i+Math.imul(w,uA)|0)+Math.imul(m,gA)|0,n=n+Math.imul(m,uA)|0;var vA=(l+(r=r+Math.imul(f,EA)|0)|0)+((8191&(i=(i=i+Math.imul(f,BA)|0)+Math.imul(p,EA)|0))<<13)|0;l=((n=n+Math.imul(p,BA)|0)+(i>>>13)|0)+(vA>>>26)|0,vA&=67108863,r=Math.imul(O,q),i=(i=Math.imul(O,X))+Math.imul(x,q)|0,n=Math.imul(x,X),r=r+Math.imul(G,$)|0,i=(i=i+Math.imul(G,AA)|0)+Math.imul(V,$)|0,n=n+Math.imul(V,AA)|0,r=r+Math.imul(F,tA)|0,i=(i=i+Math.imul(F,rA)|0)+Math.imul(D,tA)|0,n=n+Math.imul(D,rA)|0,r=r+Math.imul(T,nA)|0,i=(i=i+Math.imul(T,oA)|0)+Math.imul(b,nA)|0,n=n+Math.imul(b,oA)|0,r=r+Math.imul(U,aA)|0,i=(i=i+Math.imul(U,lA)|0)+Math.imul(v,aA)|0,n=n+Math.imul(v,lA)|0,r=r+Math.imul(Q,gA)|0,i=(i=i+Math.imul(Q,uA)|0)+Math.imul(R,gA)|0,n=n+Math.imul(R,uA)|0;var MA=(l+(r=r+Math.imul(w,EA)|0)|0)+((8191&(i=(i=i+Math.imul(w,BA)|0)+Math.imul(m,EA)|0))<<13)|0;l=((n=n+Math.imul(m,BA)|0)+(i>>>13)|0)+(MA>>>26)|0,MA&=67108863,r=Math.imul(O,$),i=(i=Math.imul(O,AA))+Math.imul(x,$)|0,n=Math.imul(x,AA),r=r+Math.imul(G,tA)|0,i=(i=i+Math.imul(G,rA)|0)+Math.imul(V,tA)|0,n=n+Math.imul(V,rA)|0,r=r+Math.imul(F,nA)|0,i=(i=i+Math.imul(F,oA)|0)+Math.imul(D,nA)|0,n=n+Math.imul(D,oA)|0,r=r+Math.imul(T,aA)|0,i=(i=i+Math.imul(T,lA)|0)+Math.imul(b,aA)|0,n=n+Math.imul(b,lA)|0,r=r+Math.imul(U,gA)|0,i=(i=i+Math.imul(U,uA)|0)+Math.imul(v,gA)|0,n=n+Math.imul(v,uA)|0;var TA=(l+(r=r+Math.imul(Q,EA)|0)|0)+((8191&(i=(i=i+Math.imul(Q,BA)|0)+Math.imul(R,EA)|0))<<13)|0;l=((n=n+Math.imul(R,BA)|0)+(i>>>13)|0)+(TA>>>26)|0,TA&=67108863,r=Math.imul(O,tA),i=(i=Math.imul(O,rA))+Math.imul(x,tA)|0,n=Math.imul(x,rA),r=r+Math.imul(G,nA)|0,i=(i=i+Math.imul(G,oA)|0)+Math.imul(V,nA)|0,n=n+Math.imul(V,oA)|0,r=r+Math.imul(F,aA)|0,i=(i=i+Math.imul(F,lA)|0)+Math.imul(D,aA)|0,n=n+Math.imul(D,lA)|0,r=r+Math.imul(T,gA)|0,i=(i=i+Math.imul(T,uA)|0)+Math.imul(b,gA)|0,n=n+Math.imul(b,uA)|0;var bA=(l+(r=r+Math.imul(U,EA)|0)|0)+((8191&(i=(i=i+Math.imul(U,BA)|0)+Math.imul(v,EA)|0))<<13)|0;l=((n=n+Math.imul(v,BA)|0)+(i>>>13)|0)+(bA>>>26)|0,bA&=67108863,r=Math.imul(O,nA),i=(i=Math.imul(O,oA))+Math.imul(x,nA)|0,n=Math.imul(x,oA),r=r+Math.imul(G,aA)|0,i=(i=i+Math.imul(G,lA)|0)+Math.imul(V,aA)|0,n=n+Math.imul(V,lA)|0,r=r+Math.imul(F,gA)|0,i=(i=i+Math.imul(F,uA)|0)+Math.imul(D,gA)|0,n=n+Math.imul(D,uA)|0;var SA=(l+(r=r+Math.imul(T,EA)|0)|0)+((8191&(i=(i=i+Math.imul(T,BA)|0)+Math.imul(b,EA)|0))<<13)|0;l=((n=n+Math.imul(b,BA)|0)+(i>>>13)|0)+(SA>>>26)|0,SA&=67108863,r=Math.imul(O,aA),i=(i=Math.imul(O,lA))+Math.imul(x,aA)|0,n=Math.imul(x,lA),r=r+Math.imul(G,gA)|0,i=(i=i+Math.imul(G,uA)|0)+Math.imul(V,gA)|0,n=n+Math.imul(V,uA)|0;var FA=(l+(r=r+Math.imul(F,EA)|0)|0)+((8191&(i=(i=i+Math.imul(F,BA)|0)+Math.imul(D,EA)|0))<<13)|0;l=((n=n+Math.imul(D,BA)|0)+(i>>>13)|0)+(FA>>>26)|0,FA&=67108863,r=Math.imul(O,gA),i=(i=Math.imul(O,uA))+Math.imul(x,gA)|0,n=Math.imul(x,uA);var DA=(l+(r=r+Math.imul(G,EA)|0)|0)+((8191&(i=(i=i+Math.imul(G,BA)|0)+Math.imul(V,EA)|0))<<13)|0;l=((n=n+Math.imul(V,BA)|0)+(i>>>13)|0)+(DA>>>26)|0,DA&=67108863;var NA=(l+(r=Math.imul(O,EA))|0)+((8191&(i=(i=Math.imul(O,BA))+Math.imul(x,EA)|0))<<13)|0;return l=((n=Math.imul(x,BA))+(i>>>13)|0)+(NA>>>26)|0,NA&=67108863,a[0]=IA,a[1]=fA,a[2]=pA,a[3]=dA,a[4]=wA,a[5]=mA,a[6]=CA,a[7]=QA,a[8]=RA,a[9]=yA,a[10]=UA,a[11]=vA,a[12]=MA,a[13]=TA,a[14]=bA,a[15]=SA,a[16]=FA,a[17]=DA,a[18]=NA,0!==l&&(a[19]=l,t.length++),t};function f(A,e,t){t.negative=e.negative^A.negative,t.length=A.length+e.length;for(var r=0,i=0,n=0;n<t.length-1;n++){var o=i;i=0;for(var s=67108863&r,a=Math.min(n,e.length-1),l=Math.max(0,n-A.length+1);l<=a;l++){var c=n-l,g=(0|A.words[c])*(0|e.words[l]),u=67108863&g;s=67108863&(u=u+s|0),i+=(o=(o=o+(g/67108864|0)|0)+(u>>>26)|0)>>>26,o&=67108863}t.words[n]=s,r=o,o=i}return 0!==r?t.words[n]=r:t.length--,t._strip()}function p(A,e,t){return f(A,e,t)}function d(A,e){this.x=A,this.y=e}Math.imul||(I=B),n.prototype.mulTo=function(A,e){var t=this.length+A.length;return 10===this.length&&10===A.length?I(this,A,e):t<63?B(this,A,e):t<1024?f(this,A,e):p(this,A,e)},d.prototype.makeRBT=function(A){for(var e=new Array(A),t=n.prototype._countBits(A)-1,r=0;r<A;r++)e[r]=this.revBin(r,t,A);return e},d.prototype.revBin=function(A,e,t){if(0===A||A===t-1)return A;for(var r=0,i=0;i<e;i++)r|=(1&A)<<e-i-1,A>>=1;return r},d.prototype.permute=function(A,e,t,r,i,n){for(var o=0;o<n;o++)r[o]=e[A[o]],i[o]=t[A[o]]},d.prototype.transform=function(A,e,t,r,i,n){this.permute(n,A,e,t,r,i);for(var o=1;o<i;o<<=1)for(var s=o<<1,a=Math.cos(2*Math.PI/s),l=Math.sin(2*Math.PI/s),c=0;c<i;c+=s)for(var g=a,u=l,h=0;h<o;h++){var E=t[c+h],B=r[c+h],I=t[c+h+o],f=r[c+h+o],p=g*I-u*f;f=g*f+u*I,I=p,t[c+h]=E+I,r[c+h]=B+f,t[c+h+o]=E-I,r[c+h+o]=B-f,h!==s&&(p=a*g-l*u,u=a*u+l*g,g=p)}},d.prototype.guessLen13b=function(A,e){var t=1|Math.max(e,A),r=1&t,i=0;for(t=t/2|0;t;t>>>=1)i++;return 1<<i+1+r},d.prototype.conjugate=function(A,e,t){if(!(t<=1))for(var r=0;r<t/2;r++){var i=A[r];A[r]=A[t-r-1],A[t-r-1]=i,i=e[r],e[r]=-e[t-r-1],e[t-r-1]=-i}},d.prototype.normalize13b=function(A,e){for(var t=0,r=0;r<e/2;r++){var i=8192*Math.round(A[2*r+1]/e)+Math.round(A[2*r]/e)+t;A[r]=67108863&i,t=i<67108864?0:i/67108864|0}return A},d.prototype.convert13b=function(A,e,t,i){for(var n=0,o=0;o<e;o++)n+=0|A[o],t[2*o]=8191&n,n>>>=13,t[2*o+1]=8191&n,n>>>=13;for(o=2*e;o<i;++o)t[o]=0;r(0===n),r(0==(-8192&n))},d.prototype.stub=function(A){for(var e=new Array(A),t=0;t<A;t++)e[t]=0;return e},d.prototype.mulp=function(A,e,t){var r=2*this.guessLen13b(A.length,e.length),i=this.makeRBT(r),n=this.stub(r),o=new Array(r),s=new Array(r),a=new Array(r),l=new Array(r),c=new Array(r),g=new Array(r),u=t.words;u.length=r,this.convert13b(A.words,A.length,o,r),this.convert13b(e.words,e.length,l,r),this.transform(o,n,s,a,r,i),this.transform(l,n,c,g,r,i);for(var h=0;h<r;h++){var E=s[h]*c[h]-a[h]*g[h];a[h]=s[h]*g[h]+a[h]*c[h],s[h]=E}return this.conjugate(s,a,r),this.transform(s,a,u,n,r,i),this.conjugate(u,n,r),this.normalize13b(u,r),t.negative=A.negative^e.negative,t.length=A.length+e.length,t._strip()},n.prototype.mul=function(A){var e=new n(null);return e.words=new Array(this.length+A.length),this.mulTo(A,e)},n.prototype.mulf=function(A){var e=new n(null);return e.words=new Array(this.length+A.length),p(this,A,e)},n.prototype.imul=function(A){return this.clone().mulTo(A,this)},n.prototype.imuln=function(A){var e=A<0;e&&(A=-A),r("number"==typeof A),r(A<67108864);for(var t=0,i=0;i<this.length;i++){var n=(0|this.words[i])*A,o=(67108863&n)+(67108863&t);t>>=26,t+=n/67108864|0,t+=o>>>26,this.words[i]=67108863&o}return 0!==t&&(this.words[i]=t,this.length++),e?this.ineg():this},n.prototype.muln=function(A){return this.clone().imuln(A)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(A){var e=function(A){for(var e=new Array(A.bitLength()),t=0;t<e.length;t++){var r=t/26|0,i=t%26;e[t]=A.words[r]>>>i&1}return e}(A);if(0===e.length)return new n(1);for(var t=this,r=0;r<e.length&&0===e[r];r++,t=t.sqr());if(++r<e.length)for(var i=t.sqr();r<e.length;r++,i=i.sqr())0!==e[r]&&(t=t.mul(i));return t},n.prototype.iushln=function(A){r("number"==typeof A&&A>=0);var e,t=A%26,i=(A-t)/26,n=67108863>>>26-t<<26-t;if(0!==t){var o=0;for(e=0;e<this.length;e++){var s=this.words[e]&n,a=(0|this.words[e])-s<<t;this.words[e]=a|o,o=s>>>26-t}o&&(this.words[e]=o,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this._strip()},n.prototype.ishln=function(A){return r(0===this.negative),this.iushln(A)},n.prototype.iushrn=function(A,e,t){var i;r("number"==typeof A&&A>=0),i=e?(e-e%26)/26:0;var n=A%26,o=Math.min((A-n)/26,this.length),s=67108863^67108863>>>n<<n,a=t;if(i-=o,i=Math.max(0,i),a){for(var l=0;l<o;l++)a.words[l]=this.words[l];a.length=o}if(0===o);else if(this.length>o)for(this.length-=o,l=0;l<this.length;l++)this.words[l]=this.words[l+o];else this.words[0]=0,this.length=1;var c=0;for(l=this.length-1;l>=0&&(0!==c||l>=i);l--){var g=0|this.words[l];this.words[l]=c<<26-n|g>>>n,c=g&s}return a&&0!==c&&(a.words[a.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},n.prototype.ishrn=function(A,e,t){return r(0===this.negative),this.iushrn(A,e,t)},n.prototype.shln=function(A){return this.clone().ishln(A)},n.prototype.ushln=function(A){return this.clone().iushln(A)},n.prototype.shrn=function(A){return this.clone().ishrn(A)},n.prototype.ushrn=function(A){return this.clone().iushrn(A)},n.prototype.testn=function(A){r("number"==typeof A&&A>=0);var e=A%26,t=(A-e)/26,i=1<<e;return!(this.length<=t||!(this.words[t]&i))},n.prototype.imaskn=function(A){r("number"==typeof A&&A>=0);var e=A%26,t=(A-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=t)return this;if(0!==e&&t++,this.length=Math.min(t,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this._strip()},n.prototype.maskn=function(A){return this.clone().imaskn(A)},n.prototype.iaddn=function(A){return r("number"==typeof A),r(A<67108864),A<0?this.isubn(-A):0!==this.negative?1===this.length&&(0|this.words[0])<=A?(this.words[0]=A-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(A),this.negative=1,this):this._iaddn(A)},n.prototype._iaddn=function(A){this.words[0]+=A;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(A){if(r("number"==typeof A),r(A<67108864),A<0)return this.iaddn(-A);if(0!==this.negative)return this.negative=0,this.iaddn(A),this.negative=1,this;if(this.words[0]-=A,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},n.prototype.addn=function(A){return this.clone().iaddn(A)},n.prototype.subn=function(A){return this.clone().isubn(A)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(A,e,t){var i,n,o=A.length+t;this._expand(o);var s=0;for(i=0;i<A.length;i++){n=(0|this.words[i+t])+s;var a=(0|A.words[i])*e;s=((n-=67108863&a)>>26)-(a/67108864|0),this.words[i+t]=67108863&n}for(;i<this.length-t;i++)s=(n=(0|this.words[i+t])+s)>>26,this.words[i+t]=67108863&n;if(0===s)return this._strip();for(r(-1===s),s=0,i=0;i<this.length;i++)s=(n=-(0|this.words[i])+s)>>26,this.words[i]=67108863&n;return this.negative=1,this._strip()},n.prototype._wordDiv=function(A,e){var t=(this.length,A.length),r=this.clone(),i=A,o=0|i.words[i.length-1];0!=(t=26-this._countBits(o))&&(i=i.ushln(t),r.iushln(t),o=0|i.words[i.length-1]);var s,a=r.length-i.length;if("mod"!==e){(s=new n(null)).length=a+1,s.words=new Array(s.length);for(var l=0;l<s.length;l++)s.words[l]=0}var c=r.clone()._ishlnsubmul(i,1,a);0===c.negative&&(r=c,s&&(s.words[a]=1));for(var g=a-1;g>=0;g--){var u=67108864*(0|r.words[i.length+g])+(0|r.words[i.length+g-1]);for(u=Math.min(u/o|0,67108863),r._ishlnsubmul(i,u,g);0!==r.negative;)u--,r.negative=0,r._ishlnsubmul(i,1,g),r.isZero()||(r.negative^=1);s&&(s.words[g]=u)}return s&&s._strip(),r._strip(),"div"!==e&&0!==t&&r.iushrn(t),{div:s||null,mod:r}},n.prototype.divmod=function(A,e,t){return r(!A.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===A.negative?(s=this.neg().divmod(A,e),"mod"!==e&&(i=s.div.neg()),"div"!==e&&(o=s.mod.neg(),t&&0!==o.negative&&o.iadd(A)),{div:i,mod:o}):0===this.negative&&0!==A.negative?(s=this.divmod(A.neg(),e),"mod"!==e&&(i=s.div.neg()),{div:i,mod:s.mod}):0!=(this.negative&A.negative)?(s=this.neg().divmod(A.neg(),e),"div"!==e&&(o=s.mod.neg(),t&&0!==o.negative&&o.isub(A)),{div:s.div,mod:o}):A.length>this.length||this.cmp(A)<0?{div:new n(0),mod:this}:1===A.length?"div"===e?{div:this.divn(A.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modrn(A.words[0]))}:{div:this.divn(A.words[0]),mod:new n(this.modrn(A.words[0]))}:this._wordDiv(A,e);var i,o,s},n.prototype.div=function(A){return this.divmod(A,"div",!1).div},n.prototype.mod=function(A){return this.divmod(A,"mod",!1).mod},n.prototype.umod=function(A){return this.divmod(A,"mod",!0).mod},n.prototype.divRound=function(A){var e=this.divmod(A);if(e.mod.isZero())return e.div;var t=0!==e.div.negative?e.mod.isub(A):e.mod,r=A.ushrn(1),i=A.andln(1),n=t.cmp(r);return n<0||1===i&&0===n?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modrn=function(A){var e=A<0;e&&(A=-A),r(A<=67108863);for(var t=(1<<26)%A,i=0,n=this.length-1;n>=0;n--)i=(t*i+(0|this.words[n]))%A;return e?-i:i},n.prototype.modn=function(A){return this.modrn(A)},n.prototype.idivn=function(A){var e=A<0;e&&(A=-A),r(A<=67108863);for(var t=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*t;this.words[i]=n/A|0,t=n%A}return this._strip(),e?this.ineg():this},n.prototype.divn=function(A){return this.clone().idivn(A)},n.prototype.egcd=function(A){r(0===A.negative),r(!A.isZero());var e=this,t=A.clone();e=0!==e.negative?e.umod(A):e.clone();for(var i=new n(1),o=new n(0),s=new n(0),a=new n(1),l=0;e.isEven()&&t.isEven();)e.iushrn(1),t.iushrn(1),++l;for(var c=t.clone(),g=e.clone();!e.isZero();){for(var u=0,h=1;0==(e.words[0]&h)&&u<26;++u,h<<=1);if(u>0)for(e.iushrn(u);u-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(c),o.isub(g)),i.iushrn(1),o.iushrn(1);for(var E=0,B=1;0==(t.words[0]&B)&&E<26;++E,B<<=1);if(E>0)for(t.iushrn(E);E-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(c),a.isub(g)),s.iushrn(1),a.iushrn(1);e.cmp(t)>=0?(e.isub(t),i.isub(s),o.isub(a)):(t.isub(e),s.isub(i),a.isub(o))}return{a:s,b:a,gcd:t.iushln(l)}},n.prototype._invmp=function(A){r(0===A.negative),r(!A.isZero());var e=this,t=A.clone();e=0!==e.negative?e.umod(A):e.clone();for(var i,o=new n(1),s=new n(0),a=t.clone();e.cmpn(1)>0&&t.cmpn(1)>0;){for(var l=0,c=1;0==(e.words[0]&c)&&l<26;++l,c<<=1);if(l>0)for(e.iushrn(l);l-- >0;)o.isOdd()&&o.iadd(a),o.iushrn(1);for(var g=0,u=1;0==(t.words[0]&u)&&g<26;++g,u<<=1);if(g>0)for(t.iushrn(g);g-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(t)>=0?(e.isub(t),o.isub(s)):(t.isub(e),s.isub(o))}return(i=0===e.cmpn(1)?o:s).cmpn(0)<0&&i.iadd(A),i},n.prototype.gcd=function(A){if(this.isZero())return A.abs();if(A.isZero())return this.abs();var e=this.clone(),t=A.clone();e.negative=0,t.negative=0;for(var r=0;e.isEven()&&t.isEven();r++)e.iushrn(1),t.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;t.isEven();)t.iushrn(1);var i=e.cmp(t);if(i<0){var n=e;e=t,t=n}else if(0===i||0===t.cmpn(1))break;e.isub(t)}return t.iushln(r)},n.prototype.invm=function(A){return this.egcd(A).a.umod(A)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(A){return this.words[0]&A},n.prototype.bincn=function(A){r("number"==typeof A);var e=A%26,t=(A-e)/26,i=1<<e;if(this.length<=t)return this._expand(t+1),this.words[t]|=i,this;for(var n=i,o=t;0!==n&&o<this.length;o++){var s=0|this.words[o];n=(s+=n)>>>26,s&=67108863,this.words[o]=s}return 0!==n&&(this.words[o]=n,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(A){var e,t=A<0;if(0!==this.negative&&!t)return-1;if(0===this.negative&&t)return 1;if(this._strip(),this.length>1)e=1;else{t&&(A=-A),r(A<=67108863,"Number is too big");var i=0|this.words[0];e=i===A?0:i<A?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(A){if(0!==this.negative&&0===A.negative)return-1;if(0===this.negative&&0!==A.negative)return 1;var e=this.ucmp(A);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(A){if(this.length>A.length)return 1;if(this.length<A.length)return-1;for(var e=0,t=this.length-1;t>=0;t--){var r=0|this.words[t],i=0|A.words[t];if(r!==i){r<i?e=-1:r>i&&(e=1);break}}return e},n.prototype.gtn=function(A){return 1===this.cmpn(A)},n.prototype.gt=function(A){return 1===this.cmp(A)},n.prototype.gten=function(A){return this.cmpn(A)>=0},n.prototype.gte=function(A){return this.cmp(A)>=0},n.prototype.ltn=function(A){return-1===this.cmpn(A)},n.prototype.lt=function(A){return-1===this.cmp(A)},n.prototype.lten=function(A){return this.cmpn(A)<=0},n.prototype.lte=function(A){return this.cmp(A)<=0},n.prototype.eqn=function(A){return 0===this.cmpn(A)},n.prototype.eq=function(A){return 0===this.cmp(A)},n.red=function(A){return new U(A)},n.prototype.toRed=function(A){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),A.convertTo(this)._forceRed(A)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(A){return this.red=A,this},n.prototype.forceRed=function(A){return r(!this.red,"Already a number in reduction context"),this._forceRed(A)},n.prototype.redAdd=function(A){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,A)},n.prototype.redIAdd=function(A){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,A)},n.prototype.redSub=function(A){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,A)},n.prototype.redISub=function(A){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,A)},n.prototype.redShl=function(A){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,A)},n.prototype.redMul=function(A){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,A),this.red.mul(this,A)},n.prototype.redIMul=function(A){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,A),this.red.imul(this,A)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(A){return r(this.red&&!A.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,A)};var w={k256:null,p224:null,p192:null,p25519:null};function m(A,e){this.name=A,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function C(){m.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function Q(){m.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function R(){m.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function y(){m.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function U(A){if("string"==typeof A){var e=n._prime(A);this.m=e.p,this.prime=e}else r(A.gtn(1),"modulus must be greater than 1"),this.m=A,this.prime=null}function v(A){U.call(this,A),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}m.prototype._tmp=function(){var A=new n(null);return A.words=new Array(Math.ceil(this.n/13)),A},m.prototype.ireduce=function(A){var e,t=A;do{this.split(t,this.tmp),e=(t=(t=this.imulK(t)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:t.ucmp(this.p);return 0===r?(t.words[0]=0,t.length=1):r>0?t.isub(this.p):void 0!==t.strip?t.strip():t._strip(),t},m.prototype.split=function(A,e){A.iushrn(this.n,0,e)},m.prototype.imulK=function(A){return A.imul(this.k)},i(C,m),C.prototype.split=function(A,e){for(var t=4194303,r=Math.min(A.length,9),i=0;i<r;i++)e.words[i]=A.words[i];if(e.length=r,A.length<=9)return A.words[0]=0,void(A.length=1);var n=A.words[9];for(e.words[e.length++]=n&t,i=10;i<A.length;i++){var o=0|A.words[i];A.words[i-10]=(o&t)<<4|n>>>22,n=o}n>>>=22,A.words[i-10]=n,0===n&&A.length>10?A.length-=10:A.length-=9},C.prototype.imulK=function(A){A.words[A.length]=0,A.words[A.length+1]=0,A.length+=2;for(var e=0,t=0;t<A.length;t++){var r=0|A.words[t];e+=977*r,A.words[t]=67108863&e,e=64*r+(e/67108864|0)}return 0===A.words[A.length-1]&&(A.length--,0===A.words[A.length-1]&&A.length--),A},i(Q,m),i(R,m),i(y,m),y.prototype.imulK=function(A){for(var e=0,t=0;t<A.length;t++){var r=19*(0|A.words[t])+e,i=67108863&r;r>>>=26,A.words[t]=i,e=r}return 0!==e&&(A.words[A.length++]=e),A},n._prime=function(A){if(w[A])return w[A];var e;if("k256"===A)e=new C;else if("p224"===A)e=new Q;else if("p192"===A)e=new R;else{if("p25519"!==A)throw new Error("Unknown prime "+A);e=new y}return w[A]=e,e},U.prototype._verify1=function(A){r(0===A.negative,"red works only with positives"),r(A.red,"red works only with red numbers")},U.prototype._verify2=function(A,e){r(0==(A.negative|e.negative),"red works only with positives"),r(A.red&&A.red===e.red,"red works only with red numbers")},U.prototype.imod=function(A){return this.prime?this.prime.ireduce(A)._forceRed(this):(c(A,A.umod(this.m)._forceRed(this)),A)},U.prototype.neg=function(A){return A.isZero()?A.clone():this.m.sub(A)._forceRed(this)},U.prototype.add=function(A,e){this._verify2(A,e);var t=A.add(e);return t.cmp(this.m)>=0&&t.isub(this.m),t._forceRed(this)},U.prototype.iadd=function(A,e){this._verify2(A,e);var t=A.iadd(e);return t.cmp(this.m)>=0&&t.isub(this.m),t},U.prototype.sub=function(A,e){this._verify2(A,e);var t=A.sub(e);return t.cmpn(0)<0&&t.iadd(this.m),t._forceRed(this)},U.prototype.isub=function(A,e){this._verify2(A,e);var t=A.isub(e);return t.cmpn(0)<0&&t.iadd(this.m),t},U.prototype.shl=function(A,e){return this._verify1(A),this.imod(A.ushln(e))},U.prototype.imul=function(A,e){return this._verify2(A,e),this.imod(A.imul(e))},U.prototype.mul=function(A,e){return this._verify2(A,e),this.imod(A.mul(e))},U.prototype.isqr=function(A){return this.imul(A,A.clone())},U.prototype.sqr=function(A){return this.mul(A,A)},U.prototype.sqrt=function(A){if(A.isZero())return A.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var t=this.m.add(new n(1)).iushrn(2);return this.pow(A,t)}for(var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);r(!i.isZero());var s=new n(1).toRed(this),a=s.redNeg(),l=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new n(2*c*c).toRed(this);0!==this.pow(c,l).cmp(a);)c.redIAdd(a);for(var g=this.pow(c,i),u=this.pow(A,i.addn(1).iushrn(1)),h=this.pow(A,i),E=o;0!==h.cmp(s);){for(var B=h,I=0;0!==B.cmp(s);I++)B=B.redSqr();r(I<E);var f=this.pow(g,new n(1).iushln(E-I-1));u=u.redMul(f),g=f.redSqr(),h=h.redMul(g),E=I}return u},U.prototype.invm=function(A){var e=A._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},U.prototype.pow=function(A,e){if(e.isZero())return new n(1).toRed(this);if(0===e.cmpn(1))return A.clone();var t=new Array(16);t[0]=new n(1).toRed(this),t[1]=A;for(var r=2;r<t.length;r++)t[r]=this.mul(t[r-1],A);var i=t[0],o=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var l=e.words[r],c=a-1;c>=0;c--){var g=l>>c&1;i!==t[0]&&(i=this.sqr(i)),0!==g||0!==o?(o<<=1,o|=g,(4==++s||0===r&&0===c)&&(i=this.mul(i,t[o]),s=0,o=0)):s=0}a=26}return i},U.prototype.convertTo=function(A){var e=A.umod(this.m);return e===A?e.clone():e},U.prototype.convertFrom=function(A){var e=A.clone();return e.red=null,e},n.mont=function(A){return new v(A)},i(v,U),v.prototype.convertTo=function(A){return this.imod(A.ushln(this.shift))},v.prototype.convertFrom=function(A){var e=this.imod(A.mul(this.rinv));return e.red=null,e},v.prototype.imul=function(A,e){if(A.isZero()||e.isZero())return A.words[0]=0,A.length=1,A;var t=A.imul(e),r=t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=t.isub(r).iushrn(this.shift),n=i;return i.cmp(this.m)>=0?n=i.isub(this.m):i.cmpn(0)<0&&(n=i.iadd(this.m)),n._forceRed(this)},v.prototype.mul=function(A,e){if(A.isZero()||e.isZero())return new n(0)._forceRed(this);var t=A.mul(e),r=t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=t.isub(r).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},v.prototype.invm=function(A){return this.imod(A._invmp(this.m).mul(this.r2))._forceRed(this)}}(A=t.nmd(A),this)},2222:(A,e,t)=>{"use strict";t.d(e,{Y0:()=>c,XL:()=>u,ZN:()=>g});var r=t(67640);const i=new(t(78011).Yd)("strings/5.7.0");var n,o;function s(A,e,t,r,i){if(A===o.BAD_PREFIX||A===o.UNEXPECTED_CONTINUE){let A=0;for(let r=e+1;r<t.length&&t[r]>>6==2;r++)A++;return A}return A===o.OVERRUN?t.length-e-1:0}!function(A){A.current="",A.NFC="NFC",A.NFD="NFD",A.NFKC="NFKC",A.NFKD="NFKD"}(n||(n={})),function(A){A.UNEXPECTED_CONTINUE="unexpected continuation byte",A.BAD_PREFIX="bad codepoint prefix",A.OVERRUN="string overrun",A.MISSING_CONTINUE="missing continuation byte",A.OUT_OF_RANGE="out of UTF-8 range",A.UTF16_SURROGATE="UTF-16 surrogate",A.OVERLONG="overlong representation"}(o||(o={}));const a=Object.freeze({error:function(A,e,t,r,n){return i.throwArgumentError(`invalid codepoint at offset ${e}; ${A}`,"bytes",t)},ignore:s,replace:function(A,e,t,r,i){return A===o.OVERLONG?(r.push(i),0):(r.push(65533),s(A,e,t))}});function l(A,e){null==e&&(e=a.error),A=(0,r.arrayify)(A);const t=[];let i=0;for(;i<A.length;){const r=A[i++];if(r>>7==0){t.push(r);continue}let n=null,s=null;if(192==(224&r))n=1,s=127;else if(224==(240&r))n=2,s=2047;else{if(240!=(248&r)){i+=e(128==(192&r)?o.UNEXPECTED_CONTINUE:o.BAD_PREFIX,i-1,A,t);continue}n=3,s=65535}if(i-1+n>=A.length){i+=e(o.OVERRUN,i-1,A,t);continue}let a=r&(1<<8-n-1)-1;for(let r=0;r<n;r++){let r=A[i];if(128!=(192&r)){i+=e(o.MISSING_CONTINUE,i,A,t),a=null;break}a=a<<6|63&r,i++}null!==a&&(a>1114111?i+=e(o.OUT_OF_RANGE,i-1-n,A,t,a):a>=55296&&a<=57343?i+=e(o.UTF16_SURROGATE,i-1-n,A,t,a):a<=s?i+=e(o.OVERLONG,i-1-n,A,t,a):t.push(a))}return t}function c(A,e=n.current){e!=n.current&&(i.checkNormalize(),A=A.normalize(e));let t=[];for(let e=0;e<A.length;e++){const r=A.charCodeAt(e);if(r<128)t.push(r);else if(r<2048)t.push(r>>6|192),t.push(63&r|128);else if(55296==(64512&r)){e++;const i=A.charCodeAt(e);if(e>=A.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const n=65536+((1023&r)<<10)+(1023&i);t.push(n>>18|240),t.push(n>>12&63|128),t.push(n>>6&63|128),t.push(63&n|128)}else t.push(r>>12|224),t.push(r>>6&63|128),t.push(63&r|128)}return(0,r.arrayify)(t)}function g(A,e){return l(A,e).map((A=>A<=65535?String.fromCharCode(A):(A-=65536,String.fromCharCode(55296+(A>>10&1023),56320+(1023&A))))).join("")}function u(A,e=n.current){return l(c(A,e))}},23006:(A,e,t)=>{"use strict";t.d(e,{i:()=>r});const r="transactions/5.7.0"},121:(A,e,t)=>{"use strict";t.d(e,{w:()=>o});var r=t(83669),i=t.n(r),n=t(67640);function o(A){return"0x"+i().keccak_256((0,n.arrayify)(A))}},37472:(A,e,t)=>{"use strict";t.r(e),t.d(e,{commify:()=>C,formatEther:()=>y,formatUnits:()=>Q,parseEther:()=>U,parseUnits:()=>R});var r=t(67640),i=t(78011),n=t(43495),o=t(10528);const s=new i.Yd(n.i),a={},l=o.O$.from(0),c=o.O$.from(-1);function g(A,e,t,r){const n={fault:e,operation:t};return void 0!==r&&(n.value=r),s.throwError(A,i.Yd.errors.NUMERIC_FAULT,n)}let u="0";for(;u.length<256;)u+=u;function h(A){if("number"!=typeof A)try{A=o.O$.from(A).toNumber()}catch(A){}return"number"==typeof A&&A>=0&&A<=256&&!(A%1)?"1"+u.substring(0,A):s.throwArgumentError("invalid decimal size","decimals",A)}function E(A,e){null==e&&(e=0);const t=h(e),r=(A=o.O$.from(A)).lt(l);r&&(A=A.mul(c));let i=A.mod(t).toString();for(;i.length<t.length-1;)i="0"+i;i=i.match(/^([0-9]*[1-9]|0)(0*)/)[1];const n=A.div(t).toString();return A=1===t.length?n:n+"."+i,r&&(A="-"+A),A}function B(A,e){null==e&&(e=0);const t=h(e);"string"==typeof A&&A.match(/^-?[0-9.]+$/)||s.throwArgumentError("invalid decimal value","value",A);const r="-"===A.substring(0,1);r&&(A=A.substring(1)),"."===A&&s.throwArgumentError("missing value","value",A);const i=A.split(".");i.length>2&&s.throwArgumentError("too many decimal points","value",A);let n=i[0],a=i[1];for(n||(n="0"),a||(a="0");"0"===a[a.length-1];)a=a.substring(0,a.length-1);for(a.length>t.length-1&&g("fractional component exceeds decimals","underflow","parseFixed"),""===a&&(a="0");a.length<t.length-1;)a+="0";const l=o.O$.from(n),u=o.O$.from(a);let E=l.mul(t).add(u);return r&&(E=E.mul(c)),E}class I{constructor(A,e,t,r){A!==a&&s.throwError("cannot use FixedFormat constructor; use FixedFormat.from",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=e,this.width=t,this.decimals=r,this.name=(e?"":"u")+"fixed"+String(t)+"x"+String(r),this._multiplier=h(r),Object.freeze(this)}static from(A){if(A instanceof I)return A;"number"==typeof A&&(A=`fixed128x${A}`);let e=!0,t=128,r=18;if("string"==typeof A)if("fixed"===A);else if("ufixed"===A)e=!1;else{const i=A.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);i||s.throwArgumentError("invalid fixed format","format",A),e="u"!==i[1],t=parseInt(i[2]),r=parseInt(i[3])}else if(A){const i=(e,t,r)=>null==A[e]?r:(typeof A[e]!==t&&s.throwArgumentError("invalid fixed format ("+e+" not "+t+")","format."+e,A[e]),A[e]);e=i("signed","boolean",e),t=i("width","number",t),r=i("decimals","number",r)}return t%8&&s.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",t),r>80&&s.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",r),new I(a,e,t,r)}}class f{constructor(A,e,t,r){A!==a&&s.throwError("cannot use FixedNumber constructor; use FixedNumber.from",i.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=r,this._hex=e,this._value=t,this._isFixedNumber=!0,Object.freeze(this)}_checkFormat(A){this.format.name!==A.format.name&&s.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",A)}addUnsafe(A){this._checkFormat(A);const e=B(this._value,this.format.decimals),t=B(A._value,A.format.decimals);return f.fromValue(e.add(t),this.format.decimals,this.format)}subUnsafe(A){this._checkFormat(A);const e=B(this._value,this.format.decimals),t=B(A._value,A.format.decimals);return f.fromValue(e.sub(t),this.format.decimals,this.format)}mulUnsafe(A){this._checkFormat(A);const e=B(this._value,this.format.decimals),t=B(A._value,A.format.decimals);return f.fromValue(e.mul(t).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(A){this._checkFormat(A);const e=B(this._value,this.format.decimals),t=B(A._value,A.format.decimals);return f.fromValue(e.mul(this.format._multiplier).div(t),this.format.decimals,this.format)}floor(){const A=this.toString().split(".");1===A.length&&A.push("0");let e=f.from(A[0],this.format);const t=!A[1].match(/^(0*)$/);return this.isNegative()&&t&&(e=e.subUnsafe(p.toFormat(e.format))),e}ceiling(){const A=this.toString().split(".");1===A.length&&A.push("0");let e=f.from(A[0],this.format);const t=!A[1].match(/^(0*)$/);return!this.isNegative()&&t&&(e=e.addUnsafe(p.toFormat(e.format))),e}round(A){null==A&&(A=0);const e=this.toString().split(".");if(1===e.length&&e.push("0"),(A<0||A>80||A%1)&&s.throwArgumentError("invalid decimal count","decimals",A),e[1].length<=A)return this;const t=f.from("1"+u.substring(0,A),this.format),r=d.toFormat(this.format);return this.mulUnsafe(t).addUnsafe(r).floor().divUnsafe(t)}isZero(){return"0.0"===this._value||"0"===this._value}isNegative(){return"-"===this._value[0]}toString(){return this._value}toHexString(A){if(null==A)return this._hex;A%8&&s.throwArgumentError("invalid byte width","width",A);const e=o.O$.from(this._hex).fromTwos(this.format.width).toTwos(A).toHexString();return(0,r.hexZeroPad)(e,A/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(A){return f.fromString(this._value,A)}static fromValue(A,e,t){return null!=t||null==e||(0,o.Zm)(e)||(t=e,e=null),null==e&&(e=0),null==t&&(t="fixed"),f.fromString(E(A,e),I.from(t))}static fromString(A,e){null==e&&(e="fixed");const t=I.from(e),i=B(A,t.decimals);!t.signed&&i.lt(l)&&g("unsigned value cannot be negative","overflow","value",A);let n=null;t.signed?n=i.toTwos(t.width).toHexString():(n=i.toHexString(),n=(0,r.hexZeroPad)(n,t.width/8));const o=E(i,t.decimals);return new f(a,n,o,t)}static fromBytes(A,e){null==e&&(e="fixed");const t=I.from(e);if((0,r.arrayify)(A).length>t.width/8)throw new Error("overflow");let i=o.O$.from(A);t.signed&&(i=i.fromTwos(t.width));const n=i.toTwos((t.signed?0:1)+t.width).toHexString(),s=E(i,t.decimals);return new f(a,n,s,t)}static from(A,e){if("string"==typeof A)return f.fromString(A,e);if((0,r.isBytes)(A))return f.fromBytes(A,e);try{return f.fromValue(A,0,e)}catch(A){if(A.code!==i.Yd.errors.INVALID_ARGUMENT)throw A}return s.throwArgumentError("invalid FixedNumber value","value",A)}static isFixedNumber(A){return!(!A||!A._isFixedNumber)}}const p=f.from(1),d=f.from("0.5"),w=new i.Yd("units/5.7.0"),m=["wei","kwei","mwei","gwei","szabo","finney","ether"];function C(A){const e=String(A).split(".");(e.length>2||!e[0].match(/^-?[0-9]*$/)||e[1]&&!e[1].match(/^[0-9]*$/)||"."===A||"-."===A)&&w.throwArgumentError("invalid value","value",A);let t=e[0],r="";for("-"===t.substring(0,1)&&(r="-",t=t.substring(1));"0"===t.substring(0,1);)t=t.substring(1);""===t&&(t="0");let i="";for(2===e.length&&(i="."+(e[1]||"0"));i.length>2&&"0"===i[i.length-1];)i=i.substring(0,i.length-1);const n=[];for(;t.length;){if(t.length<=3){n.unshift(t);break}{const A=t.length-3;n.unshift(t.substring(A)),t=t.substring(0,A)}}return r+n.join(",")+i}function Q(A,e){if("string"==typeof e){const A=m.indexOf(e);-1!==A&&(e=3*A)}return E(A,null!=e?e:18)}function R(A,e){if("string"!=typeof A&&w.throwArgumentError("value must be a string","value",A),"string"==typeof e){const A=m.indexOf(e);-1!==A&&(e=3*A)}return B(A,null!=e?e:18)}function y(A){return Q(A,18)}function U(A){return R(A,18)}},75413:(A,e,t)=>{"use strict";function r(A,e){var t=e&&e.cache?e.cache:c,r=e&&e.serializer?e.serializer:a;return(e&&e.strategy?e.strategy:s)(A,{cache:t,serializer:r})}function i(A,e,t,r){var i,n=null==(i=r)||"number"==typeof i||"boolean"==typeof i?r:t(r),o=e.get(n);return void 0===o&&(o=A.call(this,r),e.set(n,o)),o}function n(A,e,t){var r=Array.prototype.slice.call(arguments,3),i=t(r),n=e.get(i);return void 0===n&&(n=A.apply(this,r),e.set(i,n)),n}function o(A,e,t,r,i){return t.bind(e,A,r,i)}function s(A,e){return o(A,this,1===A.length?i:n,e.cache.create(),e.serializer)}t.d(e,{A:()=>g,Z:()=>r});var a=function(){return JSON.stringify(arguments)};function l(){this.cache=Object.create(null)}l.prototype.get=function(A){return this.cache[A]},l.prototype.set=function(A,e){this.cache[A]=e};var c={create:function(){return new l}},g={variadic:function(A,e){return o(A,this,n,e.cache.create(),e.serializer)},monadic:function(A,e){return o(A,this,i,e.cache.create(),e.serializer)}}},53753:(A,e,t)=>{"use strict";t.d(e,{wD:()=>i,VG:()=>a,rp:()=>c,Ii:()=>f,O4:()=>s,uf:()=>l,Wh:()=>I,Jo:()=>h,yx:()=>E,Wi:()=>u,HI:()=>B,pe:()=>g,Qc:()=>oA});var r,i,n,o=function(){return o=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},o.apply(this,arguments)};function s(A){return A.type===i.literal}function a(A){return A.type===i.argument}function l(A){return A.type===i.number}function c(A){return A.type===i.date}function g(A){return A.type===i.time}function u(A){return A.type===i.select}function h(A){return A.type===i.plural}function E(A){return A.type===i.pound}function B(A){return A.type===i.tag}function I(A){return!(!A||"object"!=typeof A||A.type!==n.number)}function f(A){return!(!A||"object"!=typeof A||A.type!==n.dateTime)}Object.create,Object.create,function(A){A[A.EXPECT_ARGUMENT_CLOSING_BRACE=1]="EXPECT_ARGUMENT_CLOSING_BRACE",A[A.EMPTY_ARGUMENT=2]="EMPTY_ARGUMENT",A[A.MALFORMED_ARGUMENT=3]="MALFORMED_ARGUMENT",A[A.EXPECT_ARGUMENT_TYPE=4]="EXPECT_ARGUMENT_TYPE",A[A.INVALID_ARGUMENT_TYPE=5]="INVALID_ARGUMENT_TYPE",A[A.EXPECT_ARGUMENT_STYLE=6]="EXPECT_ARGUMENT_STYLE",A[A.INVALID_NUMBER_SKELETON=7]="INVALID_NUMBER_SKELETON",A[A.INVALID_DATE_TIME_SKELETON=8]="INVALID_DATE_TIME_SKELETON",A[A.EXPECT_NUMBER_SKELETON=9]="EXPECT_NUMBER_SKELETON",A[A.EXPECT_DATE_TIME_SKELETON=10]="EXPECT_DATE_TIME_SKELETON",A[A.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE=11]="UNCLOSED_QUOTE_IN_ARGUMENT_STYLE",A[A.EXPECT_SELECT_ARGUMENT_OPTIONS=12]="EXPECT_SELECT_ARGUMENT_OPTIONS",A[A.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE=13]="EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE",A[A.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE=14]="INVALID_PLURAL_ARGUMENT_OFFSET_VALUE",A[A.EXPECT_SELECT_ARGUMENT_SELECTOR=15]="EXPECT_SELECT_ARGUMENT_SELECTOR",A[A.EXPECT_PLURAL_ARGUMENT_SELECTOR=16]="EXPECT_PLURAL_ARGUMENT_SELECTOR",A[A.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT=17]="EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT",A[A.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT=18]="EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT",A[A.INVALID_PLURAL_ARGUMENT_SELECTOR=19]="INVALID_PLURAL_ARGUMENT_SELECTOR",A[A.DUPLICATE_PLURAL_ARGUMENT_SELECTOR=20]="DUPLICATE_PLURAL_ARGUMENT_SELECTOR",A[A.DUPLICATE_SELECT_ARGUMENT_SELECTOR=21]="DUPLICATE_SELECT_ARGUMENT_SELECTOR",A[A.MISSING_OTHER_CLAUSE=22]="MISSING_OTHER_CLAUSE",A[A.INVALID_TAG=23]="INVALID_TAG",A[A.INVALID_TAG_NAME=25]="INVALID_TAG_NAME",A[A.UNMATCHED_CLOSING_TAG=26]="UNMATCHED_CLOSING_TAG",A[A.UNCLOSED_TAG=27]="UNCLOSED_TAG"}(r||(r={})),function(A){A[A.literal=0]="literal",A[A.argument=1]="argument",A[A.number=2]="number",A[A.date=3]="date",A[A.time=4]="time",A[A.select=5]="select",A[A.plural=6]="plural",A[A.pound=7]="pound",A[A.tag=8]="tag"}(i||(i={})),function(A){A[A.number=0]="number",A[A.dateTime=1]="dateTime"}(n||(n={}));var p=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,d=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function w(A){var e={};return A.replace(d,(function(A){var t=A.length;switch(A[0]){case"G":e.era=4===t?"long":5===t?"narrow":"short";break;case"y":e.year=2===t?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":e.month=["numeric","2-digit","short","long","narrow"][t-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":e.day=["numeric","2-digit"][t-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":e.weekday=4===t?"short":5===t?"narrow":"short";break;case"e":if(t<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");e.weekday=["short","long","narrow","short"][t-4];break;case"c":if(t<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");e.weekday=["short","long","narrow","short"][t-4];break;case"a":e.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":e.hourCycle="h12",e.hour=["numeric","2-digit"][t-1];break;case"H":e.hourCycle="h23",e.hour=["numeric","2-digit"][t-1];break;case"K":e.hourCycle="h11",e.hour=["numeric","2-digit"][t-1];break;case"k":e.hourCycle="h24",e.hour=["numeric","2-digit"][t-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":e.minute=["numeric","2-digit"][t-1];break;case"s":e.second=["numeric","2-digit"][t-1];break;case"S":case"A":throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");case"z":e.timeZoneName=t<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead")}return""})),e}var m=function(){return m=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},m.apply(this,arguments)};Object.create,Object.create;var C=/[\t-\r \x85\u200E\u200F\u2028\u2029]/i,Q=/^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g,R=/^(@+)?(\+|#+)?[rs]?$/g,y=/(\*)(0+)|(#+)(0+)|(0+)/g,U=/^(0+)$/;function v(A){var e={};return"r"===A[A.length-1]?e.roundingPriority="morePrecision":"s"===A[A.length-1]&&(e.roundingPriority="lessPrecision"),A.replace(R,(function(A,t,r){return"string"!=typeof r?(e.minimumSignificantDigits=t.length,e.maximumSignificantDigits=t.length):"+"===r?e.minimumSignificantDigits=t.length:"#"===t[0]?e.maximumSignificantDigits=t.length:(e.minimumSignificantDigits=t.length,e.maximumSignificantDigits=t.length+("string"==typeof r?r.length:0)),""})),e}function M(A){switch(A){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":case"()":return{currencySign:"accounting"};case"sign-always":case"+!":return{signDisplay:"always"};case"sign-accounting-always":case"()!":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":case"+?":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":case"()?":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":case"+_":return{signDisplay:"never"}}}function T(A){var e;if("E"===A[0]&&"E"===A[1]?(e={notation:"engineering"},A=A.slice(2)):"E"===A[0]&&(e={notation:"scientific"},A=A.slice(1)),e){var t=A.slice(0,2);if("+!"===t?(e.signDisplay="always",A=A.slice(2)):"+?"===t&&(e.signDisplay="exceptZero",A=A.slice(2)),!U.test(A))throw new Error("Malformed concise eng/scientific notation");e.minimumIntegerDigits=A.length}return e}function b(A){return M(A)||{}}function S(A){for(var e={},t=0,r=A;t<r.length;t++){var i=r[t];switch(i.stem){case"percent":case"%":e.style="percent";continue;case"%x100":e.style="percent",e.scale=100;continue;case"currency":e.style="currency",e.currency=i.options[0];continue;case"group-off":case",_":e.useGrouping=!1;continue;case"precision-integer":case".":e.maximumFractionDigits=0;continue;case"measure-unit":case"unit":e.style="unit",e.unit=i.options[0].replace(/^(.*?)-/,"");continue;case"compact-short":case"K":e.notation="compact",e.compactDisplay="short";continue;case"compact-long":case"KK":e.notation="compact",e.compactDisplay="long";continue;case"scientific":e=m(m(m({},e),{notation:"scientific"}),i.options.reduce((function(A,e){return m(m({},A),b(e))}),{}));continue;case"engineering":e=m(m(m({},e),{notation:"engineering"}),i.options.reduce((function(A,e){return m(m({},A),b(e))}),{}));continue;case"notation-simple":e.notation="standard";continue;case"unit-width-narrow":e.currencyDisplay="narrowSymbol",e.unitDisplay="narrow";continue;case"unit-width-short":e.currencyDisplay="code",e.unitDisplay="short";continue;case"unit-width-full-name":e.currencyDisplay="name",e.unitDisplay="long";continue;case"unit-width-iso-code":e.currencyDisplay="symbol";continue;case"scale":e.scale=parseFloat(i.options[0]);continue;case"integer-width":if(i.options.length>1)throw new RangeError("integer-width stems only accept a single optional option");i.options[0].replace(y,(function(A,t,r,i,n,o){if(t)e.minimumIntegerDigits=r.length;else{if(i&&n)throw new Error("We currently do not support maximum integer digits");if(o)throw new Error("We currently do not support exact integer digits")}return""}));continue}if(U.test(i.stem))e.minimumIntegerDigits=i.stem.length;else if(Q.test(i.stem)){if(i.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");i.stem.replace(Q,(function(A,t,r,i,n,o){return"*"===r?e.minimumFractionDigits=t.length:i&&"#"===i[0]?e.maximumFractionDigits=i.length:n&&o?(e.minimumFractionDigits=n.length,e.maximumFractionDigits=n.length+o.length):(e.minimumFractionDigits=t.length,e.maximumFractionDigits=t.length),""}));var n=i.options[0];"w"===n?e=m(m({},e),{trailingZeroDisplay:"stripIfInteger"}):n&&(e=m(m({},e),v(n)))}else if(R.test(i.stem))e=m(m({},e),v(i.stem));else{var o=M(i.stem);o&&(e=m(m({},e),o));var s=T(i.stem);s&&(e=m(m({},e),s))}}return e}var F,D={AX:["H"],BQ:["H"],CP:["H"],CZ:["H"],DK:["H"],FI:["H"],ID:["H"],IS:["H"],ML:["H"],NE:["H"],RU:["H"],SE:["H"],SJ:["H"],SK:["H"],AS:["h","H"],BT:["h","H"],DJ:["h","H"],ER:["h","H"],GH:["h","H"],IN:["h","H"],LS:["h","H"],PG:["h","H"],PW:["h","H"],SO:["h","H"],TO:["h","H"],VU:["h","H"],WS:["h","H"],"001":["H","h"],AL:["h","H","hB"],TD:["h","H","hB"],"ca-ES":["H","h","hB"],CF:["H","h","hB"],CM:["H","h","hB"],"fr-CA":["H","h","hB"],"gl-ES":["H","h","hB"],"it-CH":["H","h","hB"],"it-IT":["H","h","hB"],LU:["H","h","hB"],NP:["H","h","hB"],PF:["H","h","hB"],SC:["H","h","hB"],SM:["H","h","hB"],SN:["H","h","hB"],TF:["H","h","hB"],VA:["H","h","hB"],CY:["h","H","hb","hB"],GR:["h","H","hb","hB"],CO:["h","H","hB","hb"],DO:["h","H","hB","hb"],KP:["h","H","hB","hb"],KR:["h","H","hB","hb"],NA:["h","H","hB","hb"],PA:["h","H","hB","hb"],PR:["h","H","hB","hb"],VE:["h","H","hB","hb"],AC:["H","h","hb","hB"],AI:["H","h","hb","hB"],BW:["H","h","hb","hB"],BZ:["H","h","hb","hB"],CC:["H","h","hb","hB"],CK:["H","h","hb","hB"],CX:["H","h","hb","hB"],DG:["H","h","hb","hB"],FK:["H","h","hb","hB"],GB:["H","h","hb","hB"],GG:["H","h","hb","hB"],GI:["H","h","hb","hB"],IE:["H","h","hb","hB"],IM:["H","h","hb","hB"],IO:["H","h","hb","hB"],JE:["H","h","hb","hB"],LT:["H","h","hb","hB"],MK:["H","h","hb","hB"],MN:["H","h","hb","hB"],MS:["H","h","hb","hB"],NF:["H","h","hb","hB"],NG:["H","h","hb","hB"],NR:["H","h","hb","hB"],NU:["H","h","hb","hB"],PN:["H","h","hb","hB"],SH:["H","h","hb","hB"],SX:["H","h","hb","hB"],TA:["H","h","hb","hB"],ZA:["H","h","hb","hB"],"af-ZA":["H","h","hB","hb"],AR:["H","h","hB","hb"],CL:["H","h","hB","hb"],CR:["H","h","hB","hb"],CU:["H","h","hB","hb"],EA:["H","h","hB","hb"],"es-BO":["H","h","hB","hb"],"es-BR":["H","h","hB","hb"],"es-EC":["H","h","hB","hb"],"es-ES":["H","h","hB","hb"],"es-GQ":["H","h","hB","hb"],"es-PE":["H","h","hB","hb"],GT:["H","h","hB","hb"],HN:["H","h","hB","hb"],IC:["H","h","hB","hb"],KG:["H","h","hB","hb"],KM:["H","h","hB","hb"],LK:["H","h","hB","hb"],MA:["H","h","hB","hb"],MX:["H","h","hB","hb"],NI:["H","h","hB","hb"],PY:["H","h","hB","hb"],SV:["H","h","hB","hb"],UY:["H","h","hB","hb"],JP:["H","h","K"],AD:["H","hB"],AM:["H","hB"],AO:["H","hB"],AT:["H","hB"],AW:["H","hB"],BE:["H","hB"],BF:["H","hB"],BJ:["H","hB"],BL:["H","hB"],BR:["H","hB"],CG:["H","hB"],CI:["H","hB"],CV:["H","hB"],DE:["H","hB"],EE:["H","hB"],FR:["H","hB"],GA:["H","hB"],GF:["H","hB"],GN:["H","hB"],GP:["H","hB"],GW:["H","hB"],HR:["H","hB"],IL:["H","hB"],IT:["H","hB"],KZ:["H","hB"],MC:["H","hB"],MD:["H","hB"],MF:["H","hB"],MQ:["H","hB"],MZ:["H","hB"],NC:["H","hB"],NL:["H","hB"],PM:["H","hB"],PT:["H","hB"],RE:["H","hB"],RO:["H","hB"],SI:["H","hB"],SR:["H","hB"],ST:["H","hB"],TG:["H","hB"],TR:["H","hB"],WF:["H","hB"],YT:["H","hB"],BD:["h","hB","H"],PK:["h","hB","H"],AZ:["H","hB","h"],BA:["H","hB","h"],BG:["H","hB","h"],CH:["H","hB","h"],GE:["H","hB","h"],LI:["H","hB","h"],ME:["H","hB","h"],RS:["H","hB","h"],UA:["H","hB","h"],UZ:["H","hB","h"],XK:["H","hB","h"],AG:["h","hb","H","hB"],AU:["h","hb","H","hB"],BB:["h","hb","H","hB"],BM:["h","hb","H","hB"],BS:["h","hb","H","hB"],CA:["h","hb","H","hB"],DM:["h","hb","H","hB"],"en-001":["h","hb","H","hB"],FJ:["h","hb","H","hB"],FM:["h","hb","H","hB"],GD:["h","hb","H","hB"],GM:["h","hb","H","hB"],GU:["h","hb","H","hB"],GY:["h","hb","H","hB"],JM:["h","hb","H","hB"],KI:["h","hb","H","hB"],KN:["h","hb","H","hB"],KY:["h","hb","H","hB"],LC:["h","hb","H","hB"],LR:["h","hb","H","hB"],MH:["h","hb","H","hB"],MP:["h","hb","H","hB"],MW:["h","hb","H","hB"],NZ:["h","hb","H","hB"],SB:["h","hb","H","hB"],SG:["h","hb","H","hB"],SL:["h","hb","H","hB"],SS:["h","hb","H","hB"],SZ:["h","hb","H","hB"],TC:["h","hb","H","hB"],TT:["h","hb","H","hB"],UM:["h","hb","H","hB"],US:["h","hb","H","hB"],VC:["h","hb","H","hB"],VG:["h","hb","H","hB"],VI:["h","hb","H","hB"],ZM:["h","hb","H","hB"],BO:["H","hB","h","hb"],EC:["H","hB","h","hb"],ES:["H","hB","h","hb"],GQ:["H","hB","h","hb"],PE:["H","hB","h","hb"],AE:["h","hB","hb","H"],"ar-001":["h","hB","hb","H"],BH:["h","hB","hb","H"],DZ:["h","hB","hb","H"],EG:["h","hB","hb","H"],EH:["h","hB","hb","H"],HK:["h","hB","hb","H"],IQ:["h","hB","hb","H"],JO:["h","hB","hb","H"],KW:["h","hB","hb","H"],LB:["h","hB","hb","H"],LY:["h","hB","hb","H"],MO:["h","hB","hb","H"],MR:["h","hB","hb","H"],OM:["h","hB","hb","H"],PH:["h","hB","hb","H"],PS:["h","hB","hb","H"],QA:["h","hB","hb","H"],SA:["h","hB","hb","H"],SD:["h","hB","hb","H"],SY:["h","hB","hb","H"],TN:["h","hB","hb","H"],YE:["h","hB","hb","H"],AF:["H","hb","hB","h"],LA:["H","hb","hB","h"],CN:["H","hB","hb","h"],LV:["H","hB","hb","h"],TL:["H","hB","hb","h"],"zu-ZA":["H","hB","hb","h"],CD:["hB","H"],IR:["hB","H"],"hi-IN":["hB","h","H"],"kn-IN":["hB","h","H"],"ml-IN":["hB","h","H"],"te-IN":["hB","h","H"],KH:["hB","h","H","hb"],"ta-IN":["hB","h","hb","H"],BN:["hb","hB","h","H"],MY:["hb","hB","h","H"],ET:["hB","hb","h","H"],"gu-IN":["hB","hb","h","H"],"mr-IN":["hB","hb","h","H"],"pa-IN":["hB","hb","h","H"],TW:["hB","hb","h","H"],KE:["hB","hb","H","h"],MM:["hB","hb","H","h"],TZ:["hB","hb","H","h"],UG:["hB","hb","H","h"]};function N(A){var e=A.hourCycle;if(void 0===e&&A.hourCycles&&A.hourCycles.length&&(e=A.hourCycles[0]),e)switch(e){case"h24":return"k";case"h23":return"H";case"h12":return"h";case"h11":return"K";default:throw new Error("Invalid hourCycle")}var t,r=A.language;return"root"!==r&&(t=A.maximize().region),(D[t||""]||D[r||""]||D["".concat(r,"-001")]||D["001"])[0]}var G=new RegExp("^".concat(p.source,"*")),V=new RegExp("".concat(p.source,"*$"));function k(A,e){return{start:A,end:e}}var O=!!String.prototype.startsWith,x=!!String.fromCodePoint,Z=!!Object.fromEntries,J=!!String.prototype.codePointAt,P=!!String.prototype.trimStart,Y=!!String.prototype.trimEnd,H=Number.isSafeInteger?Number.isSafeInteger:function(A){return"number"==typeof A&&isFinite(A)&&Math.floor(A)===A&&Math.abs(A)<=9007199254740991},L=!0;try{L="a"===(null===(F=$("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu").exec("a"))||void 0===F?void 0:F[0])}catch(A){L=!1}var j,W=O?function(A,e,t){return A.startsWith(e,t)}:function(A,e,t){return A.slice(t,t+e.length)===e},z=x?String.fromCodePoint:function(){for(var A=[],e=0;e<arguments.length;e++)A[e]=arguments[e];for(var t,r="",i=A.length,n=0;i>n;){if((t=A[n++])>1114111)throw RangeError(t+" is not a valid code point");r+=t<65536?String.fromCharCode(t):String.fromCharCode(55296+((t-=65536)>>10),t%1024+56320)}return r},K=Z?Object.fromEntries:function(A){for(var e={},t=0,r=A;t<r.length;t++){var i=r[t],n=i[0],o=i[1];e[n]=o}return e},q=J?function(A,e){return A.codePointAt(e)}:function(A,e){var t=A.length;if(!(e<0||e>=t)){var r,i=A.charCodeAt(e);return i<55296||i>56319||e+1===t||(r=A.charCodeAt(e+1))<56320||r>57343?i:r-56320+(i-55296<<10)+65536}},X=P?function(A){return A.trimStart()}:function(A){return A.replace(G,"")},_=Y?function(A){return A.trimEnd()}:function(A){return A.replace(V,"")};function $(A,e){return new RegExp(A,e)}if(L){var AA=$("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");j=function(A,e){var t;return AA.lastIndex=e,null!==(t=AA.exec(A)[1])&&void 0!==t?t:""}}else j=function(A,e){for(var t=[];;){var r=q(A,e);if(void 0===r||rA(r)||iA(r))break;t.push(r),e+=r>=65536?2:1}return z.apply(void 0,t)};var eA=function(){function A(A,e){void 0===e&&(e={}),this.message=A,this.position={offset:0,line:1,column:1},this.ignoreTag=!!e.ignoreTag,this.locale=e.locale,this.requiresOtherClause=!!e.requiresOtherClause,this.shouldParseSkeletons=!!e.shouldParseSkeletons}return A.prototype.parse=function(){if(0!==this.offset())throw Error("parser can only be used once");return this.parseMessage(0,"",!1)},A.prototype.parseMessage=function(A,e,t){for(var n=[];!this.isEOF();){var o=this.char();if(123===o){if((s=this.parseArgument(A,t)).err)return s;n.push(s.val)}else{if(125===o&&A>0)break;if(35!==o||"plural"!==e&&"selectordinal"!==e){if(60===o&&!this.ignoreTag&&47===this.peek()){if(t)break;return this.error(r.UNMATCHED_CLOSING_TAG,k(this.clonePosition(),this.clonePosition()))}if(60===o&&!this.ignoreTag&&tA(this.peek()||0)){if((s=this.parseTag(A,e)).err)return s;n.push(s.val)}else{var s;if((s=this.parseLiteral(A,e)).err)return s;n.push(s.val)}}else{var a=this.clonePosition();this.bump(),n.push({type:i.pound,location:k(a,this.clonePosition())})}}}return{val:n,err:null}},A.prototype.parseTag=function(A,e){var t=this.clonePosition();this.bump();var n=this.parseTagName();if(this.bumpSpace(),this.bumpIf("/>"))return{val:{type:i.literal,value:"<".concat(n,"/>"),location:k(t,this.clonePosition())},err:null};if(this.bumpIf(">")){var o=this.parseMessage(A+1,e,!0);if(o.err)return o;var s=o.val,a=this.clonePosition();if(this.bumpIf("</")){if(this.isEOF()||!tA(this.char()))return this.error(r.INVALID_TAG,k(a,this.clonePosition()));var l=this.clonePosition();return n!==this.parseTagName()?this.error(r.UNMATCHED_CLOSING_TAG,k(l,this.clonePosition())):(this.bumpSpace(),this.bumpIf(">")?{val:{type:i.tag,value:n,children:s,location:k(t,this.clonePosition())},err:null}:this.error(r.INVALID_TAG,k(a,this.clonePosition())))}return this.error(r.UNCLOSED_TAG,k(t,this.clonePosition()))}return this.error(r.INVALID_TAG,k(t,this.clonePosition()))},A.prototype.parseTagName=function(){var A,e=this.offset();for(this.bump();!this.isEOF()&&(45===(A=this.char())||46===A||A>=48&&A<=57||95===A||A>=97&&A<=122||A>=65&&A<=90||183==A||A>=192&&A<=214||A>=216&&A<=246||A>=248&&A<=893||A>=895&&A<=8191||A>=8204&&A<=8205||A>=8255&&A<=8256||A>=8304&&A<=8591||A>=11264&&A<=12271||A>=12289&&A<=55295||A>=63744&&A<=64975||A>=65008&&A<=65533||A>=65536&&A<=983039);)this.bump();return this.message.slice(e,this.offset())},A.prototype.parseLiteral=function(A,e){for(var t=this.clonePosition(),r="";;){var n=this.tryParseQuote(e);if(n)r+=n;else{var o=this.tryParseUnquoted(A,e);if(o)r+=o;else{var s=this.tryParseLeftAngleBracket();if(!s)break;r+=s}}}var a=k(t,this.clonePosition());return{val:{type:i.literal,value:r,location:a},err:null}},A.prototype.tryParseLeftAngleBracket=function(){return this.isEOF()||60!==this.char()||!this.ignoreTag&&(tA(A=this.peek()||0)||47===A)?null:(this.bump(),"<");var A},A.prototype.tryParseQuote=function(A){if(this.isEOF()||39!==this.char())return null;switch(this.peek()){case 39:return this.bump(),this.bump(),"'";case 123:case 60:case 62:case 125:break;case 35:if("plural"===A||"selectordinal"===A)break;return null;default:return null}this.bump();var e=[this.char()];for(this.bump();!this.isEOF();){var t=this.char();if(39===t){if(39!==this.peek()){this.bump();break}e.push(39),this.bump()}else e.push(t);this.bump()}return z.apply(void 0,e)},A.prototype.tryParseUnquoted=function(A,e){if(this.isEOF())return null;var t=this.char();return 60===t||123===t||35===t&&("plural"===e||"selectordinal"===e)||125===t&&A>0?null:(this.bump(),z(t))},A.prototype.parseArgument=function(A,e){var t=this.clonePosition();if(this.bump(),this.bumpSpace(),this.isEOF())return this.error(r.EXPECT_ARGUMENT_CLOSING_BRACE,k(t,this.clonePosition()));if(125===this.char())return this.bump(),this.error(r.EMPTY_ARGUMENT,k(t,this.clonePosition()));var n=this.parseIdentifierIfPossible().value;if(!n)return this.error(r.MALFORMED_ARGUMENT,k(t,this.clonePosition()));if(this.bumpSpace(),this.isEOF())return this.error(r.EXPECT_ARGUMENT_CLOSING_BRACE,k(t,this.clonePosition()));switch(this.char()){case 125:return this.bump(),{val:{type:i.argument,value:n,location:k(t,this.clonePosition())},err:null};case 44:return this.bump(),this.bumpSpace(),this.isEOF()?this.error(r.EXPECT_ARGUMENT_CLOSING_BRACE,k(t,this.clonePosition())):this.parseArgumentOptions(A,e,n,t);default:return this.error(r.MALFORMED_ARGUMENT,k(t,this.clonePosition()))}},A.prototype.parseIdentifierIfPossible=function(){var A=this.clonePosition(),e=this.offset(),t=j(this.message,e),r=e+t.length;return this.bumpTo(r),{value:t,location:k(A,this.clonePosition())}},A.prototype.parseArgumentOptions=function(A,e,t,s){var a,l=this.clonePosition(),c=this.parseIdentifierIfPossible().value,g=this.clonePosition();switch(c){case"":return this.error(r.EXPECT_ARGUMENT_TYPE,k(l,g));case"number":case"date":case"time":this.bumpSpace();var u=null;if(this.bumpIf(",")){this.bumpSpace();var h=this.clonePosition();if((C=this.parseSimpleArgStyleIfPossible()).err)return C;if(0===(f=_(C.val)).length)return this.error(r.EXPECT_ARGUMENT_STYLE,k(this.clonePosition(),this.clonePosition()));u={style:f,styleLocation:k(h,this.clonePosition())}}if((Q=this.tryParseArgumentClose(s)).err)return Q;var E=k(s,this.clonePosition());if(u&&W(null==u?void 0:u.style,"::",0)){var B=X(u.style.slice(2));if("number"===c)return(C=this.parseNumberSkeletonFromString(B,u.styleLocation)).err?C:{val:{type:i.number,value:t,location:E,style:C.val},err:null};if(0===B.length)return this.error(r.EXPECT_DATE_TIME_SKELETON,E);var I=B;this.locale&&(I=function(A,e){for(var t="",r=0;r<A.length;r++){var i=A.charAt(r);if("j"===i){for(var n=0;r+1<A.length&&A.charAt(r+1)===i;)n++,r++;var o=1+(1&n),s=n<2?1:3+(n>>1),a=N(e);for("H"!=a&&"k"!=a||(s=0);s-- >0;)t+="a";for(;o-- >0;)t=a+t}else t+="J"===i?"H":i}return t}(B,this.locale));var f={type:n.dateTime,pattern:I,location:u.styleLocation,parsedOptions:this.shouldParseSkeletons?w(I):{}};return{val:{type:"date"===c?i.date:i.time,value:t,location:E,style:f},err:null}}return{val:{type:"number"===c?i.number:"date"===c?i.date:i.time,value:t,location:E,style:null!==(a=null==u?void 0:u.style)&&void 0!==a?a:null},err:null};case"plural":case"selectordinal":case"select":var p=this.clonePosition();if(this.bumpSpace(),!this.bumpIf(","))return this.error(r.EXPECT_SELECT_ARGUMENT_OPTIONS,k(p,o({},p)));this.bumpSpace();var d=this.parseIdentifierIfPossible(),m=0;if("select"!==c&&"offset"===d.value){if(!this.bumpIf(":"))return this.error(r.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,k(this.clonePosition(),this.clonePosition()));var C;if(this.bumpSpace(),(C=this.tryParseDecimalInteger(r.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,r.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE)).err)return C;this.bumpSpace(),d=this.parseIdentifierIfPossible(),m=C.val}var Q,R=this.tryParsePluralOrSelectOptions(A,c,e,d);if(R.err)return R;if((Q=this.tryParseArgumentClose(s)).err)return Q;var y=k(s,this.clonePosition());return"select"===c?{val:{type:i.select,value:t,options:K(R.val),location:y},err:null}:{val:{type:i.plural,value:t,options:K(R.val),offset:m,pluralType:"plural"===c?"cardinal":"ordinal",location:y},err:null};default:return this.error(r.INVALID_ARGUMENT_TYPE,k(l,g))}},A.prototype.tryParseArgumentClose=function(A){return this.isEOF()||125!==this.char()?this.error(r.EXPECT_ARGUMENT_CLOSING_BRACE,k(A,this.clonePosition())):(this.bump(),{val:!0,err:null})},A.prototype.parseSimpleArgStyleIfPossible=function(){for(var A=0,e=this.clonePosition();!this.isEOF();)switch(this.char()){case 39:this.bump();var t=this.clonePosition();if(!this.bumpUntil("'"))return this.error(r.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,k(t,this.clonePosition()));this.bump();break;case 123:A+=1,this.bump();break;case 125:if(!(A>0))return{val:this.message.slice(e.offset,this.offset()),err:null};A-=1;break;default:this.bump()}return{val:this.message.slice(e.offset,this.offset()),err:null}},A.prototype.parseNumberSkeletonFromString=function(A,e){var t=[];try{t=function(A){if(0===A.length)throw new Error("Number skeleton cannot be empty");for(var e=[],t=0,r=A.split(C).filter((function(A){return A.length>0}));t<r.length;t++){var i=r[t].split("/");if(0===i.length)throw new Error("Invalid number skeleton");for(var n=i[0],o=i.slice(1),s=0,a=o;s<a.length;s++)if(0===a[s].length)throw new Error("Invalid number skeleton");e.push({stem:n,options:o})}return e}(A)}catch(A){return this.error(r.INVALID_NUMBER_SKELETON,e)}return{val:{type:n.number,tokens:t,location:e,parsedOptions:this.shouldParseSkeletons?S(t):{}},err:null}},A.prototype.tryParsePluralOrSelectOptions=function(A,e,t,i){for(var n,o=!1,s=[],a=new Set,l=i.value,c=i.location;;){if(0===l.length){var g=this.clonePosition();if("select"===e||!this.bumpIf("="))break;var u=this.tryParseDecimalInteger(r.EXPECT_PLURAL_ARGUMENT_SELECTOR,r.INVALID_PLURAL_ARGUMENT_SELECTOR);if(u.err)return u;c=k(g,this.clonePosition()),l=this.message.slice(g.offset,this.offset())}if(a.has(l))return this.error("select"===e?r.DUPLICATE_SELECT_ARGUMENT_SELECTOR:r.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,c);"other"===l&&(o=!0),this.bumpSpace();var h=this.clonePosition();if(!this.bumpIf("{"))return this.error("select"===e?r.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT:r.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,k(this.clonePosition(),this.clonePosition()));var E=this.parseMessage(A+1,e,t);if(E.err)return E;var B=this.tryParseArgumentClose(h);if(B.err)return B;s.push([l,{value:E.val,location:k(h,this.clonePosition())}]),a.add(l),this.bumpSpace(),l=(n=this.parseIdentifierIfPossible()).value,c=n.location}return 0===s.length?this.error("select"===e?r.EXPECT_SELECT_ARGUMENT_SELECTOR:r.EXPECT_PLURAL_ARGUMENT_SELECTOR,k(this.clonePosition(),this.clonePosition())):this.requiresOtherClause&&!o?this.error(r.MISSING_OTHER_CLAUSE,k(this.clonePosition(),this.clonePosition())):{val:s,err:null}},A.prototype.tryParseDecimalInteger=function(A,e){var t=1,r=this.clonePosition();this.bumpIf("+")||this.bumpIf("-")&&(t=-1);for(var i=!1,n=0;!this.isEOF();){var o=this.char();if(!(o>=48&&o<=57))break;i=!0,n=10*n+(o-48),this.bump()}var s=k(r,this.clonePosition());return i?H(n*=t)?{val:n,err:null}:this.error(e,s):this.error(A,s)},A.prototype.offset=function(){return this.position.offset},A.prototype.isEOF=function(){return this.offset()===this.message.length},A.prototype.clonePosition=function(){return{offset:this.position.offset,line:this.position.line,column:this.position.column}},A.prototype.char=function(){var A=this.position.offset;if(A>=this.message.length)throw Error("out of bound");var e=q(this.message,A);if(void 0===e)throw Error("Offset ".concat(A," is at invalid UTF-16 code unit boundary"));return e},A.prototype.error=function(A,e){return{val:null,err:{kind:A,message:this.message,location:e}}},A.prototype.bump=function(){if(!this.isEOF()){var A=this.char();10===A?(this.position.line+=1,this.position.column=1,this.position.offset+=1):(this.position.column+=1,this.position.offset+=A<65536?1:2)}},A.prototype.bumpIf=function(A){if(W(this.message,A,this.offset())){for(var e=0;e<A.length;e++)this.bump();return!0}return!1},A.prototype.bumpUntil=function(A){var e=this.offset(),t=this.message.indexOf(A,e);return t>=0?(this.bumpTo(t),!0):(this.bumpTo(this.message.length),!1)},A.prototype.bumpTo=function(A){if(this.offset()>A)throw Error("targetOffset ".concat(A," must be greater than or equal to the current offset ").concat(this.offset()));for(A=Math.min(A,this.message.length);;){var e=this.offset();if(e===A)break;if(e>A)throw Error("targetOffset ".concat(A," is at invalid UTF-16 code unit boundary"));if(this.bump(),this.isEOF())break}},A.prototype.bumpSpace=function(){for(;!this.isEOF()&&rA(this.char());)this.bump()},A.prototype.peek=function(){if(this.isEOF())return null;var A=this.char(),e=this.offset(),t=this.message.charCodeAt(e+(A>=65536?2:1));return null!=t?t:null},A}();function tA(A){return A>=97&&A<=122||A>=65&&A<=90}function rA(A){return A>=9&&A<=13||32===A||133===A||A>=8206&&A<=8207||8232===A||8233===A}function iA(A){return A>=33&&A<=35||36===A||A>=37&&A<=39||40===A||41===A||42===A||43===A||44===A||45===A||A>=46&&A<=47||A>=58&&A<=59||A>=60&&A<=62||A>=63&&A<=64||91===A||92===A||93===A||94===A||96===A||123===A||124===A||125===A||126===A||161===A||A>=162&&A<=165||166===A||167===A||169===A||171===A||172===A||174===A||176===A||177===A||182===A||187===A||191===A||215===A||247===A||A>=8208&&A<=8213||A>=8214&&A<=8215||8216===A||8217===A||8218===A||A>=8219&&A<=8220||8221===A||8222===A||8223===A||A>=8224&&A<=8231||A>=8240&&A<=8248||8249===A||8250===A||A>=8251&&A<=8254||A>=8257&&A<=8259||8260===A||8261===A||8262===A||A>=8263&&A<=8273||8274===A||8275===A||A>=8277&&A<=8286||A>=8592&&A<=8596||A>=8597&&A<=8601||A>=8602&&A<=8603||A>=8604&&A<=8607||8608===A||A>=8609&&A<=8610||8611===A||A>=8612&&A<=8613||8614===A||A>=8615&&A<=8621||8622===A||A>=8623&&A<=8653||A>=8654&&A<=8655||A>=8656&&A<=8657||8658===A||8659===A||8660===A||A>=8661&&A<=8691||A>=8692&&A<=8959||A>=8960&&A<=8967||8968===A||8969===A||8970===A||8971===A||A>=8972&&A<=8991||A>=8992&&A<=8993||A>=8994&&A<=9e3||9001===A||9002===A||A>=9003&&A<=9083||9084===A||A>=9085&&A<=9114||A>=9115&&A<=9139||A>=9140&&A<=9179||A>=9180&&A<=9185||A>=9186&&A<=9254||A>=9255&&A<=9279||A>=9280&&A<=9290||A>=9291&&A<=9311||A>=9472&&A<=9654||9655===A||A>=9656&&A<=9664||9665===A||A>=9666&&A<=9719||A>=9720&&A<=9727||A>=9728&&A<=9838||9839===A||A>=9840&&A<=10087||10088===A||10089===A||10090===A||10091===A||10092===A||10093===A||10094===A||10095===A||10096===A||10097===A||10098===A||10099===A||10100===A||10101===A||A>=10132&&A<=10175||A>=10176&&A<=10180||10181===A||10182===A||A>=10183&&A<=10213||10214===A||10215===A||10216===A||10217===A||10218===A||10219===A||10220===A||10221===A||10222===A||10223===A||A>=10224&&A<=10239||A>=10240&&A<=10495||A>=10496&&A<=10626||10627===A||10628===A||10629===A||10630===A||10631===A||10632===A||10633===A||10634===A||10635===A||10636===A||10637===A||10638===A||10639===A||10640===A||10641===A||10642===A||10643===A||10644===A||10645===A||10646===A||10647===A||10648===A||A>=10649&&A<=10711||10712===A||10713===A||10714===A||10715===A||A>=10716&&A<=10747||10748===A||10749===A||A>=10750&&A<=11007||A>=11008&&A<=11055||A>=11056&&A<=11076||A>=11077&&A<=11078||A>=11079&&A<=11084||A>=11085&&A<=11123||A>=11124&&A<=11125||A>=11126&&A<=11157||11158===A||A>=11159&&A<=11263||A>=11776&&A<=11777||11778===A||11779===A||11780===A||11781===A||A>=11782&&A<=11784||11785===A||11786===A||11787===A||11788===A||11789===A||A>=11790&&A<=11798||11799===A||A>=11800&&A<=11801||11802===A||11803===A||11804===A||11805===A||A>=11806&&A<=11807||11808===A||11809===A||11810===A||11811===A||11812===A||11813===A||11814===A||11815===A||11816===A||11817===A||A>=11818&&A<=11822||11823===A||A>=11824&&A<=11833||A>=11834&&A<=11835||A>=11836&&A<=11839||11840===A||11841===A||11842===A||A>=11843&&A<=11855||A>=11856&&A<=11857||11858===A||A>=11859&&A<=11903||A>=12289&&A<=12291||12296===A||12297===A||12298===A||12299===A||12300===A||12301===A||12302===A||12303===A||12304===A||12305===A||A>=12306&&A<=12307||12308===A||12309===A||12310===A||12311===A||12312===A||12313===A||12314===A||12315===A||12316===A||12317===A||A>=12318&&A<=12319||12320===A||12336===A||64830===A||64831===A||A>=65093&&A<=65094}function nA(A){A.forEach((function(A){if(delete A.location,u(A)||h(A))for(var e in A.options)delete A.options[e].location,nA(A.options[e].value);else l(A)&&I(A.style)||(c(A)||g(A))&&f(A.style)?delete A.style.location:B(A)&&nA(A.children)}))}function oA(A,e){void 0===e&&(e={}),e=o({shouldParseSkeletons:!0,requiresOtherClause:!0},e);var t=new eA(A,e).parse();if(t.err){var i=SyntaxError(r[t.err.kind]);throw i.location=t.err.location,i.originalMessage=t.err.message,i}return(null==e?void 0:e.captureLocation)||nA(t.val),t.val}},40283:(A,e,t)=>{"use strict";t.d(e,{$6:()=>g,OV:()=>s,Qe:()=>l,Rw:()=>n,X9:()=>c,bc:()=>r,gb:()=>a,wI:()=>o});var r,i=t(12452);!function(A){A.FORMAT_ERROR="FORMAT_ERROR",A.UNSUPPORTED_FORMATTER="UNSUPPORTED_FORMATTER",A.INVALID_CONFIG="INVALID_CONFIG",A.MISSING_DATA="MISSING_DATA",A.MISSING_TRANSLATION="MISSING_TRANSLATION"}(r||(r={}));var n=function(A){function e(t,r,i){var n=this,o=i?i instanceof Error?i:new Error(String(i)):void 0;return(n=A.call(this,"[@formatjs/intl Error ".concat(t,"] ").concat(r,"\n").concat(o?"\n".concat(o.message,"\n").concat(o.stack):""))||this).code=t,"function"==typeof Error.captureStackTrace&&Error.captureStackTrace(n,e),n}return(0,i.ZT)(e,A),e}(Error),o=function(A){function e(e,t){return A.call(this,r.UNSUPPORTED_FORMATTER,e,t)||this}return(0,i.ZT)(e,A),e}(n),s=function(A){function e(e,t){return A.call(this,r.INVALID_CONFIG,e,t)||this}return(0,i.ZT)(e,A),e}(n),a=function(A){function e(e,t){return A.call(this,r.MISSING_DATA,e,t)||this}return(0,i.ZT)(e,A),e}(n),l=function(A){function e(e,t,i){return A.call(this,r.FORMAT_ERROR,"".concat(e,"\nLocale: ").concat(t,"\n"),i)||this}return(0,i.ZT)(e,A),e}(n),c=function(A){function e(e,t,r,i){var n=A.call(this,"".concat(e,"\nMessageID: ").concat(null==r?void 0:r.id,"\nDefault Message: ").concat(null==r?void 0:r.defaultMessage,"\nDescription: ").concat(null==r?void 0:r.description,"\n"),t,i)||this;return n.descriptor=r,n}return(0,i.ZT)(e,A),e}(l),g=function(A){function e(e,t){var i=A.call(this,r.MISSING_TRANSLATION,'Missing message: "'.concat(e.id,'" for locale "').concat(t,'", using ').concat(e.defaultMessage?"default message (".concat("string"==typeof e.defaultMessage?e.defaultMessage:e.defaultMessage.map((function(A){var e;return null!==(e=A.value)&&void 0!==e?e:JSON.stringify(A)})).join(),")"):"id"," as fallback."))||this;return i.descriptor=e,i}return(0,i.ZT)(e,A),e}(n)},32428:(A,e,t)=>{"use strict";t.d(e,{L6:()=>s,Sn:()=>l,TB:()=>u,Z0:()=>a,ax:()=>g});var r=t(12452),i=t(77481),n=t(75413),o=t(40283);function s(A,e,t){return void 0===t&&(t={}),e.reduce((function(e,r){return r in A?e[r]=A[r]:r in t&&(e[r]=t[r]),e}),{})}var a={formats:{},messages:{},timeZone:void 0,defaultLocale:"en",defaultFormats:{},fallbackOnEmptyString:!0,onError:function(A){},onWarn:function(A){}};function l(){return{dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}}}function c(A){return{create:function(){return{get:function(e){return A[e]},set:function(e,t){A[e]=t}}}}}function g(A){void 0===A&&(A={dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}});var e=Intl.RelativeTimeFormat,t=Intl.ListFormat,o=Intl.DisplayNames,s=(0,n.Z)((function(){for(var A,e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new((A=Intl.DateTimeFormat).bind.apply(A,(0,r.ev)([void 0],e,!1)))}),{cache:c(A.dateTime),strategy:n.A.variadic}),a=(0,n.Z)((function(){for(var A,e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new((A=Intl.NumberFormat).bind.apply(A,(0,r.ev)([void 0],e,!1)))}),{cache:c(A.number),strategy:n.A.variadic}),l=(0,n.Z)((function(){for(var A,e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new((A=Intl.PluralRules).bind.apply(A,(0,r.ev)([void 0],e,!1)))}),{cache:c(A.pluralRules),strategy:n.A.variadic});return{getDateTimeFormat:s,getNumberFormat:a,getMessageFormat:(0,n.Z)((function(A,e,t,n){return new i.C(A,e,t,(0,r.pi)({formatters:{getNumberFormat:a,getDateTimeFormat:s,getPluralRules:l}},n||{}))}),{cache:c(A.message),strategy:n.A.variadic}),getRelativeTimeFormat:(0,n.Z)((function(){for(var A=[],t=0;t<arguments.length;t++)A[t]=arguments[t];return new(e.bind.apply(e,(0,r.ev)([void 0],A,!1)))}),{cache:c(A.relativeTime),strategy:n.A.variadic}),getPluralRules:l,getListFormat:(0,n.Z)((function(){for(var A=[],e=0;e<arguments.length;e++)A[e]=arguments[e];return new(t.bind.apply(t,(0,r.ev)([void 0],A,!1)))}),{cache:c(A.list),strategy:n.A.variadic}),getDisplayNames:(0,n.Z)((function(){for(var A=[],e=0;e<arguments.length;e++)A[e]=arguments[e];return new(o.bind.apply(o,(0,r.ev)([void 0],A,!1)))}),{cache:c(A.displayNames),strategy:n.A.variadic})}}function u(A,e,t,r){var i,n=A&&A[e];if(n&&(i=n[t]),i)return i;r(new o.wI("No ".concat(e," format named: ").concat(t)))}},12452:(A,e,t)=>{"use strict";t.d(e,{ZT:()=>i,ev:()=>o,pi:()=>n});var r=function(A,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(A,e){A.__proto__=e}||function(A,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(A[t]=e[t])},r(A,e)};function i(A,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=A}r(A,e),A.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}var n=function(){return n=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},n.apply(this,arguments)};function o(A,e,t){if(t||2===arguments.length)for(var r,i=0,n=e.length;i<n;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return A.concat(r||Array.prototype.slice.call(e))}Object.create,Object.create},31904:A=>{A.exports=""},87972:(A,e,t)=>{"use strict";t.d(e,{Z:()=>GA});let r=!1,i=!1;const n={debug:1,default:2,info:2,warning:3,error:4,off:5};let o=n.default,s=null;const a=function(){try{const A=[];if(["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(t){A.push(e)}})),A.length)throw new Error("missing "+A.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(A){return A.message}return null}();var l,c;!function(A){A.DEBUG="DEBUG",A.INFO="INFO",A.WARNING="WARNING",A.ERROR="ERROR",A.OFF="OFF"}(l||(l={})),function(A){A.UNKNOWN_ERROR="UNKNOWN_ERROR",A.NOT_IMPLEMENTED="NOT_IMPLEMENTED",A.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",A.NETWORK_ERROR="NETWORK_ERROR",A.SERVER_ERROR="SERVER_ERROR",A.TIMEOUT="TIMEOUT",A.BUFFER_OVERRUN="BUFFER_OVERRUN",A.NUMERIC_FAULT="NUMERIC_FAULT",A.MISSING_NEW="MISSING_NEW",A.INVALID_ARGUMENT="INVALID_ARGUMENT",A.MISSING_ARGUMENT="MISSING_ARGUMENT",A.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",A.CALL_EXCEPTION="CALL_EXCEPTION",A.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",A.NONCE_EXPIRED="NONCE_EXPIRED",A.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",A.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",A.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(c||(c={}));const g="0123456789abcdef";class u{constructor(A){Object.defineProperty(this,"version",{enumerable:!0,value:A,writable:!1})}_log(A,e){const t=A.toLowerCase();null==n[t]&&this.throwArgumentError("invalid log level name","logLevel",A),o>n[t]||console.log.apply(console,e)}debug(...A){this._log(u.levels.DEBUG,A)}info(...A){this._log(u.levels.INFO,A)}warn(...A){this._log(u.levels.WARNING,A)}makeError(A,e,t){if(i)return this.makeError("censored error",e,{});e||(e=u.errors.UNKNOWN_ERROR),t||(t={});const r=[];Object.keys(t).forEach((A=>{const e=t[A];try{if(e instanceof Uint8Array){let t="";for(let A=0;A<e.length;A++)t+=g[e[A]>>4],t+=g[15&e[A]];r.push(A+"=Uint8Array(0x"+t+")")}else r.push(A+"="+JSON.stringify(e))}catch(e){r.push(A+"="+JSON.stringify(t[A].toString()))}})),r.push(`code=${e}`),r.push(`version=${this.version}`);const n=A;r.length&&(A+=" ("+r.join(", ")+")");const o=new Error(A);return o.reason=n,o.code=e,Object.keys(t).forEach((function(A){o[A]=t[A]})),o}throwError(A,e,t){throw this.makeError(A,e,t)}throwArgumentError(A,e,t){return this.throwError(A,u.errors.INVALID_ARGUMENT,{argument:e,value:t})}assert(A,e,t,r){A||this.throwError(e,t,r)}assertArgument(A,e,t,r){A||this.throwArgumentError(e,t,r)}checkNormalize(A){null==A&&(A="platform missing String.prototype.normalize"),a&&this.throwError("platform missing String.prototype.normalize",u.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:a})}checkSafeUint53(A,e){"number"==typeof A&&(null==e&&(e="value not safe"),(A<0||A>=9007199254740991)&&this.throwError(e,u.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:A}),A%1&&this.throwError(e,u.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:A}))}checkArgumentCount(A,e,t){t=t?": "+t:"",A<e&&this.throwError("missing argument"+t,u.errors.MISSING_ARGUMENT,{count:A,expectedCount:e}),A>e&&this.throwError("too many arguments"+t,u.errors.UNEXPECTED_ARGUMENT,{count:A,expectedCount:e})}checkNew(A,e){A!==Object&&null!=A||this.throwError("missing new",u.errors.MISSING_NEW,{name:e.name})}checkAbstract(A,e){A===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",u.errors.UNSUPPORTED_OPERATION,{name:A.name,operation:"new"}):A!==Object&&null!=A||this.throwError("missing new",u.errors.MISSING_NEW,{name:e.name})}static globalLogger(){return s||(s=new u("logger/5.5.0")),s}static setCensorship(A,e){if(!A&&e&&this.globalLogger().throwError("cannot permanently disable censorship",u.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),r){if(!A)return;this.globalLogger().throwError("error censorship permanent",u.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}i=!!A,r=!!e}static setLogLevel(A){const e=n[A.toLowerCase()];null!=e?o=e:u.globalLogger().warn("invalid log level - "+A)}static from(A){return new u(A)}}u.errors=c,u.levels=l;const h=new u("bytes/5.5.0");function E(A){return!!A.toHexString}function B(A){return A.slice||(A.slice=function(){const e=Array.prototype.slice.call(arguments);return B(new Uint8Array(Array.prototype.slice.apply(A,e)))}),A}function I(A){return"number"==typeof A&&A==A&&A%1==0}function f(A){if(null==A)return!1;if(A.constructor===Uint8Array)return!0;if("string"==typeof A)return!1;if(!I(A.length)||A.length<0)return!1;for(let e=0;e<A.length;e++){const t=A[e];if(!I(t)||t<0||t>=256)return!1}return!0}function p(A,e){if(e||(e={}),"number"==typeof A){h.checkSafeUint53(A,"invalid arrayify value");const e=[];for(;A;)e.unshift(255&A),A=parseInt(String(A/256));return 0===e.length&&e.push(0),B(new Uint8Array(e))}if(e.allowMissingPrefix&&"string"==typeof A&&"0x"!==A.substring(0,2)&&(A="0x"+A),E(A)&&(A=A.toHexString()),d(A)){let t=A.substring(2);t.length%2&&("left"===e.hexPad?t="0x0"+t.substring(2):"right"===e.hexPad?t+="0":h.throwArgumentError("hex data is odd-length","value",A));const r=[];for(let A=0;A<t.length;A+=2)r.push(parseInt(t.substring(A,A+2),16));return B(new Uint8Array(r))}return f(A)?B(new Uint8Array(A)):h.throwArgumentError("invalid arrayify value","value",A)}function d(A,e){return!("string"!=typeof A||!A.match(/^0x[0-9A-Fa-f]*$/)||e&&A.length!==2+2*e)}const w="0123456789abcdef";function m(A,e){if(e||(e={}),"number"==typeof A){h.checkSafeUint53(A,"invalid hexlify value");let e="";for(;A;)e=w[15&A]+e,A=Math.floor(A/16);return e.length?(e.length%2&&(e="0"+e),"0x"+e):"0x00"}if("bigint"==typeof A)return(A=A.toString(16)).length%2?"0x0"+A:"0x"+A;if(e.allowMissingPrefix&&"string"==typeof A&&"0x"!==A.substring(0,2)&&(A="0x"+A),E(A))return A.toHexString();if(d(A))return A.length%2&&("left"===e.hexPad?A="0x0"+A.substring(2):"right"===e.hexPad?A+="0":h.throwArgumentError("hex data is odd-length","value",A)),A.toLowerCase();if(f(A)){let e="0x";for(let t=0;t<A.length;t++){let r=A[t];e+=w[(240&r)>>4]+w[15&r]}return e}return h.throwArgumentError("invalid hexlify value","value",A)}const C=new u("rlp/5.5.0");function Q(A){const e=[];for(;A;)e.unshift(255&A),A>>=8;return e}function R(A,e,t){let r=0;for(let i=0;i<t;i++)r=256*r+A[e+i];return r}function y(A){if(Array.isArray(A)){let e=[];if(A.forEach((function(A){e=e.concat(y(A))})),e.length<=55)return e.unshift(192+e.length),e;const t=Q(e.length);return t.unshift(247+t.length),t.concat(e)}var e;d(e=A)&&!(e.length%2)||f(e)||C.throwArgumentError("RLP object must be BytesLike","object",A);const t=Array.prototype.slice.call(p(A));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const r=Q(t.length);return r.unshift(183+r.length),r.concat(t)}function U(A,e,t,r){const i=[];for(;t<e+1+r;){const n=v(A,t);i.push(n.result),(t+=n.consumed)>e+1+r&&C.throwError("child data too short",u.errors.BUFFER_OVERRUN,{})}return{consumed:1+r,result:i}}function v(A,e){if(0===A.length&&C.throwError("data too short",u.errors.BUFFER_OVERRUN,{}),A[e]>=248){const t=A[e]-247;e+1+t>A.length&&C.throwError("data short segment too short",u.errors.BUFFER_OVERRUN,{});const r=R(A,e+1,t);return e+1+t+r>A.length&&C.throwError("data long segment too short",u.errors.BUFFER_OVERRUN,{}),U(A,e,e+1+t,t+r)}if(A[e]>=192){const t=A[e]-192;return e+1+t>A.length&&C.throwError("data array too short",u.errors.BUFFER_OVERRUN,{}),U(A,e,e+1,t)}if(A[e]>=184){const t=A[e]-183;e+1+t>A.length&&C.throwError("data array too short",u.errors.BUFFER_OVERRUN,{});const r=R(A,e+1,t);return e+1+t+r>A.length&&C.throwError("data array too short",u.errors.BUFFER_OVERRUN,{}),{consumed:1+t+r,result:m(A.slice(e+1+t,e+1+t+r))}}if(A[e]>=128){const t=A[e]-128;return e+1+t>A.length&&C.throwError("data too short",u.errors.BUFFER_OVERRUN,{}),{consumed:1+t,result:m(A.slice(e+1,e+1+t))}}return{consumed:1,result:m(A[e])}}function M(A){const e=p(A),t=v(e,0);return t.consumed!==e.length&&C.throwArgumentError("invalid rlp data","data",A),t.result}var T=t(72558),b=t(48834).Buffer;function S(A){var e=[];return A.split("/").forEach((function(A){var t=parseInt(A,10);isNaN(t)||(A.length>1&&"'"===A[A.length-1]&&(t+=2147483648),e.push(t))})),e}function F(A){return b.from(A.startsWith("0x")?A.slice(2):A,"hex")}function D(A){return A?F(A):null}var N=function(A){var e,t=[1,2].includes(A[0])?A[0]:null,r=null===t?A:A.slice(1),i=M(r).map((function(A){return b.from(A.slice(2),"hex")})),n=0,o=M(r),s=(e=2===t?{data:o[7],to:o[5],chainId:i[0]}:1===t?{data:o[6],to:o[4],chainId:i[0]}:{data:o[5],to:o[3],chainId:i.length>6?i[6]:b.from("0x01","hex")}).chainId,a=new T.O(0);if(s){a=new T.O(s.toString("hex"),16);var l=b.alloc(4);s.length>4?s.copy(l):s.copy(l,4-s.length),n=l.readUInt32BE(0)}var c,g=0;if(null===t&&i.length>6){var u=b.from((c=i.slice(-3),m(y(c))).slice(2),"hex");g=A.length-(u.length-1),u[0]>247&&(g++,g+=u[0]-247-1)}return{decodedTx:e,txType:t,chainId:a,chainIdTruncated:n,vrsOffset:g}},G=function(A,e){return A.toString(16).padStart(2*e,"0")},V=t(91288),k=t(73868),O=t(89644),x=t.n(O),Z=function(){return Z=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},Z.apply(this,arguments)},J={nftExplorerBaseURL:null,pluginBaseURL:"https://cdn.live.ledger.com",extraPlugins:null};function P(A){return Z(Z({},J),A)}var Y,H=function(){return H=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},H.apply(this,arguments)},L=function(A,e,t,r){return i=void 0,n=void 0,s=function(){var t,i,n,o,s,a,l,c;return function(A,e){var t,r,i,n,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(i=2&n[0]?r.return:n[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,n[1])).done)return i;switch(r=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){o.label=n[1];break}if(6===n[0]&&o.label<i[1]){o.label=i[1],i=n;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(n);break}i[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(A,o)}catch(A){n=[6,A],r=0}finally{t=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}}(this,(function(g){switch(g.label){case 0:return t=P(r),i=t.pluginBaseURL,n=t.extraPlugins,o={},i?(s="".concat(i,"/plugins/ethereum.json"),[4,x().get("".concat(i,"/plugins/ethereum.json")).then((function(A){return A.data})).catch((function(A){return(0,V.c)("error","could not fetch from "+s+": "+String(A)),null}))]):[3,2];case 1:o=g.sent(),g.label=2;case 2:return n&&(o=H(H({},o),n)),o?(a=e.toLowerCase(),(l=A.toLowerCase())in o&&(c=o[l],a in c)?[2,{payload:c[a].serialized_data,signature:c[a].signature,plugin:c[a].plugin,erc20OfInterest:c[a].erc20OfInterest,abi:c.abi}]:[2]):[2]}}))},new((o=void 0)||(o=Promise))((function(A,e){function t(A){try{a(s.next(A))}catch(A){e(A)}}function r(A){try{a(s.throw(A))}catch(A){e(A)}}function a(e){var i;e.done?A(e.value):(i=e.value,i instanceof o?i:new o((function(A){A(i)}))).then(t,r)}a((s=s.apply(i,n||[])).next())}));var i,n,o,s},j=t(31904),W=t.n(j),z=t(48834).Buffer,K=function(A){var e=A.toLowerCase();return e.startsWith("0x")?e:"0x"+e},q=function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){var e;A.done?i(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,s)}a((r=r.apply(A,e||[])).next())}))},X=function(A,e){var t,r,i,n,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(i=2&n[0]?r.return:n[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,n[1])).done)return i;switch(r=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){o.label=n[1];break}if(6===n[0]&&o.label<i[1]){o.label=i[1],i=n;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(n);break}i[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(A,o)}catch(A){n=[6,A],r=0}finally{t=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};function _(A){if(!A||!A.status)throw A;if(404===A.status)return null;throw A}var $=function(A,e,t,r){return q(void 0,void 0,void 0,(function(){var i,n,o;return X(this,(function(s){switch(s.label){case 0:return(i=P(r).nftExplorerBaseURL)?(n="".concat(i,"/").concat(t,"/contracts/").concat(A,"/plugin-selector/").concat(e),[4,x().get(n).then((function(A){return A.data})).catch(_)]):[2];case 1:return(o=s.sent())?[2,o.payload]:[2]}}))}))},AA=t(48834).Buffer,eA=function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){var e;A.done?i(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,s)}a((r=r.apply(A,e||[])).next())}))},tA=function(A,e){var t,r,i,n,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(i=2&n[0]?r.return:n[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,n[1])).done)return i;switch(r=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){o.label=n[1];break}if(6===n[0]&&o.label<i[1]){o.label=i[1],i=n;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(n);break}i[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(A,o)}catch(A){n=[6,A],r=0}finally{t=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}};const rA=function(A,e,t){return eA(void 0,void 0,void 0,(function(){var r,i,n,o,s,a,l,c,g,u,h,E,B,I,f,p,d,w,m,C,Q,R,y,U,v;return tA(this,(function(M){switch(M.label){case 0:return r={erc20Tokens:[],nfts:[],externalPlugin:[],plugin:[]},i=AA.from(A,"hex"),n=N(i),o=n.decodedTx,s=n.chainIdTruncated,a=function(A){return eA(void 0,void 0,void 0,(function(){var i,n,o;return tA(this,(function(a){switch(a.label){case 0:return t.nft?[4,(c=A,g=s,u=e,q(void 0,void 0,void 0,(function(){var A,e,t,r,i,n,o,s;return X(this,(function(a){switch(a.label){case 0:return(A=P(u).nftExplorerBaseURL)?(e="".concat(A,"/").concat(g,"/contracts/").concat(c),[4,x().get(e).then((function(A){return A.data})).catch(_)]):[2];case 1:return(t=a.sent())?(r=t.payload,i=parseInt(r.slice(4,6),16),n=r.substr(6,2*i),o=null===(s=n.match(/.{2}/g))||void 0===s?void 0:s.reduce((function(A,e){return A+String.fromCharCode(parseInt(e,16))}),""),[2,{contractAddress:c,collectionName:o||"",data:r}]):[2]}}))})))]:[3,2];case 1:return n=a.sent(),[3,3];case 2:n=null,a.label=3;case 3:return(i=n)?((0,V.c)("ethereum","loaded nft info for "+i.contractAddress+" ("+i.collectionName+")"),l=i.data,r.nfts.push(l)):(o=function(A,e){return function(){if(Y)return Y;for(var A=z.from(W(),"base64"),e={},t=[],r=0;r<A.length;){var i=A.readUInt32BE(r);r+=4;var n=A.slice(r,r+i),o=0,s=n.readUInt8(o);o+=1;var a=n.slice(o,o+s).toString("ascii");o+=s;var l=K(n.slice(o,o+20).toString("hex"));o+=20;var c=n.readUInt32BE(o);o+=4;var g=n.readUInt32BE(o);o+=4;var u={ticker:a,contractAddress:l,decimals:c,chainId:g,signature:n.slice(o),data:n};t.push(u),e[String(g)+":"+l]=u,r+=i}var h={list:function(){return t},byContractAndChainId:function(A,t){return e[String(t)+":"+A]}};return Y=h,h}().byContractAndChainId(K(A),e)}(A,s),o&&((0,V.c)("ethereum","loaded erc20token info for "+o.contractAddress+" ("+o.ticker+")"),function(A){r.erc20Tokens.push(A)}(o.data.toString("hex")))),[2]}var l,c,g,u}))}))},o.data.length>=10?(l=o.data.substring(0,10),t.nft?[4,$(o.to,l,s,e)]:[3,2]):[3,19];case 1:return g=M.sent(),[3,3];case 2:g=null,M.label=3;case 3:return(c=g)?(T=c,r.plugin.push(T),[3,17]):[3,4];case 4:return t.externalPlugins?[4,L(o.to,l,0,e)]:[3,6];case 5:return h=M.sent(),[3,7];case 6:h=null,M.label=7;case 7:if(!(u=h))return[3,16];if(E=u.plugin,B=u.payload,I=u.signature,f=u.erc20OfInterest,p=u.abi,E&&((0,V.c)("ethereum","found plugin for "+l),function(A,e){r.externalPlugin.push({payload:A,signature:e})}(B,I)),!(f&&f.length&&p))return[3,15];d=new k.vU(p),w=d.parseTransaction(o).args,M.label=8;case 8:M.trys.push([8,13,14,15]),m=function(A){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&A[e],r=0;if(t)return t.call(A);if(A&&"number"==typeof A.length)return{next:function(){return A&&r>=A.length&&(A=void 0),{value:A&&A[r++],done:!A}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(f),C=m.next(),M.label=9;case 9:return C.done?[3,12]:(Q=C.value,R=Q.split(".").reduce((function(A,e){return"-1"===e&&Array.isArray(A)?A[A.length-1]:A[e]}),w),[4,a(R)]);case 10:M.sent(),M.label=11;case 11:return C=m.next(),[3,9];case 12:return[3,15];case 13:return y=M.sent(),U={error:y},[3,15];case 14:try{C&&!C.done&&(v=m.return)&&v.call(m)}finally{if(U)throw U.error}return[7];case 15:return[3,17];case 16:(0,V.c)("ethereum","no infos for selector "+l),M.label=17;case 17:return[4,a(o.to)];case 18:M.sent(),M.label=19;case 19:return[2,r]}var T}))}))};var iA,nA=(iA=function(A,e){return iA=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(A,e){A.__proto__=e}||function(A,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(A[t]=e[t])},iA(A,e)},function(A,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=A}iA(A,e),A.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}),oA={},sA={},aA=function(A,e){sA[A]=e},lA=function(A){var e=function(e){function t(r,i,n){var o,s=e.call(this,r||A,n)||this;for(var a in Object.setPrototypeOf(s,t.prototype),s.name=A,i)s[a]=i[a];if(null!==(o=n)&&"object"==typeof o&&"cause"in n&&!("cause"in s)){var l=n.cause;s.cause=l,"stack"in l&&(s.stack=s.stack+"\nCAUSE: "+l.stack)}return s}return nA(t,e),t}(Error);return oA[A]=e,e};function cA(A,e){this.name="TransportError",this.message=A,this.stack=(new Error).stack,this.id=e}lA("AccountNameRequired"),lA("AccountNotSupported"),lA("AmountRequired"),lA("BluetoothRequired"),lA("BtcUnmatchedApp"),lA("CantOpenDevice"),lA("CashAddrNotSupported"),lA("CurrencyNotSupported"),lA("DeviceAppVerifyNotSupported"),lA("DeviceGenuineSocketEarlyClose"),lA("DeviceNotGenuine"),lA("DeviceOnDashboardExpected"),lA("DeviceOnDashboardUnexpected"),lA("DeviceInOSUExpected"),lA("DeviceHalted"),lA("DeviceNameInvalid"),lA("DeviceSocketFail"),lA("DeviceSocketNoBulkStatus"),lA("DisconnectedDevice"),lA("DisconnectedDeviceDuringOperation"),lA("DeviceExtractOnboardingStateError"),lA("DeviceOnboardingStatePollingError"),lA("EnpointConfig"),lA("EthAppPleaseEnableContractData"),lA("FeeEstimationFailed"),lA("FirmwareNotRecognized"),lA("HardResetFail"),lA("InvalidXRPTag"),lA("InvalidAddress"),lA("InvalidAddressBecauseDestinationIsAlsoSource"),lA("LatestMCUInstalledError"),lA("UnknownMCU"),lA("LedgerAPIError"),lA("LedgerAPIErrorWithMessage"),lA("LedgerAPINotAvailable"),lA("ManagerAppAlreadyInstalled"),lA("ManagerAppRelyOnBTC"),lA("ManagerAppDepInstallRequired"),lA("ManagerAppDepUninstallRequired"),lA("ManagerDeviceLocked"),lA("ManagerFirmwareNotEnoughSpace"),lA("ManagerNotEnoughSpace"),lA("ManagerUninstallBTCDep"),lA("NetworkDown"),lA("NoAddressesFound"),lA("NotEnoughBalance"),lA("NotEnoughBalanceToDelegate"),lA("NotEnoughBalanceInParentAccount"),lA("NotEnoughSpendableBalance"),lA("NotEnoughBalanceBecauseDestinationNotCreated"),lA("NoAccessToCamera"),lA("NotEnoughGas"),lA("NotSupportedLegacyAddress"),lA("GasLessThanEstimate"),lA("PasswordsDontMatch"),lA("PasswordIncorrect"),lA("RecommendSubAccountsToEmpty"),lA("RecommendUndelegation"),lA("TimeoutTagged"),lA("UnexpectedBootloader"),lA("MCUNotGenuineToDashboard"),lA("RecipientRequired"),lA("UnavailableTezosOriginatedAccountReceive"),lA("UnavailableTezosOriginatedAccountSend"),lA("UpdateFetchFileFail"),lA("UpdateIncorrectHash"),lA("UpdateIncorrectSig"),lA("UpdateYourApp"),lA("UserRefusedDeviceNameChange"),lA("UserRefusedAddress"),lA("UserRefusedFirmwareUpdate"),lA("UserRefusedAllowManager"),lA("UserRefusedOnDevice"),lA("TransportOpenUserCancelled"),lA("TransportInterfaceNotAvailable"),lA("TransportRaceCondition"),lA("TransportWebUSBGestureRequired"),lA("DeviceShouldStayInApp"),lA("WebsocketConnectionError"),lA("WebsocketConnectionFailed"),lA("WrongDeviceForAccount"),lA("WrongAppForCurrency"),lA("ETHAddressNonEIP"),lA("CantScanQRCode"),lA("FeeNotLoaded"),lA("FeeRequired"),lA("FeeTooHigh"),lA("SyncError"),lA("PairingFailed"),lA("GenuineCheckFailed"),lA("LedgerAPI4xx"),lA("LedgerAPI5xx"),lA("FirmwareOrAppUpdateRequired"),lA("NoDBPathGiven"),lA("DBWrongPassword"),lA("DBNotReset"),cA.prototype=new Error,aA("TransportError",(function(A){return new cA(A.message,A.id)}));var gA={PIN_REMAINING_ATTEMPTS:25536,INCORRECT_LENGTH:26368,MISSING_CRITICAL_PARAMETER:26624,COMMAND_INCOMPATIBLE_FILE_STRUCTURE:27009,SECURITY_STATUS_NOT_SATISFIED:27010,CONDITIONS_OF_USE_NOT_SATISFIED:27013,INCORRECT_DATA:27264,NOT_ENOUGH_MEMORY_SPACE:27268,REFERENCED_DATA_NOT_FOUND:27272,FILE_ALREADY_EXISTS:27273,INCORRECT_P1_P2:27392,INS_NOT_SUPPORTED:27904,CLA_NOT_SUPPORTED:28160,TECHNICAL_PROBLEM:28416,OK:36864,MEMORY_PROBLEM:37440,NO_EF_SELECTED:37888,INVALID_OFFSET:37890,FILE_NOT_FOUND:37892,INCONSISTENT_FILE:37896,ALGORITHM_NOT_SUPPORTED:38020,INVALID_KCV:38021,CODE_NOT_INITIALIZED:38914,ACCESS_CONDITION_NOT_FULFILLED:38916,CONTRADICTION_SECRET_CODE_STATUS:38920,CONTRADICTION_INVALIDATION:38928,CODE_BLOCKED:38976,MAX_VALUE_REACHED:38992,GP_AUTH_FAILED:25344,LICENSING:28482,HALTED:28586};function uA(A){this.name="TransportStatusError";var e=Object.keys(gA).find((function(e){return gA[e]===A}))||"UNKNOWN_ERROR",t=function(A){switch(A){case 26368:return"Incorrect length";case 26624:return"Missing critical parameter";case 27010:return"Security not satisfied (dongle locked or have invalid access rights)";case 27013:return"Condition of use not satisfied (denied by the user?)";case 27264:return"Invalid data received";case 27392:return"Invalid parameter received"}if(28416<=A&&A<=28671)return"Internal error, please report"}(A)||e,r=A.toString(16);this.message="Ledger device: ".concat(t," (0x").concat(r,")"),this.stack=(new Error).stack,this.statusCode=A,this.statusText=e}uA.prototype=new Error,aA("TransportStatusError",(function(A){return new uA(A.statusCode)}));var hA,EA=lA("EthAppPleaseEnableContractData"),BA=lA("EthAppNftNotSupported"),IA=t(48834).Buffer,fA=function(A,e){var t="function"==typeof Symbol&&A[Symbol.iterator];if(!t)return A;var r,i,n=t.call(A),o=[];try{for(;(void 0===e||e-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(A){i={error:A}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(i)throw i.error}}return o};!function(A){A[A.DYNAMIC=0]="DYNAMIC",A[A.FIXED=1]="FIXED"}(hA||(hA={}));var pA={CUSTOM:{key:function(){return 0},sizeInBits:function(){return null}},INT:{key:function(){return 1},sizeInBits:function(A){return Number(A)/8}},UINT:{key:function(){return 2},sizeInBits:function(A){return Number(A)/8}},ADDRESS:{key:function(){return 3},sizeInBits:function(){return null}},BOOL:{key:function(){return 4},sizeInBits:function(){return null}},STRING:{key:function(){return 5},sizeInBits:function(){return null}},BYTES:{key:function(A){return void 0!==A?6:7},sizeInBits:function(A){return void 0!==A?Number(A):null}}},dA={INT:function(A){var e=null!=A?A:0;if("string"==typeof e&&(null==e?void 0:e.startsWith("0x")))return F(e);var t=("string"==typeof e?parseInt(e,10):e).toString(16),r=t.length%2?"0"+t:t;return IA.from(r,"hex")},UINT:function(A){return this.INT(A)},BOOL:function(A){return this.INT("boolean"==typeof A?Number(A):A)},ADDRESS:function(A){return F(null!=A?A:"").slice(0,20)},STRING:function(A){return IA.from(null!=A?A:"","utf-8")},BYTES:function(A,e){var t=null!=A?A:"";return F(t).slice(0,null!=e?e:((null==t?void 0:t.length)-2)/2)}},wA=function(A){var e=new RegExp(/^([^[\]]*)(\[.*\])*/g),t=new RegExp(/\[(\d*)\]/g),r=new RegExp(/(\D*)(\d*)/),i=fA(e.exec(A||"")||[],3),n=i[1],o=i[2],s=fA(r.exec(n||"")||[],3),a=s[1],l=s[2],c=a?{name:a,bits:l?Number(l):void 0}:null,g=(o?function(A,e,t){if(t||2===arguments.length)for(var r,i=0,n=e.length;i<n;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return A.concat(r||Array.prototype.slice.call(e))}([],fA(o.matchAll(t)),!1):[]).map((function(A){var e=fA(A,2)[1];return e?Number(e):null}));return[c,g]},mA=t(48834).Buffer,CA=function(){return CA=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},CA.apply(this,arguments)},QA=function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){var e;A.done?i(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,s)}a((r=r.apply(A,e||[])).next())}))},RA=function(A,e){var t,r,i,n,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(i=2&n[0]?r.return:n[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,n[1])).done)return i;switch(r=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){o.label=n[1];break}if(6===n[0]&&o.label<i[1]){o.label=i[1],i=n;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(n);break}i[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(A,o)}catch(A){n=[6,A],r=0}finally{t=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},yA=function(A,e){var t="function"==typeof Symbol&&A[Symbol.iterator];if(!t)return A;var r,i,n=t.call(A),o=[];try{for(;(void 0===e||e-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(A){i={error:A}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(i)throw i.error}}return o},UA=function(A){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&A[e],r=0;if(t)return t.call(A);if(A&&"number"==typeof A.length)return{next:function(){return A&&r>=A.length&&(A=void 0),{value:A&&A[r++],done:!A}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},vA=function(A,e){var t;!function(A){A[A.CLA=224]="CLA",A[A.INS=26]="INS",A[A.P1_complete=0]="P1_complete",A[A.P1_partial=1]="P1_partial",A[A.P2_name=0]="P2_name",A[A.P2_field=255]="P2_field"}(t||(t={}));var r=e.structType,i=e.value,n="name"===r&&"string"==typeof i?mA.from(i,"utf-8"):i;return A.send(t.CLA,t.INS,t.P1_complete,"name"===r?t.P2_name:t.P2_field,n)},MA=function(A,e){return QA(void 0,void 0,void 0,(function(){var t,r,i,n,o,s,a,l,c,g,u,h,E,B,I,f,p,d;return RA(this,(function(w){switch(w.label){case 0:if(function(A){A[A.CLA=224]="CLA",A[A.INS=28]="INS",A[A.P1_complete=0]="P1_complete",A[A.P1_partial=1]="P1_partial",A[A.P2_root=0]="P2_root",A[A.P2_array=15]="P2_array",A[A.P2_field=255]="P2_field"}(t||(t={})),r=e.structType,i=e.value,"root"===r)return[2,A.send(t.CLA,t.INS,t.P1_complete,t.P2_root,mA.from(i,"utf-8"))];if("array"===r)return[2,A.send(t.CLA,t.INS,t.P1_complete,t.P2_array,mA.from(G(i,1),"hex"))];if("field"!==r)return[3,8];if(n=i.data,o=i.type,s=i.sizeInBits,!(a=null===(d=dA[o.toUpperCase()])||void 0===d?void 0:d.call(dA,n,s)))return[3,8];l=Math.floor(a.length/256),c=a.length%256,g=mA.concat([mA.from(G(l,1),"hex"),mA.from(G(c,1),"hex"),a]),u=new Array(Math.ceil(g.length/256)).fill(null).map((function(A,e){return g.slice(255*e,255*(e+1))})),w.label=1;case 1:w.trys.push([1,6,7,8]),h=UA(u),E=h.next(),w.label=2;case 2:return E.done?[3,5]:(B=E.value,[4,A.send(t.CLA,t.INS,B!==u[u.length-1]?t.P1_partial:t.P1_complete,t.P2_field,B)]);case 3:w.sent(),w.label=4;case 4:return E=h.next(),[3,2];case 5:return[3,8];case 6:return I=w.sent(),f={error:I},[3,8];case 7:try{E&&!E.done&&(p=h.return)&&p.call(h)}finally{if(f)throw f.error}return[7];case 8:return[2,Promise.resolve()]}}))}))},TA=function(A,e,t,r){return void 0===r&&(r=!1),QA(void 0,void 0,void 0,(function(){var i,n,o,s,a,l,c,g,u,h,E,B,I,f,p,d,w,m,C,Q,R,y,U,v,M,T,b,F,D,N,V,k,O,x,Z,J,P,Y,H,L,j,W,z,K,q;return RA(this,(function(X){switch(X.label){case 0:!function(A){A[A.CLA=224]="CLA",A[A.INS=12]="INS",A[A.P1=0]="P1",A[A.P2_v0=0]="P2_v0",A[A.P2_full=1]="P2_full"}(i||(i={})),n=t.primaryType,o=t.types,s=t.domain,a=t.message,l=Object.entries(o),X.label=1;case 1:X.trys.push([1,13,14,15]),c=UA(l),g=c.next(),X.label=2;case 2:return g.done?[3,12]:(u=yA(g.value,2),h=u[0],E=u[1],[4,vA(A,{structType:"name",value:h})]);case 3:X.sent(),X.label=4;case 4:X.trys.push([4,9,10,11]),L=void 0,B=UA(E),I=B.next(),X.label=5;case 5:return I.done?[3,8]:(f=I.value,p=f.name,O=f.type,d=function(A){var e,t,r,i,n=A.name,o=A.type,s=fA(wA(o),2),a=s[0],l=s[1],c=Boolean(l.length),g=pA[(null===(e=null==a?void 0:a.name)||void 0===e?void 0:e.toUpperCase())||""]||pA.CUSTOM,u=g.key(null==a?void 0:a.bits),h=g.sizeInBits(null==a?void 0:a.bits),E=function(A,e,t){if(t>=16)throw new Error("Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary"+{isArray:A,typeSize:e,typeValue:t});var r=A?"1":"0",i="number"==typeof e?"1":"0",n=t.toString(2).padStart(4,"0");return G(parseInt(r+i+"00"+n,2),1)}(c,h,u),B=[IA.from(E,"hex")];return g===pA.CUSTOM&&(B.push(IA.from(G(null!==(r=null===(t=null==a?void 0:a.name)||void 0===t?void 0:t.length)&&void 0!==r?r:0,1),"hex")),B.push(IA.from(null!==(i=null==a?void 0:a.name)&&void 0!==i?i:"","utf-8"))),"number"==typeof h&&B.push(IA.from(G(h,1),"hex")),c&&(B.push(IA.from(G(l.length,1),"hex")),l.forEach((function(A){"number"==typeof A?B.push(IA.from(G(hA.FIXED,1),"hex"),IA.from(G(A,1),"hex")):B.push(IA.from(G(hA.DYNAMIC,1),"hex"))}))),B.push(IA.from(G(n.length,1),"hex"),IA.from(n,"utf-8")),IA.concat(B)}({name:p,type:O}),[4,vA(A,{structType:"field",value:d})]);case 6:X.sent(),X.label=7;case 7:return I=B.next(),[3,5];case 8:return[3,11];case 9:return w=X.sent(),L={error:w},[3,11];case 10:try{I&&!I.done&&(j=B.return)&&j.call(B)}finally{if(L)throw L.error}return[7];case 11:return g=c.next(),[3,2];case 12:return[3,15];case 13:return m=X.sent(),Y={error:m},[3,15];case 14:try{g&&!g.done&&(H=c.return)&&H.call(c)}finally{if(Y)throw Y.error}return[7];case 15:return C=function(A,e){var t,r={};for(var i in e)r[i]=null===(t=e[i])||void 0===t?void 0:t.reduce((function(A,e){var t;return CA(CA({},A),((t={})[e.name]=e.type,t))}),{});var n=function(e,t){return QA(void 0,void 0,void 0,(function(){var i,o,s,a,l,c,g,u,h,E,B,I,f,p,d,w,m,C,Q,R,y,U,v;return RA(this,(function(M){switch(M.label){case 0:return i=yA(e,2),o=i[0],s=i[1],a=yA(s),l=a[0],c=a.slice(1),g=!pA[(null===(v=null==o?void 0:o.name)||void 0===v?void 0:v.toUpperCase())||""],Array.isArray(t)&&void 0!==l?[4,MA(A,{structType:"array",value:t.length})]:[3,10];case 1:M.sent(),M.label=2;case 2:M.trys.push([2,7,8,9]),u=UA(t),h=u.next(),M.label=3;case 3:return h.done?[3,6]:(E=h.value,[4,n([o,c],E)]);case 4:M.sent(),M.label=5;case 5:return h=u.next(),[3,3];case 6:return[3,9];case 7:return B=M.sent(),Q={error:B},[3,9];case 8:try{h&&!h.done&&(R=u.return)&&R.call(u)}finally{if(Q)throw Q.error}return[7];case 9:return[3,21];case 10:if(!g)return[3,19];M.label=11;case 11:M.trys.push([11,16,17,18]),I=UA(Object.entries(t)),f=I.next(),M.label=12;case 12:return f.done?[3,15]:(p=yA(f.value,2),d=p[0],w=p[1],(m=null==r?void 0:r[(null==o?void 0:o.name)||""][d])?[4,n(wA(m),w)]:[3,14]);case 13:M.sent(),M.label=14;case 14:return f=I.next(),[3,12];case 15:return[3,18];case 16:return C=M.sent(),y={error:C},[3,18];case 17:try{f&&!f.done&&(U=I.return)&&U.call(I)}finally{if(y)throw y.error}return[7];case 18:return[3,21];case 19:return[4,MA(A,{structType:"field",value:{data:t,type:(null==o?void 0:o.name)||"",sizeInBits:null==o?void 0:o.bits}})];case 20:M.sent(),M.label=21;case 21:return[2]}}))}))};return n}(A,o),[4,MA(A,{structType:"root",value:Q="EIP712Domain"})];case 16:X.sent(),R=o[Q],X.label=17;case 17:X.trys.push([17,22,23,24]),y=UA(R),U=y.next(),X.label=18;case 18:return U.done?[3,21]:(v=U.value,M=v.name,O=v.type,T=s[M],[4,C(wA(O),T)]);case 19:X.sent(),X.label=20;case 20:return U=y.next(),[3,18];case 21:return[3,24];case 22:return b=X.sent(),W={error:b},[3,24];case 23:try{U&&!U.done&&(z=y.return)&&z.call(y)}finally{if(W)throw W.error}return[7];case 24:return[4,MA(A,{structType:"root",value:n})];case 25:X.sent(),F=o[n],X.label=26;case 26:X.trys.push([26,31,32,33]),D=UA(F),N=D.next(),X.label=27;case 27:return N.done?[3,30]:(V=N.value,k=V.name,O=V.type,x=a[k],[4,C(wA(O),x)]);case 28:X.sent(),X.label=29;case 29:return N=D.next(),[3,27];case 30:return[3,33];case 31:return Z=X.sent(),K={error:Z},[3,33];case 32:try{N&&!N.done&&(q=D.return)&&q.call(D)}finally{if(K)throw K.error}return[7];case 33:return J=S(e),(P=mA.alloc(1+4*J.length))[0]=J.length,J.forEach((function(A,e){P.writeUInt32BE(A,1+4*e)})),[2,A.send(i.CLA,i.INS,i.P1,r?i.P2_v0:i.P2_full,P).then((function(A){return{v:A[0],r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))]}}))}))},bA=t(48834).Buffer,SA=function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){var e;A.done?i(A.value):(e=A.value,e instanceof t?e:new t((function(A){A(e)}))).then(o,s)}a((r=r.apply(A,e||[])).next())}))},FA=function(A,e){var t,r,i,n,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return n={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function s(n){return function(s){return function(n){if(t)throw new TypeError("Generator is already executing.");for(;o;)try{if(t=1,r&&(i=2&n[0]?r.return:n[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,n[1])).done)return i;switch(r=0,i&&(n=[2&n[0],i.value]),n[0]){case 0:case 1:i=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,r=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!i||n[1]>i[0]&&n[1]<i[3])){o.label=n[1];break}if(6===n[0]&&o.label<i[1]){o.label=i[1],i=n;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(n);break}i[2]&&o.ops.pop(),o.trys.pop();continue}n=e.call(A,o)}catch(A){n=[6,A],r=0}finally{t=i=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,s])}}},DA=function(A){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&A[e],r=0;if(t)return t.call(A);if(A&&"number"==typeof A.length)return{next:function(){return A&&r>=A.length&&(A=void 0),{value:A&&A[r++],done:!A}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},NA={eth:1,erc20:2,erc721:3,erc20mintable:4,erc721mintable:5};const GA=function(){function A(A,e,t){void 0===e&&(e="w0w"),void 0===t&&(t={}),this.transport=A,this.loadConfig=t,A.decorateAppAPIMethods(this,["getAddress","provideERC20TokenInformation","signTransaction","signPersonalMessage","getAppConfiguration","signEIP712Message","signEIP712HashedMessage","starkGetPublicKey","starkSignOrder","starkSignOrder_v2","starkSignTransfer","starkSignTransfer_v2","starkProvideQuantum","starkProvideQuantum_v2","starkUnsafeSign","eth2GetPublicKey","eth2SetWithdrawalIndex","setExternalPlugin","setPlugin","getEIP1024PublicEncryptionKey","getEIP1024SharedSecret"],e)}return A.prototype.setLoadConfig=function(A){this.loadConfig=A},A.prototype.getAddress=function(A,e,t){var r=S(A),i=bA.alloc(1+4*r.length);return i[0]=r.length,r.forEach((function(A,e){i.writeUInt32BE(A,1+4*e)})),this.transport.send(224,2,e?1:0,t?1:0,i).then((function(A){var e=A[0],r=A[1+e];return{publicKey:A.slice(1,1+e).toString("hex"),address:"0x"+A.slice(1+e+1,1+e+1+r).toString("ascii"),chainCode:t?A.slice(1+e+1+r,1+e+1+r+32).toString("hex"):void 0}}))},A.prototype.signTransaction=function(A,e,t){return SA(this,void 0,void 0,(function(){var r,i,n,o,s,a,l,c,g,u,h,E,B,I,f,p,d,w,m,C,Q,R,y,U,v,M,T,b,F,D,G,V,k,O,x,Z,J,P,Y,H,L,j,W;return FA(this,(function(z){switch(z.label){case 0:return void 0!==t?[3,2]:(console.warn("hw-app-eth: signTransaction(path, rawTxHex, resolution): please provide the 'resolution' parameter. See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md – the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).// Possible solution:\n + import { ledgerService } from '@ledgerhq/hw-app-eth';\n + const resolution = await ledgerService.resolveTransaction(rawTxHex);"),[4,rA(e,this.loadConfig,{externalPlugins:!0,erc20:!0}).catch((function(A){return console.warn("an error occurred in resolveTransaction => fallback to blind signing: "+String(A)),null}))]);case 1:t=z.sent(),z.label=2;case 2:if(!t)return[3,31];z.label=3;case 3:z.trys.push([3,8,9,10]),r=DA(t.plugin),i=r.next(),z.label=4;case 4:return i.done?[3,7]:(n=i.value,[4,xA(this.transport,n)]);case 5:z.sent(),z.label=6;case 6:return i=r.next(),[3,4];case 7:return[3,10];case 8:return o=z.sent(),Z={error:o},[3,10];case 9:try{i&&!i.done&&(J=r.return)&&J.call(r)}finally{if(Z)throw Z.error}return[7];case 10:z.trys.push([10,15,16,17]),s=DA(t.externalPlugin),a=s.next(),z.label=11;case 11:return a.done?[3,14]:(l=a.value,c=l.payload,g=l.signature,[4,OA(this.transport,c,g)]);case 12:z.sent(),z.label=13;case 13:return a=s.next(),[3,11];case 14:return[3,17];case 15:return u=z.sent(),P={error:u},[3,17];case 16:try{a&&!a.done&&(Y=s.return)&&Y.call(s)}finally{if(P)throw P.error}return[7];case 17:z.trys.push([17,22,23,24]),h=DA(t.nfts),E=h.next(),z.label=18;case 18:return E.done?[3,21]:(B=E.value,[4,kA(this.transport,bA.from(B,"hex"))]);case 19:z.sent(),z.label=20;case 20:return E=h.next(),[3,18];case 21:return[3,24];case 22:return I=z.sent(),H={error:I},[3,24];case 23:try{E&&!E.done&&(L=h.return)&&L.call(h)}finally{if(H)throw H.error}return[7];case 24:z.trys.push([24,29,30,31]),f=DA(t.erc20Tokens),p=f.next(),z.label=25;case 25:return p.done?[3,28]:(d=p.value,[4,VA(this.transport,bA.from(d,"hex"))]);case 26:z.sent(),z.label=27;case 27:return p=f.next(),[3,25];case 28:return[3,31];case 29:return w=z.sent(),j={error:w},[3,31];case 30:try{p&&!p.done&&(W=f.return)&&W.call(f)}finally{if(j)throw j.error}return[7];case 31:m=bA.from(e,"hex"),C=N(m),Q=C.vrsOffset,R=C.txType,y=C.chainId,U=C.chainIdTruncated,v=S(A),T=0,b=function(){var A,e,t,r;return FA(this,(function(i){switch(i.label){case 0:return e=(A=0===T)?149-4*v.length:150,t=T+e>m.length?m.length-T:e,0!=Q&&T+t>=Q&&(t=m.length-T),r=bA.alloc(A?1+4*v.length+t:t),A?(r[0]=v.length,v.forEach((function(A,e){r.writeUInt32BE(A,1+4*e)})),m.copy(r,1+4*v.length,T,T+t)):m.copy(r,0,T,T+t),[4,F.transport.send(224,4,A?0:128,0,r).catch((function(A){throw function(A){return A&&27264===A.statusCode?new EA("Please enable Blind signing or Contract data in the Ethereum app Settings"):A}(A)}))];case 1:return M=i.sent(),T+=t,[2]}}))},F=this,z.label=32;case 32:return T===m.length?[3,34]:[5,b()];case 33:return z.sent(),[3,32];case 34:return D=M[0],G="",y.times(2).plus(35).plus(1).isGreaterThan(255)?(V=(2*U+35)%256,k=Math.abs(D-V),G=null!=R?k%2==1?"00":"01":y.times(2).plus(35).plus(k).toString(16)):G=D.toString(16),G.length%2==1&&(G="0"+G),O=M.slice(1,33).toString("hex"),x=M.slice(33,65).toString("hex"),[2,{v:G,r:O,s:x}]}}))}))},A.prototype.getAppConfiguration=function(){return this.transport.send(224,6,0,0).then((function(A){return{arbitraryDataEnabled:1&A[0],erc20ProvisioningNecessary:2&A[0],starkEnabled:4&A[0],starkv2Supported:8&A[0],version:A[1]+"."+A[2]+"."+A[3]}}))},A.prototype.signPersonalMessage=function(A,e){return SA(this,void 0,void 0,(function(){var t,r,i,n,o,s,a,l,c;return FA(this,(function(g){switch(g.label){case 0:t=S(A),r=0,i=bA.from(e,"hex"),o=function(){var A,e,o;return FA(this,(function(a){switch(a.label){case 0:return A=0===r?149-4*t.length-4:150,e=r+A>i.length?i.length-r:A,o=bA.alloc(0===r?1+4*t.length+4+e:e),0===r?(o[0]=t.length,t.forEach((function(A,e){o.writeUInt32BE(A,1+4*e)})),o.writeUInt32BE(i.length,1+4*t.length),i.copy(o,1+4*t.length+4,r,r+e)):i.copy(o,0,r,r+e),[4,s.transport.send(224,8,0===r?0:128,0,o)];case 1:return n=a.sent(),r+=e,[2]}}))},s=this,g.label=1;case 1:return r===i.length?[3,3]:[5,o()];case 2:return g.sent(),[3,1];case 3:return a=n[0],l=n.slice(1,33).toString("hex"),c=n.slice(33,65).toString("hex"),[2,{v:a,r:l,s:c}]}}))}))},A.prototype.signEIP712HashedMessage=function(A,e,t){return function(A,e,t,r){var i=F(t),n=F(r),o=S(e),s=mA.alloc(1+4*o.length+32+32,0),a=0;return s[0]=o.length,o.forEach((function(A,e){s.writeUInt32BE(A,1+4*e)})),a=1+4*o.length,i.copy(s,a),a+=32,n.copy(s,a),A.send(224,12,0,0,s).then((function(A){return{v:A[0],r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))}(this.transport,A,e,t)},A.prototype.signEIP712Message=function(A,e,t){return void 0===t&&(t=!1),SA(this,void 0,void 0,(function(){return FA(this,(function(r){return[2,TA(this.transport,A,e,t)]}))}))},A.prototype.starkGetPublicKey=function(A,e){var t=S(A),r=bA.alloc(1+4*t.length);return r[0]=t.length,t.forEach((function(A,e){r.writeUInt32BE(A,1+4*e)})),this.transport.send(240,2,e?1:0,0,r).then((function(A){return A.slice(0,A.length-2)}))},A.prototype.starkSignOrder=function(A,e,t,r,i,n,o,s,a,l,c){var g=D(e),u=D(r),h=S(A),E=bA.alloc(1+4*h.length+20+32+20+32+4+4+8+8+4+4,0),B=0;return E[0]=h.length,h.forEach((function(A,e){E.writeUInt32BE(A,1+4*e)})),B=1+4*h.length,g&&g.copy(E,B),B+=20,bA.from(t.toString(16).padStart(64,"0"),"hex").copy(E,B),B+=32,u&&u.copy(E,B),B+=20,bA.from(i.toString(16).padStart(64,"0"),"hex").copy(E,B),B+=32,E.writeUInt32BE(n,B),B+=4,E.writeUInt32BE(o,B),B+=4,bA.from(s.toString(16).padStart(16,"0"),"hex").copy(E,B),B+=8,bA.from(a.toString(16).padStart(16,"0"),"hex").copy(E,B),B+=8,E.writeUInt32BE(l,B),B+=4,E.writeUInt32BE(c,B),this.transport.send(240,4,1,0,E).then((function(A){return{r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))},A.prototype.starkSignOrder_v2=function(A,e,t,r,i,n,o,s,a,l,c,g,u,h,E){var B=D(e),I=D(n);if(!(t in NA))throw new Error("eth.starkSignOrderv2 invalid source quantization type="+t);if(!(o in NA))throw new Error("eth.starkSignOrderv2 invalid destination quantization type="+o);var f=S(A),p=bA.alloc(1+4*f.length+1+20+32+32+1+20+32+32+4+4+8+8+4+4,0),d=0;return p[0]=f.length,f.forEach((function(A,e){p.writeUInt32BE(A,1+4*e)})),d=1+4*f.length,p[d]=NA[t],d++,B&&B.copy(p,d),d+=20,r&&bA.from(r.toString(16).padStart(64,"0"),"hex").copy(p,d),d+=32,i&&bA.from(i.toString(16).padStart(64,"0"),"hex").copy(p,d),p[d+=32]=NA[o],d++,I&&I.copy(p,d),d+=20,s&&bA.from(s.toString(16).padStart(64,"0"),"hex").copy(p,d),d+=32,a&&bA.from(a.toString(16).padStart(64,"0"),"hex").copy(p,d),d+=32,p.writeUInt32BE(l,d),d+=4,p.writeUInt32BE(c,d),d+=4,bA.from(g.toString(16).padStart(16,"0"),"hex").copy(p,d),d+=8,bA.from(u.toString(16).padStart(16,"0"),"hex").copy(p,d),d+=8,p.writeUInt32BE(h,d),d+=4,p.writeUInt32BE(E,d),this.transport.send(240,4,3,0,p).then((function(A){return{r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))},A.prototype.starkSignTransfer=function(A,e,t,r,i,n,o,s,a){var l=D(e),c=F(r),g=S(A),u=bA.alloc(1+4*g.length+20+32+32+4+4+8+4+4,0),h=0;return u[0]=g.length,g.forEach((function(A,e){u.writeUInt32BE(A,1+4*e)})),h=1+4*g.length,l&&l.copy(u,h),h+=20,bA.from(t.toString(16).padStart(64,"0"),"hex").copy(u,h),h+=32,c.copy(u,h),h+=32,u.writeUInt32BE(i,h),h+=4,u.writeUInt32BE(n,h),h+=4,bA.from(o.toString(16).padStart(16,"0"),"hex").copy(u,h),h+=8,u.writeUInt32BE(s,h),h+=4,u.writeUInt32BE(a,h),this.transport.send(240,4,2,0,u).then((function(A){return{r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))},A.prototype.starkSignTransfer_v2=function(A,e,t,r,i,n,o,s,a,l,c,g,u){var h=D(e),E=F(n),B=D(g);if(!(t in NA))throw new Error("eth.starkSignTransferv2 invalid quantization type="+t);var I=S(A),f=bA.alloc(1+4*I.length+1+20+32+32+32+4+4+8+4+4+(B?52:0),0),p=0;return f[0]=I.length,I.forEach((function(A,e){f.writeUInt32BE(A,1+4*e)})),p=1+4*I.length,f[p]=NA[t],p++,h&&h.copy(f,p),p+=20,r&&bA.from(r.toString(16).padStart(64,"0"),"hex").copy(f,p),p+=32,i&&bA.from(i.toString(16).padStart(64,"0"),"hex").copy(f,p),p+=32,E.copy(f,p),p+=32,f.writeUInt32BE(o,p),p+=4,f.writeUInt32BE(s,p),p+=4,bA.from(a.toString(16).padStart(16,"0"),"hex").copy(f,p),p+=8,f.writeUInt32BE(l,p),p+=4,f.writeUInt32BE(c,p),B&&u&&(p+=4,bA.from(u.toString(16).padStart(64,"0"),"hex").copy(f,p),p+=32,B.copy(f,p)),this.transport.send(240,4,B?5:4,0,f).then((function(A){return{r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))},A.prototype.starkProvideQuantum=function(A,e){var t=D(A),r=bA.alloc(52,0);return t&&t.copy(r,0),bA.from(e.toString(16).padStart(64,"0"),"hex").copy(r,20),this.transport.send(240,8,0,0,r).then((function(){return!0}),(function(A){if(A&&27904===A.statusCode)return!1;throw A}))},A.prototype.starkProvideQuantum_v2=function(A,e,t,r){var i=D(A);if(!(e in NA))throw new Error("eth.starkProvideQuantumV2 invalid quantization type="+e);var n=bA.alloc(84,0),o=0;return i&&i.copy(n,o),o+=20,t&&bA.from(t.toString(16).padStart(64,"0"),"hex").copy(n,o),o+=32,r&&bA.from(r.toString(16).padStart(64,"0"),"hex").copy(n,o),this.transport.send(240,8,NA[e],0,n).then((function(){return!0}),(function(A){if(A&&27904===A.statusCode)return!1;throw A}))},A.prototype.starkUnsafeSign=function(A,e){var t,r=F(e),i=S(A),n=bA.alloc(1+4*i.length+32);return n[0]=i.length,i.forEach((function(A,e){n.writeUInt32BE(A,1+4*e)})),t=1+4*i.length,r.copy(n,t),this.transport.send(240,10,0,0,n).then((function(A){return{r:A.slice(1,33).toString("hex"),s:A.slice(33,65).toString("hex")}}))},A.prototype.eth2GetPublicKey=function(A,e){var t=S(A),r=bA.alloc(1+4*t.length);return r[0]=t.length,t.forEach((function(A,e){r.writeUInt32BE(A,1+4*e)})),this.transport.send(224,14,e?1:0,0,r).then((function(A){return{publicKey:A.slice(0,-2).toString("hex")}}))},A.prototype.eth2SetWithdrawalIndex=function(A){var e=bA.alloc(4,0);return e.writeUInt32BE(A,0),this.transport.send(224,16,0,0,e).then((function(){return!0}),(function(A){if(A&&27904===A.statusCode)return!1;throw A}))},A.prototype.getEIP1024PublicEncryptionKey=function(A,e){var t=S(A),r=bA.alloc(1+4*t.length);return r[0]=t.length,t.forEach((function(A,e){r.writeUInt32BE(A,1+4*e)})),this.transport.send(224,24,e?1:0,0,r).then((function(A){return{publicKey:A.slice(0,-2).toString("hex")}}))},A.prototype.getEIP1024SharedSecret=function(A,e,t){var r,i=S(A),n=F(e),o=bA.alloc(1+4*i.length+32);return o[0]=i.length,i.forEach((function(A,e){o.writeUInt32BE(A,1+4*e)})),r=1+4*i.length,n.copy(o,r),this.transport.send(224,24,t?1:0,1,o).then((function(A){return{sharedSecret:A.slice(0,-2).toString("hex")}}))},A.prototype.provideERC20TokenInformation=function(A){var e=A.data;return VA(this.transport,e)},A.prototype.setExternalPlugin=function(A,e,t){return console.warn("hw-app-eth: eth.setExternalPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`."),OA(this.transport,A,t)},A.prototype.setPlugin=function(A){return console.warn("hw-app-eth: eth.setPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`."),xA(this.transport,A)},A}();function VA(A,e){return A.send(224,10,0,0,e).then((function(){return!0}),(function(A){if(A&&27904===A.statusCode)return!1;throw A}))}function kA(A,e){return A.send(224,20,0,0,e).then((function(){return!0}),(function(A){if(A&&27904===A.statusCode)throw new BA;throw A}))}function OA(A,e,t){var r=bA.from(e,"hex"),i=bA.from(t,"hex"),n=bA.concat([r,i]);return A.send(224,18,0,0,n).then((function(){return!0}),(function(A){if(A&&27264===A.statusCode)return!1;if(A&&27012===A.statusCode)return!1;if(A&&27904===A.statusCode)return!1;throw A}))}function xA(A,e){var t=bA.from(e,"hex");return A.send(224,22,0,0,t).then((function(){return!0}),(function(A){if(A&&27264===A.statusCode)return!1;if(A&&27012===A.statusCode)return!1;if(A&&27904===A.statusCode)return!1;throw A}))}},99350:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SHA2=void 0;const r=t(70064);class i extends r.Hash{constructor(A,e,t,i){super(),this.blockLen=A,this.outputLen=e,this.padOffset=t,this.isLE=i,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(A),this.view=(0,r.createView)(this.buffer)}update(A){if(this.destroyed)throw new Error("instance is destroyed");const{view:e,buffer:t,blockLen:i,finished:n}=this;if(n)throw new Error("digest() was already called");const o=(A=(0,r.toBytes)(A)).length;for(let n=0;n<o;){const s=Math.min(i-this.pos,o-n);if(s!==i)t.set(A.subarray(n,n+s),this.pos),this.pos+=s,n+=s,this.pos===i&&(this.process(e,0),this.pos=0);else{const e=(0,r.createView)(A);for(;i<=o-n;n+=i)this.process(e,n)}}return this.length+=A.length,this.roundClean(),this}digestInto(A){if(this.destroyed)throw new Error("instance is destroyed");if(!(A instanceof Uint8Array)||A.length<this.outputLen)throw new Error("_Sha2: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0;const{buffer:e,view:t,blockLen:i,isLE:n}=this;let{pos:o}=this;e[o++]=128,this.buffer.subarray(o).fill(0),this.padOffset>i-o&&(this.process(t,0),o=0);for(let A=o;A<i;A++)e[A]=0;!function(A,e,t,r){if("function"==typeof A.setBigUint64)return A.setBigUint64(e,t,r);const i=BigInt(32),n=BigInt(4294967295),o=Number(t>>i&n),s=Number(t&n),a=r?4:0,l=r?0:4;A.setUint32(e+a,o,r),A.setUint32(e+l,s,r)}(t,i-8,BigInt(8*this.length),n),this.process(t,0);const s=(0,r.createView)(A);this.get().forEach(((A,e)=>s.setUint32(4*e,A,n)))}digest(){const{buffer:A,outputLen:e}=this;this.digestInto(A);const t=A.slice(0,e);return this.destroy(),t}_cloneInto(A){A||(A=new this.constructor),A.set(...this.get());const{blockLen:e,buffer:t,length:r,finished:i,destroyed:n,pos:o}=this;return A.length=r,A.pos=o,A.finished=i,A.destroyed=n,r%e&&A.buffer.set(t),A}}e.SHA2=i},94661:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.crypto=void 0,e.crypto={node:void 0,web:"object"==typeof self&&"crypto"in self?self.crypto:void 0}},87760:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hkdf=e.expand=e.extract=void 0;const r=t(70064),i=t(41377);function n(A,e,t){return(0,r.assertHash)(A),void 0===t&&(t=new Uint8Array(A.outputLen)),(0,i.hmac)(A,(0,r.toBytes)(t),(0,r.toBytes)(e))}e.extract=n;const o=new Uint8Array([0]),s=new Uint8Array;function a(A,e,t,n=32){if((0,r.assertHash)(A),(0,r.assertNumber)(n),n>255*A.outputLen)throw new Error("Length should be <= 255*HashLen");const a=Math.ceil(n/A.outputLen);void 0===t&&(t=s);const l=new Uint8Array(a*A.outputLen),c=i.hmac.create(A,e),g=c._cloneInto(),u=new Uint8Array(c.outputLen);for(let e=0;e<a;e++)o[0]=e+1,g.update(0===e?s:u).update(t).update(o).digestInto(u),l.set(u,A.outputLen*e),c._cloneInto(g);return c.destroy(),g.destroy(),u.fill(0),o.fill(0),l.slice(0,n)}e.expand=a,e.hkdf=(A,e,t,r,i)=>a(A,n(A,e,t),r,i)},41377:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hmac=void 0;const r=t(70064);class i extends r.Hash{constructor(A,e){super(),this.finished=!1,this.destroyed=!1,(0,r.assertHash)(A);const t=(0,r.toBytes)(e);if(this.iHash=A.create(),!(this.iHash instanceof r.Hash))throw new TypeError("Expected instance of class which extends utils.Hash");const i=this.blockLen=this.iHash.blockLen;this.outputLen=this.iHash.outputLen;const n=new Uint8Array(i);n.set(t.length>this.iHash.blockLen?A.create().update(t).digest():t);for(let A=0;A<n.length;A++)n[A]^=54;this.iHash.update(n),this.oHash=A.create();for(let A=0;A<n.length;A++)n[A]^=106;this.oHash.update(n),n.fill(0)}update(A){if(this.destroyed)throw new Error("instance is destroyed");return this.iHash.update(A),this}digestInto(A){if(this.destroyed)throw new Error("instance is destroyed");if(!(A instanceof Uint8Array)||A.length!==this.outputLen)throw new Error("HMAC: Invalid output buffer");if(this.finished)throw new Error("digest() was already called");this.finished=!0,this.iHash.digestInto(A),this.oHash.update(A),this.oHash.digestInto(A),this.destroy()}digest(){const A=new Uint8Array(this.oHash.outputLen);return this.digestInto(A),A}_cloneInto(A){A||(A=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:t,finished:r,destroyed:i,blockLen:n,outputLen:o}=this;return A.finished=r,A.destroyed=i,A.blockLen=n,A.outputLen=o,A.oHash=e._cloneInto(A.oHash),A.iHash=t._cloneInto(A.iHash),A}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}e.hmac=(A,e,t)=>new i(A,e).update(t).digest(),e.hmac.create=(A,e)=>new i(A,e)},96053:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sha256=void 0;const r=t(99350),i=t(70064),n=(A,e,t)=>A&e^A&t^e&t,o=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),s=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),a=new Uint32Array(64);class l extends r.SHA2{constructor(){super(64,32,8,!1),this.A=0|s[0],this.B=0|s[1],this.C=0|s[2],this.D=0|s[3],this.E=0|s[4],this.F=0|s[5],this.G=0|s[6],this.H=0|s[7]}get(){const{A,B:e,C:t,D:r,E:i,F:n,G:o,H:s}=this;return[A,e,t,r,i,n,o,s]}set(A,e,t,r,i,n,o,s){this.A=0|A,this.B=0|e,this.C=0|t,this.D=0|r,this.E=0|i,this.F=0|n,this.G=0|o,this.H=0|s}process(A,e){for(let t=0;t<16;t++,e+=4)a[t]=A.getUint32(e,!1);for(let A=16;A<64;A++){const e=a[A-15],t=a[A-2],r=(0,i.rotr)(e,7)^(0,i.rotr)(e,18)^e>>>3,n=(0,i.rotr)(t,17)^(0,i.rotr)(t,19)^t>>>10;a[A]=n+a[A-7]+r+a[A-16]|0}let{A:t,B:r,C:s,D:l,E:c,F:g,G:u,H:h}=this;for(let A=0;A<64;A++){const e=h+((0,i.rotr)(c,6)^(0,i.rotr)(c,11)^(0,i.rotr)(c,25))+((E=c)&g^~E&u)+o[A]+a[A]|0,B=((0,i.rotr)(t,2)^(0,i.rotr)(t,13)^(0,i.rotr)(t,22))+n(t,r,s)|0;h=u,u=g,g=c,c=l+e|0,l=s,s=r,r=t,t=e+B|0}var E;t=t+this.A|0,r=r+this.B|0,s=s+this.C|0,l=l+this.D|0,c=c+this.E|0,g=g+this.F|0,u=u+this.G|0,h=h+this.H|0,this.set(t,r,s,l,c,g,u,h)}roundClean(){a.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}e.sha256=(0,i.wrapConstructor)((()=>new l))},70064:(A,e,t)=>{"use strict";A=t.nmd(A),Object.defineProperty(e,"__esModule",{value:!0}),e.randomBytes=e.wrapConstructorWithOpts=e.wrapConstructor=e.checkOpts=e.Hash=e.assertHash=e.assertBytes=e.assertBool=e.assertNumber=e.concatBytes=e.toBytes=e.utf8ToBytes=e.asyncLoop=e.nextTick=e.hexToBytes=e.bytesToHex=e.isLE=e.rotr=e.createView=e.u32=e.u8=void 0;const r=t(94661);if(e.u8=A=>new Uint8Array(A.buffer,A.byteOffset,A.byteLength),e.u32=A=>new Uint32Array(A.buffer,A.byteOffset,Math.floor(A.byteLength/4)),e.createView=A=>new DataView(A.buffer,A.byteOffset,A.byteLength),e.rotr=(A,e)=>A<<32-e|A>>>e,e.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!e.isLE)throw new Error("Non little-endian hardware is not supported");const i=Array.from({length:256},((A,e)=>e.toString(16).padStart(2,"0")));function n(A){if("string"!=typeof A)throw new TypeError("utf8ToBytes expected string, got "+typeof A);return(new TextEncoder).encode(A)}function o(A){if("string"==typeof A&&(A=n(A)),!(A instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof A})`);return A}function s(A){if(!Number.isSafeInteger(A)||A<0)throw new Error(`Wrong positive integer: ${A}`)}e.bytesToHex=function(A){let e="";for(let t=0;t<A.length;t++)e+=i[A[t]];return e},e.hexToBytes=function(A){if("string"!=typeof A)throw new TypeError("hexToBytes: expected string, got "+typeof A);if(A.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const e=new Uint8Array(A.length/2);for(let t=0;t<e.length;t++){const r=2*t,i=A.slice(r,r+2),n=Number.parseInt(i,16);if(Number.isNaN(n))throw new Error("Invalid byte sequence");e[t]=n}return e},e.nextTick=(()=>{const e="function"==typeof A.require&&A.require.bind(A);try{if(e){const{setImmediate:A}=e("timers");return()=>new Promise((e=>A(e)))}}catch(A){}return()=>new Promise((A=>setTimeout(A,0)))})(),e.asyncLoop=async function(A,t,r){let i=Date.now();for(let n=0;n<A;n++){r(n);const A=Date.now()-i;A>=0&&A<t||(await(0,e.nextTick)(),i+=A)}},e.utf8ToBytes=n,e.toBytes=o,e.concatBytes=function(...A){if(!A.every((A=>A instanceof Uint8Array)))throw new Error("Uint8Array list expected");if(1===A.length)return A[0];const e=A.reduce(((A,e)=>A+e.length),0),t=new Uint8Array(e);for(let e=0,r=0;e<A.length;e++){const i=A[e];t.set(i,r),r+=i.length}return t},e.assertNumber=s,e.assertBool=function(A){if("boolean"!=typeof A)throw new Error(`Expected boolean, not ${A}`)},e.assertBytes=function(A,...e){if(!(A instanceof Uint8Array)||e.length&&!e.includes(A.length))throw new TypeError(`Expected ${e} bytes, not ${typeof A} with length=${A.length}`)},e.assertHash=function(A){if("function"!=typeof A||"function"!=typeof A.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");s(A.outputLen),s(A.blockLen)},e.Hash=class{clone(){return this._cloneInto()}},e.checkOpts=function(A,e){if(void 0!==e&&("object"!=typeof e||(t=e,"[object Object]"!==Object.prototype.toString.call(t)||t.constructor!==Object)))throw new TypeError("Options should be object or undefined");var t;return Object.assign(A,e)},e.wrapConstructor=function(A){const e=e=>A().update(o(e)).digest(),t=A();return e.outputLen=t.outputLen,e.blockLen=t.blockLen,e.create=()=>A(),e},e.wrapConstructorWithOpts=function(A){const e=(e,t)=>A(t).update(o(e)).digest(),t=A({});return e.outputLen=t.outputLen,e.blockLen=t.blockLen,e.create=e=>A(e),e},e.randomBytes=function(A=32){if(r.crypto.web)return r.crypto.web.getRandomValues(new Uint8Array(A));if(r.crypto.node)return new Uint8Array(r.crypto.node.randomBytes(A).buffer);throw new Error("The environment doesn't have randomBytes function")}},46781:A=>{"use strict";A.exports=function(A,e){for(var t=new Array(arguments.length-1),r=0,i=2,n=!0;i<arguments.length;)t[r++]=arguments[i++];return new Promise((function(i,o){t[r]=function(A){if(n)if(n=!1,A)o(A);else{for(var e=new Array(arguments.length-1),t=0;t<e.length;)e[t++]=arguments[t];i.apply(null,e)}};try{A.apply(e||null,t)}catch(A){n&&(n=!1,o(A))}}))}},87026:(A,e)=>{"use strict";var t=e;t.length=function(A){var e=A.length;if(!e)return 0;for(var t=0;--e%4>1&&"="===A.charAt(e);)++t;return Math.ceil(3*A.length)/4-t};for(var r=new Array(64),i=new Array(123),n=0;n<64;)i[r[n]=n<26?n+65:n<52?n+71:n<62?n-4:n-59|43]=n++;t.encode=function(A,e,t){for(var i,n=null,o=[],s=0,a=0;e<t;){var l=A[e++];switch(a){case 0:o[s++]=r[l>>2],i=(3&l)<<4,a=1;break;case 1:o[s++]=r[i|l>>4],i=(15&l)<<2,a=2;break;case 2:o[s++]=r[i|l>>6],o[s++]=r[63&l],a=0}s>8191&&((n||(n=[])).push(String.fromCharCode.apply(String,o)),s=0)}return a&&(o[s++]=r[i],o[s++]=61,1===a&&(o[s++]=61)),n?(s&&n.push(String.fromCharCode.apply(String,o.slice(0,s))),n.join("")):String.fromCharCode.apply(String,o.slice(0,s))};var o="invalid encoding";t.decode=function(A,e,t){for(var r,n=t,s=0,a=0;a<A.length;){var l=A.charCodeAt(a++);if(61===l&&s>1)break;if(void 0===(l=i[l]))throw Error(o);switch(s){case 0:r=l,s=1;break;case 1:e[t++]=r<<2|(48&l)>>4,r=l,s=2;break;case 2:e[t++]=(15&r)<<4|(60&l)>>2,r=l,s=3;break;case 3:e[t++]=(3&r)<<6|l,s=0}}if(1===s)throw Error(o);return t-n},t.test=function(A){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(A)}},15570:A=>{"use strict";function e(){this._listeners={}}A.exports=e,e.prototype.on=function(A,e,t){return(this._listeners[A]||(this._listeners[A]=[])).push({fn:e,ctx:t||this}),this},e.prototype.off=function(A,e){if(void 0===A)this._listeners={};else if(void 0===e)this._listeners[A]=[];else for(var t=this._listeners[A],r=0;r<t.length;)t[r].fn===e?t.splice(r,1):++r;return this},e.prototype.emit=function(A){var e=this._listeners[A];if(e){for(var t=[],r=1;r<arguments.length;)t.push(arguments[r++]);for(r=0;r<e.length;)e[r].fn.apply(e[r++].ctx,t)}return this}},5298:A=>{"use strict";function e(A){return"undefined"!=typeof Float32Array?function(){var e=new Float32Array([-0]),t=new Uint8Array(e.buffer),r=128===t[3];function i(A,r,i){e[0]=A,r[i]=t[0],r[i+1]=t[1],r[i+2]=t[2],r[i+3]=t[3]}function n(A,r,i){e[0]=A,r[i]=t[3],r[i+1]=t[2],r[i+2]=t[1],r[i+3]=t[0]}function o(A,r){return t[0]=A[r],t[1]=A[r+1],t[2]=A[r+2],t[3]=A[r+3],e[0]}function s(A,r){return t[3]=A[r],t[2]=A[r+1],t[1]=A[r+2],t[0]=A[r+3],e[0]}A.writeFloatLE=r?i:n,A.writeFloatBE=r?n:i,A.readFloatLE=r?o:s,A.readFloatBE=r?s:o}():function(){function e(A,e,t,r){var i=e<0?1:0;if(i&&(e=-e),0===e)A(1/e>0?0:2147483648,t,r);else if(isNaN(e))A(2143289344,t,r);else if(e>34028234663852886e22)A((i<<31|2139095040)>>>0,t,r);else if(e<11754943508222875e-54)A((i<<31|Math.round(e/1401298464324817e-60))>>>0,t,r);else{var n=Math.floor(Math.log(e)/Math.LN2);A((i<<31|n+127<<23|8388607&Math.round(e*Math.pow(2,-n)*8388608))>>>0,t,r)}}function o(A,e,t){var r=A(e,t),i=2*(r>>31)+1,n=r>>>23&255,o=8388607&r;return 255===n?o?NaN:i*(1/0):0===n?1401298464324817e-60*i*o:i*Math.pow(2,n-150)*(o+8388608)}A.writeFloatLE=e.bind(null,t),A.writeFloatBE=e.bind(null,r),A.readFloatLE=o.bind(null,i),A.readFloatBE=o.bind(null,n)}(),"undefined"!=typeof Float64Array?function(){var e=new Float64Array([-0]),t=new Uint8Array(e.buffer),r=128===t[7];function i(A,r,i){e[0]=A,r[i]=t[0],r[i+1]=t[1],r[i+2]=t[2],r[i+3]=t[3],r[i+4]=t[4],r[i+5]=t[5],r[i+6]=t[6],r[i+7]=t[7]}function n(A,r,i){e[0]=A,r[i]=t[7],r[i+1]=t[6],r[i+2]=t[5],r[i+3]=t[4],r[i+4]=t[3],r[i+5]=t[2],r[i+6]=t[1],r[i+7]=t[0]}function o(A,r){return t[0]=A[r],t[1]=A[r+1],t[2]=A[r+2],t[3]=A[r+3],t[4]=A[r+4],t[5]=A[r+5],t[6]=A[r+6],t[7]=A[r+7],e[0]}function s(A,r){return t[7]=A[r],t[6]=A[r+1],t[5]=A[r+2],t[4]=A[r+3],t[3]=A[r+4],t[2]=A[r+5],t[1]=A[r+6],t[0]=A[r+7],e[0]}A.writeDoubleLE=r?i:n,A.writeDoubleBE=r?n:i,A.readDoubleLE=r?o:s,A.readDoubleBE=r?s:o}():function(){function e(A,e,t,r,i,n){var o=r<0?1:0;if(o&&(r=-r),0===r)A(0,i,n+e),A(1/r>0?0:2147483648,i,n+t);else if(isNaN(r))A(0,i,n+e),A(2146959360,i,n+t);else if(r>17976931348623157e292)A(0,i,n+e),A((o<<31|2146435072)>>>0,i,n+t);else{var s;if(r<22250738585072014e-324)A((s=r/5e-324)>>>0,i,n+e),A((o<<31|s/4294967296)>>>0,i,n+t);else{var a=Math.floor(Math.log(r)/Math.LN2);1024===a&&(a=1023),A(4503599627370496*(s=r*Math.pow(2,-a))>>>0,i,n+e),A((o<<31|a+1023<<20|1048576*s&1048575)>>>0,i,n+t)}}}function o(A,e,t,r,i){var n=A(r,i+e),o=A(r,i+t),s=2*(o>>31)+1,a=o>>>20&2047,l=4294967296*(1048575&o)+n;return 2047===a?l?NaN:s*(1/0):0===a?5e-324*s*l:s*Math.pow(2,a-1075)*(l+4503599627370496)}A.writeDoubleLE=e.bind(null,t,0,4),A.writeDoubleBE=e.bind(null,r,4,0),A.readDoubleLE=o.bind(null,i,0,4),A.readDoubleBE=o.bind(null,n,4,0)}(),A}function t(A,e,t){e[t]=255&A,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}function r(A,e,t){e[t]=A>>>24,e[t+1]=A>>>16&255,e[t+2]=A>>>8&255,e[t+3]=255&A}function i(A,e){return(A[e]|A[e+1]<<8|A[e+2]<<16|A[e+3]<<24)>>>0}function n(A,e){return(A[e]<<24|A[e+1]<<16|A[e+2]<<8|A[e+3])>>>0}A.exports=e(e)},36116:module=>{"use strict";function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(A){}return null}module.exports=inquire},90804:A=>{"use strict";A.exports=function(A,e,t){var r=t||8192,i=r>>>1,n=null,o=r;return function(t){if(t<1||t>i)return A(t);o+t>r&&(n=A(r),o=0);var s=e.call(n,o,o+=t);return 7&o&&(o=1+(7|o)),s}}},57958:(A,e)=>{"use strict";var t=e;t.length=function(A){for(var e=0,t=0,r=0;r<A.length;++r)(t=A.charCodeAt(r))<128?e+=1:t<2048?e+=2:55296==(64512&t)&&56320==(64512&A.charCodeAt(r+1))?(++r,e+=4):e+=3;return e},t.read=function(A,e,t){if(t-e<1)return"";for(var r,i=null,n=[],o=0;e<t;)(r=A[e++])<128?n[o++]=r:r>191&&r<224?n[o++]=(31&r)<<6|63&A[e++]:r>239&&r<365?(r=((7&r)<<18|(63&A[e++])<<12|(63&A[e++])<<6|63&A[e++])-65536,n[o++]=55296+(r>>10),n[o++]=56320+(1023&r)):n[o++]=(15&r)<<12|(63&A[e++])<<6|63&A[e++],o>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,n)),o=0);return i?(o&&i.push(String.fromCharCode.apply(String,n.slice(0,o))),i.join("")):String.fromCharCode.apply(String,n.slice(0,o))},t.write=function(A,e,t){for(var r,i,n=t,o=0;o<A.length;++o)(r=A.charCodeAt(o))<128?e[t++]=r:r<2048?(e[t++]=r>>6|192,e[t++]=63&r|128):55296==(64512&r)&&56320==(64512&(i=A.charCodeAt(o+1)))?(r=65536+((1023&r)<<10)+(1023&i),++o,e[t++]=r>>18|240,e[t++]=r>>12&63|128,e[t++]=r>>6&63|128,e[t++]=63&r|128):(e[t++]=r>>12|224,e[t++]=r>>6&63|128,e[t++]=63&r|128);return t-n}},17022:(A,e,t)=>{var r=t(18166);A.exports=r("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},88616:(A,e,t)=>{"use strict";var r=t(17022),i=t(77834).Buffer;A.exports=function(A){function e(e){var t=e.slice(0,-4),r=e.slice(-4),i=A(t);if(!(r[0]^i[0]|r[1]^i[1]|r[2]^i[2]|r[3]^i[3]))return t}return{encode:function(e){var t=A(e);return r.encode(i.concat([e,t],e.length+4))},decode:function(A){var t=e(r.decode(A));if(!t)throw new Error("Invalid checksum");return t},decodeUnsafe:function(A){var t=r.decodeUnsafe(A);if(t)return e(t)}}}},44075:(A,e,t)=>{"use strict";var r=t(16162),i=t(88616);A.exports=i((function(A){var e=r("sha256").update(A).digest();return r("sha256").update(e).digest()}))},19131:A=>{var e=!("undefined"==typeof window||!window.document||!window.document.createElement);A.exports=e},11103:A=>{"use strict";A.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},67804:(A,e,t)=>{var r=t(11103),i=t(26047),n=Object.hasOwnProperty,o=Object.create(null);for(var s in r)n.call(r,s)&&(o[r[s]]=s);var a=A.exports={to:{},get:{}};function l(A,e,t){return Math.min(Math.max(e,A),t)}function c(A){var e=Math.round(A).toString(16).toUpperCase();return e.length<2?"0"+e:e}a.get=function(A){var e,t;switch(A.substring(0,3).toLowerCase()){case"hsl":e=a.get.hsl(A),t="hsl";break;case"hwb":e=a.get.hwb(A),t="hwb";break;default:e=a.get.rgb(A),t="rgb"}return e?{model:t,value:e}:null},a.get.rgb=function(A){if(!A)return null;var e,t,i,o=[0,0,0,1];if(e=A.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(i=e[2],e=e[1],t=0;t<3;t++){var s=2*t;o[t]=parseInt(e.slice(s,s+2),16)}i&&(o[3]=parseInt(i,16)/255)}else if(e=A.match(/^#([a-f0-9]{3,4})$/i)){for(i=(e=e[1])[3],t=0;t<3;t++)o[t]=parseInt(e[t]+e[t],16);i&&(o[3]=parseInt(i+i,16)/255)}else if(e=A.match(/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)){for(t=0;t<3;t++)o[t]=parseInt(e[t+1],0);e[4]&&(e[5]?o[3]=.01*parseFloat(e[4]):o[3]=parseFloat(e[4]))}else{if(!(e=A.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)))return(e=A.match(/^(\w+)$/))?"transparent"===e[1]?[0,0,0,0]:n.call(r,e[1])?((o=r[e[1]])[3]=1,o):null:null;for(t=0;t<3;t++)o[t]=Math.round(2.55*parseFloat(e[t+1]));e[4]&&(e[5]?o[3]=.01*parseFloat(e[4]):o[3]=parseFloat(e[4]))}for(t=0;t<3;t++)o[t]=l(o[t],0,255);return o[3]=l(o[3],0,1),o},a.get.hsl=function(A){if(!A)return null;var e=A.match(/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);if(e){var t=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,l(parseFloat(e[2]),0,100),l(parseFloat(e[3]),0,100),l(isNaN(t)?1:t,0,1)]}return null},a.get.hwb=function(A){if(!A)return null;var e=A.match(/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);if(e){var t=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,l(parseFloat(e[2]),0,100),l(parseFloat(e[3]),0,100),l(isNaN(t)?1:t,0,1)]}return null},a.to.hex=function(){var A=i(arguments);return"#"+c(A[0])+c(A[1])+c(A[2])+(A[3]<1?c(Math.round(255*A[3])):"")},a.to.rgb=function(){var A=i(arguments);return A.length<4||1===A[3]?"rgb("+Math.round(A[0])+", "+Math.round(A[1])+", "+Math.round(A[2])+")":"rgba("+Math.round(A[0])+", "+Math.round(A[1])+", "+Math.round(A[2])+", "+A[3]+")"},a.to.rgb.percent=function(){var A=i(arguments),e=Math.round(A[0]/255*100),t=Math.round(A[1]/255*100),r=Math.round(A[2]/255*100);return A.length<4||1===A[3]?"rgb("+e+"%, "+t+"%, "+r+"%)":"rgba("+e+"%, "+t+"%, "+r+"%, "+A[3]+")"},a.to.hsl=function(){var A=i(arguments);return A.length<4||1===A[3]?"hsl("+A[0]+", "+A[1]+"%, "+A[2]+"%)":"hsla("+A[0]+", "+A[1]+"%, "+A[2]+"%, "+A[3]+")"},a.to.hwb=function(){var A=i(arguments),e="";return A.length>=4&&1!==A[3]&&(e=", "+A[3]),"hwb("+A[0]+", "+A[1]+"%, "+A[2]+"%"+e+")"},a.to.keyword=function(A){return o[A.slice(0,3)]}},71346:(A,e,t)=>{const r=t(67804),i=t(69675),n=["keyword","gray","hex"],o={};for(const A of Object.keys(i))o[[...i[A].labels].sort().join("")]=A;const s={};function a(A,e){if(!(this instanceof a))return new a(A,e);if(e&&e in n&&(e=null),e&&!(e in i))throw new Error("Unknown model: "+e);let t,l;if(null==A)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(A instanceof a)this.model=A.model,this.color=[...A.color],this.valpha=A.valpha;else if("string"==typeof A){const e=r.get(A);if(null===e)throw new Error("Unable to parse color from string: "+A);this.model=e.model,l=i[this.model].channels,this.color=e.value.slice(0,l),this.valpha="number"==typeof e.value[l]?e.value[l]:1}else if(A.length>0){this.model=e||"rgb",l=i[this.model].channels;const t=Array.prototype.slice.call(A,0,l);this.color=u(t,l),this.valpha="number"==typeof A[l]?A[l]:1}else if("number"==typeof A)this.model="rgb",this.color=[A>>16&255,A>>8&255,255&A],this.valpha=1;else{this.valpha=1;const e=Object.keys(A);"alpha"in A&&(e.splice(e.indexOf("alpha"),1),this.valpha="number"==typeof A.alpha?A.alpha:0);const r=e.sort().join("");if(!(r in o))throw new Error("Unable to parse color from object: "+JSON.stringify(A));this.model=o[r];const{labels:n}=i[this.model],s=[];for(t=0;t<n.length;t++)s.push(A[n[t]]);this.color=u(s)}if(s[this.model])for(l=i[this.model].channels,t=0;t<l;t++){const A=s[this.model][t];A&&(this.color[t]=A(this.color[t]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}a.prototype={toString(){return this.string()},toJSON(){return this[this.model]()},string(A){let e=this.model in r.to?this:this.rgb();e=e.round("number"==typeof A?A:1);const t=1===e.valpha?e.color:[...e.color,this.valpha];return r.to[e.model](t)},percentString(A){const e=this.rgb().round("number"==typeof A?A:1),t=1===e.valpha?e.color:[...e.color,this.valpha];return r.to.rgb.percent(t)},array(){return 1===this.valpha?[...this.color]:[...this.color,this.valpha]},object(){const A={},{channels:e}=i[this.model],{labels:t}=i[this.model];for(let r=0;r<e;r++)A[t[r]]=this.color[r];return 1!==this.valpha&&(A.alpha=this.valpha),A},unitArray(){const A=this.rgb().color;return A[0]/=255,A[1]/=255,A[2]/=255,1!==this.valpha&&A.push(this.valpha),A},unitObject(){const A=this.rgb().object();return A.r/=255,A.g/=255,A.b/=255,1!==this.valpha&&(A.alpha=this.valpha),A},round(A){return A=Math.max(A||0,0),new a([...this.color.map(l(A)),this.valpha],this.model)},alpha(A){return void 0!==A?new a([...this.color,Math.max(0,Math.min(1,A))],this.model):this.valpha},red:c("rgb",0,g(255)),green:c("rgb",1,g(255)),blue:c("rgb",2,g(255)),hue:c(["hsl","hsv","hsl","hwb","hcg"],0,(A=>(A%360+360)%360)),saturationl:c("hsl",1,g(100)),lightness:c("hsl",2,g(100)),saturationv:c("hsv",1,g(100)),value:c("hsv",2,g(100)),chroma:c("hcg",1,g(100)),gray:c("hcg",2,g(100)),white:c("hwb",1,g(100)),wblack:c("hwb",2,g(100)),cyan:c("cmyk",0,g(100)),magenta:c("cmyk",1,g(100)),yellow:c("cmyk",2,g(100)),black:c("cmyk",3,g(100)),x:c("xyz",0,g(95.047)),y:c("xyz",1,g(100)),z:c("xyz",2,g(108.833)),l:c("lab",0,g(100)),a:c("lab",1),b:c("lab",2),keyword(A){return void 0!==A?new a(A):i[this.model].keyword(this.color)},hex(A){return void 0!==A?new a(A):r.to.hex(this.rgb().round().color)},hexa(A){if(void 0!==A)return new a(A);const e=this.rgb().round().color;let t=Math.round(255*this.valpha).toString(16).toUpperCase();return 1===t.length&&(t="0"+t),r.to.hex(e)+t},rgbNumber(){const A=this.rgb().color;return(255&A[0])<<16|(255&A[1])<<8|255&A[2]},luminosity(){const A=this.rgb().color,e=[];for(const[t,r]of A.entries()){const A=r/255;e[t]=A<=.04045?A/12.92:((A+.055)/1.055)**2.4}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast(A){const e=this.luminosity(),t=A.luminosity();return e>t?(e+.05)/(t+.05):(t+.05)/(e+.05)},level(A){const e=this.contrast(A);return e>=7?"AAA":e>=4.5?"AA":""},isDark(){const A=this.rgb().color;return(2126*A[0]+7152*A[1]+722*A[2])/1e4<128},isLight(){return!this.isDark()},negate(){const A=this.rgb();for(let e=0;e<3;e++)A.color[e]=255-A.color[e];return A},lighten(A){const e=this.hsl();return e.color[2]+=e.color[2]*A,e},darken(A){const e=this.hsl();return e.color[2]-=e.color[2]*A,e},saturate(A){const e=this.hsl();return e.color[1]+=e.color[1]*A,e},desaturate(A){const e=this.hsl();return e.color[1]-=e.color[1]*A,e},whiten(A){const e=this.hwb();return e.color[1]+=e.color[1]*A,e},blacken(A){const e=this.hwb();return e.color[2]+=e.color[2]*A,e},grayscale(){const A=this.rgb().color,e=.3*A[0]+.59*A[1]+.11*A[2];return a.rgb(e,e,e)},fade(A){return this.alpha(this.valpha-this.valpha*A)},opaquer(A){return this.alpha(this.valpha+this.valpha*A)},rotate(A){const e=this.hsl();let t=e.color[0];return t=(t+A)%360,t=t<0?360+t:t,e.color[0]=t,e},mix(A,e){if(!A||!A.rgb)throw new Error('Argument to "mix" was not a Color instance, but rather an instance of '+typeof A);const t=A.rgb(),r=this.rgb(),i=void 0===e?.5:e,n=2*i-1,o=t.alpha()-r.alpha(),s=((n*o==-1?n:(n+o)/(1+n*o))+1)/2,l=1-s;return a.rgb(s*t.red()+l*r.red(),s*t.green()+l*r.green(),s*t.blue()+l*r.blue(),t.alpha()*i+r.alpha()*(1-i))}};for(const A of Object.keys(i)){if(n.includes(A))continue;const{channels:e}=i[A];a.prototype[A]=function(...e){return this.model===A?new a(this):e.length>0?new a(e,A):new a([...(t=i[this.model][A].raw(this.color),Array.isArray(t)?t:[t]),this.valpha],A);var t},a[A]=function(...t){let r=t[0];return"number"==typeof r&&(r=u(t,e)),new a(r,A)}}function l(A){return function(e){return function(A,e){return Number(A.toFixed(e))}(e,A)}}function c(A,e,t){A=Array.isArray(A)?A:[A];for(const r of A)(s[r]||(s[r]=[]))[e]=t;return A=A[0],function(r){let i;return void 0!==r?(t&&(r=t(r)),i=this[A](),i.color[e]=r,i):(i=this[A]().color[e],t&&(i=t(i)),i)}}function g(A){return function(e){return Math.max(0,Math.min(A,e))}}function u(A,e){for(let t=0;t<e;t++)"number"!=typeof A[t]&&(A[t]=0);return A}A.exports=a},40461:(A,e,t)=>{const r=t(11103),i={};for(const A of Object.keys(r))i[r[A]]=A;const n={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};A.exports=n;for(const A of Object.keys(n)){if(!("channels"in n[A]))throw new Error("missing channels property: "+A);if(!("labels"in n[A]))throw new Error("missing channel labels property: "+A);if(n[A].labels.length!==n[A].channels)throw new Error("channel and label counts mismatch: "+A);const{channels:e,labels:t}=n[A];delete n[A].channels,delete n[A].labels,Object.defineProperty(n[A],"channels",{value:e}),Object.defineProperty(n[A],"labels",{value:t})}n.rgb.hsl=function(A){const e=A[0]/255,t=A[1]/255,r=A[2]/255,i=Math.min(e,t,r),n=Math.max(e,t,r),o=n-i;let s,a;n===i?s=0:e===n?s=(t-r)/o:t===n?s=2+(r-e)/o:r===n&&(s=4+(e-t)/o),s=Math.min(60*s,360),s<0&&(s+=360);const l=(i+n)/2;return a=n===i?0:l<=.5?o/(n+i):o/(2-n-i),[s,100*a,100*l]},n.rgb.hsv=function(A){let e,t,r,i,n;const o=A[0]/255,s=A[1]/255,a=A[2]/255,l=Math.max(o,s,a),c=l-Math.min(o,s,a),g=function(A){return(l-A)/6/c+.5};return 0===c?(i=0,n=0):(n=c/l,e=g(o),t=g(s),r=g(a),o===l?i=r-t:s===l?i=1/3+e-r:a===l&&(i=2/3+t-e),i<0?i+=1:i>1&&(i-=1)),[360*i,100*n,100*l]},n.rgb.hwb=function(A){const e=A[0],t=A[1];let r=A[2];const i=n.rgb.hsl(A)[0],o=1/255*Math.min(e,Math.min(t,r));return r=1-1/255*Math.max(e,Math.max(t,r)),[i,100*o,100*r]},n.rgb.cmyk=function(A){const e=A[0]/255,t=A[1]/255,r=A[2]/255,i=Math.min(1-e,1-t,1-r);return[100*((1-e-i)/(1-i)||0),100*((1-t-i)/(1-i)||0),100*((1-r-i)/(1-i)||0),100*i]},n.rgb.keyword=function(A){const e=i[A];if(e)return e;let t,n=1/0;for(const e of Object.keys(r)){const i=(s=r[e],((o=A)[0]-s[0])**2+(o[1]-s[1])**2+(o[2]-s[2])**2);i<n&&(n=i,t=e)}var o,s;return t},n.keyword.rgb=function(A){return r[A]},n.rgb.xyz=function(A){let e=A[0]/255,t=A[1]/255,r=A[2]/255;return e=e>.04045?((e+.055)/1.055)**2.4:e/12.92,t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92,[100*(.4124*e+.3576*t+.1805*r),100*(.2126*e+.7152*t+.0722*r),100*(.0193*e+.1192*t+.9505*r)]},n.rgb.lab=function(A){const e=n.rgb.xyz(A);let t=e[0],r=e[1],i=e[2];return t/=95.047,r/=100,i/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,i=i>.008856?i**(1/3):7.787*i+16/116,[116*r-16,500*(t-r),200*(r-i)]},n.hsl.rgb=function(A){const e=A[0]/360,t=A[1]/100,r=A[2]/100;let i,n,o;if(0===t)return o=255*r,[o,o,o];i=r<.5?r*(1+t):r+t-r*t;const s=2*r-i,a=[0,0,0];for(let A=0;A<3;A++)n=e+1/3*-(A-1),n<0&&n++,n>1&&n--,o=6*n<1?s+6*(i-s)*n:2*n<1?i:3*n<2?s+(i-s)*(2/3-n)*6:s,a[A]=255*o;return a},n.hsl.hsv=function(A){const e=A[0];let t=A[1]/100,r=A[2]/100,i=t;const n=Math.max(r,.01);return r*=2,t*=r<=1?r:2-r,i*=n<=1?n:2-n,[e,100*(0===r?2*i/(n+i):2*t/(r+t)),(r+t)/2*100]},n.hsv.rgb=function(A){const e=A[0]/60,t=A[1]/100;let r=A[2]/100;const i=Math.floor(e)%6,n=e-Math.floor(e),o=255*r*(1-t),s=255*r*(1-t*n),a=255*r*(1-t*(1-n));switch(r*=255,i){case 0:return[r,a,o];case 1:return[s,r,o];case 2:return[o,r,a];case 3:return[o,s,r];case 4:return[a,o,r];case 5:return[r,o,s]}},n.hsv.hsl=function(A){const e=A[0],t=A[1]/100,r=A[2]/100,i=Math.max(r,.01);let n,o;o=(2-t)*r;const s=(2-t)*i;return n=t*i,n/=s<=1?s:2-s,n=n||0,o/=2,[e,100*n,100*o]},n.hwb.rgb=function(A){const e=A[0]/360;let t=A[1]/100,r=A[2]/100;const i=t+r;let n;i>1&&(t/=i,r/=i);const o=Math.floor(6*e),s=1-r;n=6*e-o,0!=(1&o)&&(n=1-n);const a=t+n*(s-t);let l,c,g;switch(o){default:case 6:case 0:l=s,c=a,g=t;break;case 1:l=a,c=s,g=t;break;case 2:l=t,c=s,g=a;break;case 3:l=t,c=a,g=s;break;case 4:l=a,c=t,g=s;break;case 5:l=s,c=t,g=a}return[255*l,255*c,255*g]},n.cmyk.rgb=function(A){const e=A[0]/100,t=A[1]/100,r=A[2]/100,i=A[3]/100;return[255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i))]},n.xyz.rgb=function(A){const e=A[0]/100,t=A[1]/100,r=A[2]/100;let i,n,o;return i=3.2406*e+-1.5372*t+-.4986*r,n=-.9689*e+1.8758*t+.0415*r,o=.0557*e+-.204*t+1.057*r,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,n=n>.0031308?1.055*n**(1/2.4)-.055:12.92*n,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,i=Math.min(Math.max(0,i),1),n=Math.min(Math.max(0,n),1),o=Math.min(Math.max(0,o),1),[255*i,255*n,255*o]},n.xyz.lab=function(A){let e=A[0],t=A[1],r=A[2];return e/=95.047,t/=100,r/=108.883,e=e>.008856?e**(1/3):7.787*e+16/116,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,[116*t-16,500*(e-t),200*(t-r)]},n.lab.xyz=function(A){let e,t,r;t=(A[0]+16)/116,e=A[1]/500+t,r=t-A[2]/200;const i=t**3,n=e**3,o=r**3;return t=i>.008856?i:(t-16/116)/7.787,e=n>.008856?n:(e-16/116)/7.787,r=o>.008856?o:(r-16/116)/7.787,e*=95.047,t*=100,r*=108.883,[e,t,r]},n.lab.lch=function(A){const e=A[0],t=A[1],r=A[2];let i;return i=360*Math.atan2(r,t)/2/Math.PI,i<0&&(i+=360),[e,Math.sqrt(t*t+r*r),i]},n.lch.lab=function(A){const e=A[0],t=A[1],r=A[2]/360*2*Math.PI;return[e,t*Math.cos(r),t*Math.sin(r)]},n.rgb.ansi16=function(A,e=null){const[t,r,i]=A;let o=null===e?n.rgb.hsv(A)[2]:e;if(o=Math.round(o/50),0===o)return 30;let s=30+(Math.round(i/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===o&&(s+=60),s},n.hsv.ansi16=function(A){return n.rgb.ansi16(n.hsv.rgb(A),A[2])},n.rgb.ansi256=function(A){const e=A[0],t=A[1],r=A[2];return e===t&&t===r?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(r/255*5)},n.ansi16.rgb=function(A){let e=A%10;if(0===e||7===e)return A>50&&(e+=3.5),e=e/10.5*255,[e,e,e];const t=.5*(1+~~(A>50));return[(1&e)*t*255,(e>>1&1)*t*255,(e>>2&1)*t*255]},n.ansi256.rgb=function(A){if(A>=232){const e=10*(A-232)+8;return[e,e,e]}let e;return A-=16,[Math.floor(A/36)/5*255,Math.floor((e=A%36)/6)/5*255,e%6/5*255]},n.rgb.hex=function(A){const e=(((255&Math.round(A[0]))<<16)+((255&Math.round(A[1]))<<8)+(255&Math.round(A[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},n.hex.rgb=function(A){const e=A.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];let t=e[0];3===e[0].length&&(t=t.split("").map((A=>A+A)).join(""));const r=parseInt(t,16);return[r>>16&255,r>>8&255,255&r]},n.rgb.hcg=function(A){const e=A[0]/255,t=A[1]/255,r=A[2]/255,i=Math.max(Math.max(e,t),r),n=Math.min(Math.min(e,t),r),o=i-n;let s,a;return s=o<1?n/(1-o):0,a=o<=0?0:i===e?(t-r)/o%6:i===t?2+(r-e)/o:4+(e-t)/o,a/=6,a%=1,[360*a,100*o,100*s]},n.hsl.hcg=function(A){const e=A[1]/100,t=A[2]/100,r=t<.5?2*e*t:2*e*(1-t);let i=0;return r<1&&(i=(t-.5*r)/(1-r)),[A[0],100*r,100*i]},n.hsv.hcg=function(A){const e=A[1]/100,t=A[2]/100,r=e*t;let i=0;return r<1&&(i=(t-r)/(1-r)),[A[0],100*r,100*i]},n.hcg.rgb=function(A){const e=A[0]/360,t=A[1]/100,r=A[2]/100;if(0===t)return[255*r,255*r,255*r];const i=[0,0,0],n=e%1*6,o=n%1,s=1-o;let a=0;switch(Math.floor(n)){case 0:i[0]=1,i[1]=o,i[2]=0;break;case 1:i[0]=s,i[1]=1,i[2]=0;break;case 2:i[0]=0,i[1]=1,i[2]=o;break;case 3:i[0]=0,i[1]=s,i[2]=1;break;case 4:i[0]=o,i[1]=0,i[2]=1;break;default:i[0]=1,i[1]=0,i[2]=s}return a=(1-t)*r,[255*(t*i[0]+a),255*(t*i[1]+a),255*(t*i[2]+a)]},n.hcg.hsv=function(A){const e=A[1]/100,t=e+A[2]/100*(1-e);let r=0;return t>0&&(r=e/t),[A[0],100*r,100*t]},n.hcg.hsl=function(A){const e=A[1]/100,t=A[2]/100*(1-e)+.5*e;let r=0;return t>0&&t<.5?r=e/(2*t):t>=.5&&t<1&&(r=e/(2*(1-t))),[A[0],100*r,100*t]},n.hcg.hwb=function(A){const e=A[1]/100,t=e+A[2]/100*(1-e);return[A[0],100*(t-e),100*(1-t)]},n.hwb.hcg=function(A){const e=A[1]/100,t=1-A[2]/100,r=t-e;let i=0;return r<1&&(i=(t-r)/(1-r)),[A[0],100*r,100*i]},n.apple.rgb=function(A){return[A[0]/65535*255,A[1]/65535*255,A[2]/65535*255]},n.rgb.apple=function(A){return[A[0]/255*65535,A[1]/255*65535,A[2]/255*65535]},n.gray.rgb=function(A){return[A[0]/100*255,A[0]/100*255,A[0]/100*255]},n.gray.hsl=function(A){return[0,0,A[0]]},n.gray.hsv=n.gray.hsl,n.gray.hwb=function(A){return[0,100,A[0]]},n.gray.cmyk=function(A){return[0,0,0,A[0]]},n.gray.lab=function(A){return[A[0],0,0]},n.gray.hex=function(A){const e=255&Math.round(A[0]/100*255),t=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(t.length)+t},n.rgb.gray=function(A){return[(A[0]+A[1]+A[2])/3/255*100]}},69675:(A,e,t)=>{const r=t(40461),i=t(60764),n={};Object.keys(r).forEach((A=>{n[A]={},Object.defineProperty(n[A],"channels",{value:r[A].channels}),Object.defineProperty(n[A],"labels",{value:r[A].labels});const e=i(A);Object.keys(e).forEach((t=>{const r=e[t];n[A][t]=function(A){const e=function(...e){const t=e[0];if(null==t)return t;t.length>1&&(e=t);const r=A(e);if("object"==typeof r)for(let A=r.length,e=0;e<A;e++)r[e]=Math.round(r[e]);return r};return"conversion"in A&&(e.conversion=A.conversion),e}(r),n[A][t].raw=function(A){const e=function(...e){const t=e[0];return null==t?t:(t.length>1&&(e=t),A(e))};return"conversion"in A&&(e.conversion=A.conversion),e}(r)}))})),A.exports=n},60764:(A,e,t)=>{const r=t(40461);function i(A,e){return function(t){return e(A(t))}}function n(A,e){const t=[e[A].parent,A];let n=r[e[A].parent][A],o=e[A].parent;for(;e[o].parent;)t.unshift(e[o].parent),n=i(r[e[o].parent][o],n),o=e[o].parent;return n.conversion=t,n}A.exports=function(A){const e=function(A){const e=function(){const A={},e=Object.keys(r);for(let t=e.length,r=0;r<t;r++)A[e[r]]={distance:-1,parent:null};return A}(),t=[A];for(e[A].distance=0;t.length;){const A=t.pop(),i=Object.keys(r[A]);for(let r=i.length,n=0;n<r;n++){const r=i[n],o=e[r];-1===o.distance&&(o.distance=e[A].distance+1,o.parent=A,t.unshift(r))}}return e}(A),t={},i=Object.keys(e);for(let A=i.length,r=0;r<A;r++){const A=i[r];null!==e[A].parent&&(t[A]=n(A,e))}return t}},77452:function(A,e,t){var r;A.exports=(r=t(57359),t(8139),t(79174),t(96844),t(9951),function(){var A=r,e=A.lib.BlockCipher,t=A.algo,i=[],n=[],o=[],s=[],a=[],l=[],c=[],g=[],u=[],h=[];!function(){for(var A=[],e=0;e<256;e++)A[e]=e<128?e<<1:e<<1^283;var t=0,r=0;for(e=0;e<256;e++){var E=r^r<<1^r<<2^r<<3^r<<4;E=E>>>8^255&E^99,i[t]=E,n[E]=t;var B=A[t],I=A[B],f=A[I],p=257*A[E]^16843008*E;o[t]=p<<24|p>>>8,s[t]=p<<16|p>>>16,a[t]=p<<8|p>>>24,l[t]=p,p=16843009*f^65537*I^257*B^16843008*t,c[E]=p<<24|p>>>8,g[E]=p<<16|p>>>16,u[E]=p<<8|p>>>24,h[E]=p,t?(t=B^A[A[A[f^B]]],r^=A[A[r]]):t=r=1}}();var E=[0,1,2,4,8,16,32,64,128,27,54],B=t.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var A=this._keyPriorReset=this._key,e=A.words,t=A.sigBytes/4,r=4*((this._nRounds=t+6)+1),n=this._keySchedule=[],o=0;o<r;o++)o<t?n[o]=e[o]:(l=n[o-1],o%t?t>6&&o%t==4&&(l=i[l>>>24]<<24|i[l>>>16&255]<<16|i[l>>>8&255]<<8|i[255&l]):(l=i[(l=l<<8|l>>>24)>>>24]<<24|i[l>>>16&255]<<16|i[l>>>8&255]<<8|i[255&l],l^=E[o/t|0]<<24),n[o]=n[o-t]^l);for(var s=this._invKeySchedule=[],a=0;a<r;a++){if(o=r-a,a%4)var l=n[o];else l=n[o-4];s[a]=a<4||o<=4?l:c[i[l>>>24]]^g[i[l>>>16&255]]^u[i[l>>>8&255]]^h[i[255&l]]}}},encryptBlock:function(A,e){this._doCryptBlock(A,e,this._keySchedule,o,s,a,l,i)},decryptBlock:function(A,e){var t=A[e+1];A[e+1]=A[e+3],A[e+3]=t,this._doCryptBlock(A,e,this._invKeySchedule,c,g,u,h,n),t=A[e+1],A[e+1]=A[e+3],A[e+3]=t},_doCryptBlock:function(A,e,t,r,i,n,o,s){for(var a=this._nRounds,l=A[e]^t[0],c=A[e+1]^t[1],g=A[e+2]^t[2],u=A[e+3]^t[3],h=4,E=1;E<a;E++){var B=r[l>>>24]^i[c>>>16&255]^n[g>>>8&255]^o[255&u]^t[h++],I=r[c>>>24]^i[g>>>16&255]^n[u>>>8&255]^o[255&l]^t[h++],f=r[g>>>24]^i[u>>>16&255]^n[l>>>8&255]^o[255&c]^t[h++],p=r[u>>>24]^i[l>>>16&255]^n[c>>>8&255]^o[255&g]^t[h++];l=B,c=I,g=f,u=p}B=(s[l>>>24]<<24|s[c>>>16&255]<<16|s[g>>>8&255]<<8|s[255&u])^t[h++],I=(s[c>>>24]<<24|s[g>>>16&255]<<16|s[u>>>8&255]<<8|s[255&l])^t[h++],f=(s[g>>>24]<<24|s[u>>>16&255]<<16|s[l>>>8&255]<<8|s[255&c])^t[h++],p=(s[u>>>24]<<24|s[l>>>16&255]<<16|s[c>>>8&255]<<8|s[255&g])^t[h++],A[e]=B,A[e+1]=I,A[e+2]=f,A[e+3]=p},keySize:8});A.AES=e._createHelper(B)}(),r.AES)},9951:function(A,e,t){var r,i,n,o,s,a,l,c,g,u,h,E,B,I,f,p,d,w,m;A.exports=(r=t(57359),t(96844),void(r.lib.Cipher||(i=r,n=i.lib,o=n.Base,s=n.WordArray,a=n.BufferedBlockAlgorithm,l=i.enc,l.Utf8,c=l.Base64,g=i.algo.EvpKDF,u=n.Cipher=a.extend({cfg:o.extend(),createEncryptor:function(A,e){return this.create(this._ENC_XFORM_MODE,A,e)},createDecryptor:function(A,e){return this.create(this._DEC_XFORM_MODE,A,e)},init:function(A,e,t){this.cfg=this.cfg.extend(t),this._xformMode=A,this._key=e,this.reset()},reset:function(){a.reset.call(this),this._doReset()},process:function(A){return this._append(A),this._process()},finalize:function(A){return A&&this._append(A),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function A(A){return"string"==typeof A?m:d}return function(e){return{encrypt:function(t,r,i){return A(r).encrypt(e,t,r,i)},decrypt:function(t,r,i){return A(r).decrypt(e,t,r,i)}}}}()}),n.StreamCipher=u.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),h=i.mode={},E=n.BlockCipherMode=o.extend({createEncryptor:function(A,e){return this.Encryptor.create(A,e)},createDecryptor:function(A,e){return this.Decryptor.create(A,e)},init:function(A,e){this._cipher=A,this._iv=e}}),B=h.CBC=function(){var A=E.extend();function e(A,e,t){var r,i=this._iv;i?(r=i,this._iv=void 0):r=this._prevBlock;for(var n=0;n<t;n++)A[e+n]^=r[n]}return A.Encryptor=A.extend({processBlock:function(A,t){var r=this._cipher,i=r.blockSize;e.call(this,A,t,i),r.encryptBlock(A,t),this._prevBlock=A.slice(t,t+i)}}),A.Decryptor=A.extend({processBlock:function(A,t){var r=this._cipher,i=r.blockSize,n=A.slice(t,t+i);r.decryptBlock(A,t),e.call(this,A,t,i),this._prevBlock=n}}),A}(),I=(i.pad={}).Pkcs7={pad:function(A,e){for(var t=4*e,r=t-A.sigBytes%t,i=r<<24|r<<16|r<<8|r,n=[],o=0;o<r;o+=4)n.push(i);var a=s.create(n,r);A.concat(a)},unpad:function(A){var e=255&A.words[A.sigBytes-1>>>2];A.sigBytes-=e}},n.BlockCipher=u.extend({cfg:u.cfg.extend({mode:B,padding:I}),reset:function(){var A;u.reset.call(this);var e=this.cfg,t=e.iv,r=e.mode;this._xformMode==this._ENC_XFORM_MODE?A=r.createEncryptor:(A=r.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==A?this._mode.init(this,t&&t.words):(this._mode=A.call(r,this,t&&t.words),this._mode.__creator=A)},_doProcessBlock:function(A,e){this._mode.processBlock(A,e)},_doFinalize:function(){var A,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),A=this._process(!0)):(A=this._process(!0),e.unpad(A)),A},blockSize:4}),f=n.CipherParams=o.extend({init:function(A){this.mixIn(A)},toString:function(A){return(A||this.formatter).stringify(this)}}),p=(i.format={}).OpenSSL={stringify:function(A){var e=A.ciphertext,t=A.salt;return(t?s.create([1398893684,1701076831]).concat(t).concat(e):e).toString(c)},parse:function(A){var e,t=c.parse(A),r=t.words;return 1398893684==r[0]&&1701076831==r[1]&&(e=s.create(r.slice(2,4)),r.splice(0,4),t.sigBytes-=16),f.create({ciphertext:t,salt:e})}},d=n.SerializableCipher=o.extend({cfg:o.extend({format:p}),encrypt:function(A,e,t,r){r=this.cfg.extend(r);var i=A.createEncryptor(t,r),n=i.finalize(e),o=i.cfg;return f.create({ciphertext:n,key:t,iv:o.iv,algorithm:A,mode:o.mode,padding:o.padding,blockSize:A.blockSize,formatter:r.format})},decrypt:function(A,e,t,r){return r=this.cfg.extend(r),e=this._parse(e,r.format),A.createDecryptor(t,r).finalize(e.ciphertext)},_parse:function(A,e){return"string"==typeof A?e.parse(A,this):A}}),w=(i.kdf={}).OpenSSL={execute:function(A,e,t,r){r||(r=s.random(8));var i=g.create({keySize:e+t}).compute(A,r),n=s.create(i.words.slice(e),4*t);return i.sigBytes=4*e,f.create({key:i,iv:n,salt:r})}},m=n.PasswordBasedCipher=d.extend({cfg:d.cfg.extend({kdf:w}),encrypt:function(A,e,t,r){var i=(r=this.cfg.extend(r)).kdf.execute(t,A.keySize,A.ivSize);r.iv=i.iv;var n=d.encrypt.call(this,A,e,i.key,r);return n.mixIn(i),n},decrypt:function(A,e,t,r){r=this.cfg.extend(r),e=this._parse(e,r.format);var i=r.kdf.execute(t,A.keySize,A.ivSize,e.salt);return r.iv=i.iv,d.decrypt.call(this,A,e,i.key,r)}}))))},57359:function(A,e,t){var r;A.exports=(r=r||function(A,e){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==t.g&&t.g.crypto&&(r=t.g.crypto),!r)try{r=t(5634)}catch(A){}var i=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(A){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(A){}}throw new Error("Native crypto module could not be used to get secure random number.")},n=Object.create||function(){function A(){}return function(e){var t;return A.prototype=e,t=new A,A.prototype=null,t}}(),o={},s=o.lib={},a=s.Base={extend:function(A){var e=n(this);return A&&e.mixIn(A),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var A=this.extend();return A.init.apply(A,arguments),A},init:function(){},mixIn:function(A){for(var e in A)A.hasOwnProperty(e)&&(this[e]=A[e]);A.hasOwnProperty("toString")&&(this.toString=A.toString)},clone:function(){return this.init.prototype.extend(this)}},l=s.WordArray=a.extend({init:function(A,e){A=this.words=A||[],this.sigBytes=null!=e?e:4*A.length},toString:function(A){return(A||g).stringify(this)},concat:function(A){var e=this.words,t=A.words,r=this.sigBytes,i=A.sigBytes;if(this.clamp(),r%4)for(var n=0;n<i;n++){var o=t[n>>>2]>>>24-n%4*8&255;e[r+n>>>2]|=o<<24-(r+n)%4*8}else for(n=0;n<i;n+=4)e[r+n>>>2]=t[n>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,t=this.sigBytes;e[t>>>2]&=4294967295<<32-t%4*8,e.length=A.ceil(t/4)},clone:function(){var A=a.clone.call(this);return A.words=this.words.slice(0),A},random:function(A){for(var e=[],t=0;t<A;t+=4)e.push(i());return new l.init(e,A)}}),c=o.enc={},g=c.Hex={stringify:function(A){for(var e=A.words,t=A.sigBytes,r=[],i=0;i<t;i++){var n=e[i>>>2]>>>24-i%4*8&255;r.push((n>>>4).toString(16)),r.push((15&n).toString(16))}return r.join("")},parse:function(A){for(var e=A.length,t=[],r=0;r<e;r+=2)t[r>>>3]|=parseInt(A.substr(r,2),16)<<24-r%8*4;return new l.init(t,e/2)}},u=c.Latin1={stringify:function(A){for(var e=A.words,t=A.sigBytes,r=[],i=0;i<t;i++){var n=e[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(n))}return r.join("")},parse:function(A){for(var e=A.length,t=[],r=0;r<e;r++)t[r>>>2]|=(255&A.charCodeAt(r))<<24-r%4*8;return new l.init(t,e)}},h=c.Utf8={stringify:function(A){try{return decodeURIComponent(escape(u.stringify(A)))}catch(A){throw new Error("Malformed UTF-8 data")}},parse:function(A){return u.parse(unescape(encodeURIComponent(A)))}},E=s.BufferedBlockAlgorithm=a.extend({reset:function(){this._data=new l.init,this._nDataBytes=0},_append:function(A){"string"==typeof A&&(A=h.parse(A)),this._data.concat(A),this._nDataBytes+=A.sigBytes},_process:function(e){var t,r=this._data,i=r.words,n=r.sigBytes,o=this.blockSize,s=n/(4*o),a=(s=e?A.ceil(s):A.max((0|s)-this._minBufferSize,0))*o,c=A.min(4*a,n);if(a){for(var g=0;g<a;g+=o)this._doProcessBlock(i,g);t=i.splice(0,a),r.sigBytes-=c}return new l.init(t,c)},clone:function(){var A=a.clone.call(this);return A._data=this._data.clone(),A},_minBufferSize:0}),B=(s.Hasher=E.extend({cfg:a.extend(),init:function(A){this.cfg=this.cfg.extend(A),this.reset()},reset:function(){E.reset.call(this),this._doReset()},update:function(A){return this._append(A),this._process(),this},finalize:function(A){return A&&this._append(A),this._doFinalize()},blockSize:16,_createHelper:function(A){return function(e,t){return new A.init(t).finalize(e)}},_createHmacHelper:function(A){return function(e,t){return new B.HMAC.init(A,t).finalize(e)}}}),o.algo={});return o}(Math),r)},8139:function(A,e,t){var r,i,n;A.exports=(r=t(57359),n=(i=r).lib.WordArray,i.enc.Base64={stringify:function(A){var e=A.words,t=A.sigBytes,r=this._map;A.clamp();for(var i=[],n=0;n<t;n+=3)for(var o=(e[n>>>2]>>>24-n%4*8&255)<<16|(e[n+1>>>2]>>>24-(n+1)%4*8&255)<<8|e[n+2>>>2]>>>24-(n+2)%4*8&255,s=0;s<4&&n+.75*s<t;s++)i.push(r.charAt(o>>>6*(3-s)&63));var a=r.charAt(64);if(a)for(;i.length%4;)i.push(a);return i.join("")},parse:function(A){var e=A.length,t=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var i=0;i<t.length;i++)r[t.charCodeAt(i)]=i}var o=t.charAt(64);if(o){var s=A.indexOf(o);-1!==s&&(e=s)}return function(A,e,t){for(var r=[],i=0,o=0;o<e;o++)if(o%4){var s=t[A.charCodeAt(o-1)]<<o%4*2|t[A.charCodeAt(o)]>>>6-o%4*2;r[i>>>2]|=s<<24-i%4*8,i++}return n.create(r,i)}(A,e,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},r.enc.Base64)},66164:function(A,e,t){var r;A.exports=(r=t(57359),function(){var A=r,e=A.lib.WordArray,t=A.enc;function i(A){return A<<8&4278255360|A>>>8&16711935}t.Utf16=t.Utf16BE={stringify:function(A){for(var e=A.words,t=A.sigBytes,r=[],i=0;i<t;i+=2){var n=e[i>>>2]>>>16-i%4*8&65535;r.push(String.fromCharCode(n))}return r.join("")},parse:function(A){for(var t=A.length,r=[],i=0;i<t;i++)r[i>>>1]|=A.charCodeAt(i)<<16-i%2*16;return e.create(r,2*t)}},t.Utf16LE={stringify:function(A){for(var e=A.words,t=A.sigBytes,r=[],n=0;n<t;n+=2){var o=i(e[n>>>2]>>>16-n%4*8&65535);r.push(String.fromCharCode(o))}return r.join("")},parse:function(A){for(var t=A.length,r=[],n=0;n<t;n++)r[n>>>1]|=i(A.charCodeAt(n)<<16-n%2*16);return e.create(r,2*t)}}}(),r.enc.Utf16)},96844:function(A,e,t){var r,i,n,o,s,a,l,c;A.exports=(c=t(57359),t(81637),t(66423),n=(i=(r=c).lib).Base,o=i.WordArray,a=(s=r.algo).MD5,l=s.EvpKDF=n.extend({cfg:n.extend({keySize:4,hasher:a,iterations:1}),init:function(A){this.cfg=this.cfg.extend(A)},compute:function(A,e){for(var t,r=this.cfg,i=r.hasher.create(),n=o.create(),s=n.words,a=r.keySize,l=r.iterations;s.length<a;){t&&i.update(t),t=i.update(A).finalize(e),i.reset();for(var c=1;c<l;c++)t=i.finalize(t),i.reset();n.concat(t)}return n.sigBytes=4*a,n}}),r.EvpKDF=function(A,e,t){return l.create(t).compute(A,e)},c.EvpKDF)},87333:function(A,e,t){var r,i,n,o;A.exports=(o=t(57359),t(9951),i=(r=o).lib.CipherParams,n=r.enc.Hex,r.format.Hex={stringify:function(A){return A.ciphertext.toString(n)},parse:function(A){var e=n.parse(A);return i.create({ciphertext:e})}},o.format.Hex)},66423:function(A,e,t){var r,i,n;A.exports=(i=(r=t(57359)).lib.Base,n=r.enc.Utf8,void(r.algo.HMAC=i.extend({init:function(A,e){A=this._hasher=new A.init,"string"==typeof e&&(e=n.parse(e));var t=A.blockSize,r=4*t;e.sigBytes>r&&(e=A.finalize(e)),e.clamp();for(var i=this._oKey=e.clone(),o=this._iKey=e.clone(),s=i.words,a=o.words,l=0;l<t;l++)s[l]^=1549556828,a[l]^=909522486;i.sigBytes=o.sigBytes=r,this.reset()},reset:function(){var A=this._hasher;A.reset(),A.update(this._iKey)},update:function(A){return this._hasher.update(A),this},finalize:function(A){var e=this._hasher,t=e.finalize(A);return e.reset(),e.finalize(this._oKey.clone().concat(t))}})))},36023:function(A,e,t){var r;A.exports=(r=t(57359),t(92312),t(21816),t(66164),t(8139),t(79174),t(81637),t(11093),t(83640),t(11834),t(91716),t(7140),t(25293),t(66423),t(89414),t(96844),t(9951),t(23173),t(4782),t(28655),t(32957),t(32129),t(52994),t(49236),t(41476),t(27921),t(50181),t(87333),t(77452),t(60567),t(10830),t(13480),t(94730),r)},21816:function(A,e,t){var r;A.exports=(r=t(57359),function(){if("function"==typeof ArrayBuffer){var A=r.lib.WordArray,e=A.init,t=A.init=function(A){if(A instanceof ArrayBuffer&&(A=new Uint8Array(A)),(A instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&A instanceof Uint8ClampedArray||A instanceof Int16Array||A instanceof Uint16Array||A instanceof Int32Array||A instanceof Uint32Array||A instanceof Float32Array||A instanceof Float64Array)&&(A=new Uint8Array(A.buffer,A.byteOffset,A.byteLength)),A instanceof Uint8Array){for(var t=A.byteLength,r=[],i=0;i<t;i++)r[i>>>2]|=A[i]<<24-i%4*8;e.call(this,r,t)}else e.apply(this,arguments)};t.prototype=A}}(),r.lib.WordArray)},79174:function(A,e,t){var r;A.exports=(r=t(57359),function(A){var e=r,t=e.lib,i=t.WordArray,n=t.Hasher,o=e.algo,s=[];!function(){for(var e=0;e<64;e++)s[e]=4294967296*A.abs(A.sin(e+1))|0}();var a=o.MD5=n.extend({_doReset:function(){this._hash=new i.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(A,e){for(var t=0;t<16;t++){var r=e+t,i=A[r];A[r]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var n=this._hash.words,o=A[e+0],a=A[e+1],h=A[e+2],E=A[e+3],B=A[e+4],I=A[e+5],f=A[e+6],p=A[e+7],d=A[e+8],w=A[e+9],m=A[e+10],C=A[e+11],Q=A[e+12],R=A[e+13],y=A[e+14],U=A[e+15],v=n[0],M=n[1],T=n[2],b=n[3];v=l(v,M,T,b,o,7,s[0]),b=l(b,v,M,T,a,12,s[1]),T=l(T,b,v,M,h,17,s[2]),M=l(M,T,b,v,E,22,s[3]),v=l(v,M,T,b,B,7,s[4]),b=l(b,v,M,T,I,12,s[5]),T=l(T,b,v,M,f,17,s[6]),M=l(M,T,b,v,p,22,s[7]),v=l(v,M,T,b,d,7,s[8]),b=l(b,v,M,T,w,12,s[9]),T=l(T,b,v,M,m,17,s[10]),M=l(M,T,b,v,C,22,s[11]),v=l(v,M,T,b,Q,7,s[12]),b=l(b,v,M,T,R,12,s[13]),T=l(T,b,v,M,y,17,s[14]),v=c(v,M=l(M,T,b,v,U,22,s[15]),T,b,a,5,s[16]),b=c(b,v,M,T,f,9,s[17]),T=c(T,b,v,M,C,14,s[18]),M=c(M,T,b,v,o,20,s[19]),v=c(v,M,T,b,I,5,s[20]),b=c(b,v,M,T,m,9,s[21]),T=c(T,b,v,M,U,14,s[22]),M=c(M,T,b,v,B,20,s[23]),v=c(v,M,T,b,w,5,s[24]),b=c(b,v,M,T,y,9,s[25]),T=c(T,b,v,M,E,14,s[26]),M=c(M,T,b,v,d,20,s[27]),v=c(v,M,T,b,R,5,s[28]),b=c(b,v,M,T,h,9,s[29]),T=c(T,b,v,M,p,14,s[30]),v=g(v,M=c(M,T,b,v,Q,20,s[31]),T,b,I,4,s[32]),b=g(b,v,M,T,d,11,s[33]),T=g(T,b,v,M,C,16,s[34]),M=g(M,T,b,v,y,23,s[35]),v=g(v,M,T,b,a,4,s[36]),b=g(b,v,M,T,B,11,s[37]),T=g(T,b,v,M,p,16,s[38]),M=g(M,T,b,v,m,23,s[39]),v=g(v,M,T,b,R,4,s[40]),b=g(b,v,M,T,o,11,s[41]),T=g(T,b,v,M,E,16,s[42]),M=g(M,T,b,v,f,23,s[43]),v=g(v,M,T,b,w,4,s[44]),b=g(b,v,M,T,Q,11,s[45]),T=g(T,b,v,M,U,16,s[46]),v=u(v,M=g(M,T,b,v,h,23,s[47]),T,b,o,6,s[48]),b=u(b,v,M,T,p,10,s[49]),T=u(T,b,v,M,y,15,s[50]),M=u(M,T,b,v,I,21,s[51]),v=u(v,M,T,b,Q,6,s[52]),b=u(b,v,M,T,E,10,s[53]),T=u(T,b,v,M,m,15,s[54]),M=u(M,T,b,v,a,21,s[55]),v=u(v,M,T,b,d,6,s[56]),b=u(b,v,M,T,U,10,s[57]),T=u(T,b,v,M,f,15,s[58]),M=u(M,T,b,v,R,21,s[59]),v=u(v,M,T,b,B,6,s[60]),b=u(b,v,M,T,C,10,s[61]),T=u(T,b,v,M,h,15,s[62]),M=u(M,T,b,v,w,21,s[63]),n[0]=n[0]+v|0,n[1]=n[1]+M|0,n[2]=n[2]+T|0,n[3]=n[3]+b|0},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;t[i>>>5]|=128<<24-i%32;var n=A.floor(r/4294967296),o=r;t[15+(i+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),t[14+(i+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),e.sigBytes=4*(t.length+1),this._process();for(var s=this._hash,a=s.words,l=0;l<4;l++){var c=a[l];a[l]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return s},clone:function(){var A=n.clone.call(this);return A._hash=this._hash.clone(),A}});function l(A,e,t,r,i,n,o){var s=A+(e&t|~e&r)+i+o;return(s<<n|s>>>32-n)+e}function c(A,e,t,r,i,n,o){var s=A+(e&r|t&~r)+i+o;return(s<<n|s>>>32-n)+e}function g(A,e,t,r,i,n,o){var s=A+(e^t^r)+i+o;return(s<<n|s>>>32-n)+e}function u(A,e,t,r,i,n,o){var s=A+(t^(e|~r))+i+o;return(s<<n|s>>>32-n)+e}e.MD5=n._createHelper(a),e.HmacMD5=n._createHmacHelper(a)}(Math),r.MD5)},23173:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.mode.CFB=function(){var A=r.lib.BlockCipherMode.extend();function e(A,e,t,r){var i,n=this._iv;n?(i=n.slice(0),this._iv=void 0):i=this._prevBlock,r.encryptBlock(i,0);for(var o=0;o<t;o++)A[e+o]^=i[o]}return A.Encryptor=A.extend({processBlock:function(A,t){var r=this._cipher,i=r.blockSize;e.call(this,A,t,i,r),this._prevBlock=A.slice(t,t+i)}}),A.Decryptor=A.extend({processBlock:function(A,t){var r=this._cipher,i=r.blockSize,n=A.slice(t,t+i);e.call(this,A,t,i,r),this._prevBlock=n}}),A}(),r.mode.CFB)},28655:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.mode.CTRGladman=function(){var A=r.lib.BlockCipherMode.extend();function e(A){if(255==(A>>24&255)){var e=A>>16&255,t=A>>8&255,r=255&A;255===e?(e=0,255===t?(t=0,255===r?r=0:++r):++t):++e,A=0,A+=e<<16,A+=t<<8,A+=r}else A+=1<<24;return A}var t=A.Encryptor=A.extend({processBlock:function(A,t){var r=this._cipher,i=r.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0),function(A){0===(A[0]=e(A[0]))&&(A[1]=e(A[1]))}(o);var s=o.slice(0);r.encryptBlock(s,0);for(var a=0;a<i;a++)A[t+a]^=s[a]}});return A.Decryptor=t,A}(),r.mode.CTRGladman)},4782:function(A,e,t){var r,i,n;A.exports=(n=t(57359),t(9951),n.mode.CTR=(i=(r=n.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(A,e){var t=this._cipher,r=t.blockSize,i=this._iv,n=this._counter;i&&(n=this._counter=i.slice(0),this._iv=void 0);var o=n.slice(0);t.encryptBlock(o,0),n[r-1]=n[r-1]+1|0;for(var s=0;s<r;s++)A[e+s]^=o[s]}}),r.Decryptor=i,r),n.mode.CTR)},32129:function(A,e,t){var r,i;A.exports=(i=t(57359),t(9951),i.mode.ECB=((r=i.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(A,e){this._cipher.encryptBlock(A,e)}}),r.Decryptor=r.extend({processBlock:function(A,e){this._cipher.decryptBlock(A,e)}}),r),i.mode.ECB)},32957:function(A,e,t){var r,i,n;A.exports=(n=t(57359),t(9951),n.mode.OFB=(i=(r=n.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(A,e){var t=this._cipher,r=t.blockSize,i=this._iv,n=this._keystream;i&&(n=this._keystream=i.slice(0),this._iv=void 0),t.encryptBlock(n,0);for(var o=0;o<r;o++)A[e+o]^=n[o]}}),r.Decryptor=i,r),n.mode.OFB)},52994:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.pad.AnsiX923={pad:function(A,e){var t=A.sigBytes,r=4*e,i=r-t%r,n=t+i-1;A.clamp(),A.words[n>>>2]|=i<<24-n%4*8,A.sigBytes+=i},unpad:function(A){var e=255&A.words[A.sigBytes-1>>>2];A.sigBytes-=e}},r.pad.Ansix923)},49236:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.pad.Iso10126={pad:function(A,e){var t=4*e,i=t-A.sigBytes%t;A.concat(r.lib.WordArray.random(i-1)).concat(r.lib.WordArray.create([i<<24],1))},unpad:function(A){var e=255&A.words[A.sigBytes-1>>>2];A.sigBytes-=e}},r.pad.Iso10126)},41476:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.pad.Iso97971={pad:function(A,e){A.concat(r.lib.WordArray.create([2147483648],1)),r.pad.ZeroPadding.pad(A,e)},unpad:function(A){r.pad.ZeroPadding.unpad(A),A.sigBytes--}},r.pad.Iso97971)},50181:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.pad.NoPadding={pad:function(){},unpad:function(){}},r.pad.NoPadding)},27921:function(A,e,t){var r;A.exports=(r=t(57359),t(9951),r.pad.ZeroPadding={pad:function(A,e){var t=4*e;A.clamp(),A.sigBytes+=t-(A.sigBytes%t||t)},unpad:function(A){var e=A.words,t=A.sigBytes-1;for(t=A.sigBytes-1;t>=0;t--)if(e[t>>>2]>>>24-t%4*8&255){A.sigBytes=t+1;break}}},r.pad.ZeroPadding)},89414:function(A,e,t){var r,i,n,o,s,a,l,c,g;A.exports=(g=t(57359),t(81637),t(66423),n=(i=(r=g).lib).Base,o=i.WordArray,a=(s=r.algo).SHA1,l=s.HMAC,c=s.PBKDF2=n.extend({cfg:n.extend({keySize:4,hasher:a,iterations:1}),init:function(A){this.cfg=this.cfg.extend(A)},compute:function(A,e){for(var t=this.cfg,r=l.create(t.hasher,A),i=o.create(),n=o.create([1]),s=i.words,a=n.words,c=t.keySize,g=t.iterations;s.length<c;){var u=r.update(e).finalize(n);r.reset();for(var h=u.words,E=h.length,B=u,I=1;I<g;I++){B=r.finalize(B),r.reset();for(var f=B.words,p=0;p<E;p++)h[p]^=f[p]}i.concat(u),a[0]++}return i.sigBytes=4*c,i}}),r.PBKDF2=function(A,e,t){return c.create(t).compute(A,e)},g.PBKDF2)},94730:function(A,e,t){var r;A.exports=(r=t(57359),t(8139),t(79174),t(96844),t(9951),function(){var A=r,e=A.lib.StreamCipher,t=A.algo,i=[],n=[],o=[],s=t.RabbitLegacy=e.extend({_doReset:function(){var A=this._key.words,e=this.cfg.iv,t=this._X=[A[0],A[3]<<16|A[2]>>>16,A[1],A[0]<<16|A[3]>>>16,A[2],A[1]<<16|A[0]>>>16,A[3],A[2]<<16|A[1]>>>16],r=this._C=[A[2]<<16|A[2]>>>16,4294901760&A[0]|65535&A[1],A[3]<<16|A[3]>>>16,4294901760&A[1]|65535&A[2],A[0]<<16|A[0]>>>16,4294901760&A[2]|65535&A[3],A[1]<<16|A[1]>>>16,4294901760&A[3]|65535&A[0]];this._b=0;for(var i=0;i<4;i++)a.call(this);for(i=0;i<8;i++)r[i]^=t[i+4&7];if(e){var n=e.words,o=n[0],s=n[1],l=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),g=l>>>16|4294901760&c,u=c<<16|65535&l;for(r[0]^=l,r[1]^=g,r[2]^=c,r[3]^=u,r[4]^=l,r[5]^=g,r[6]^=c,r[7]^=u,i=0;i<4;i++)a.call(this)}},_doProcessBlock:function(A,e){var t=this._X;a.call(this),i[0]=t[0]^t[5]>>>16^t[3]<<16,i[1]=t[2]^t[7]>>>16^t[5]<<16,i[2]=t[4]^t[1]>>>16^t[7]<<16,i[3]=t[6]^t[3]>>>16^t[1]<<16;for(var r=0;r<4;r++)i[r]=16711935&(i[r]<<8|i[r]>>>24)|4278255360&(i[r]<<24|i[r]>>>8),A[e+r]^=i[r]},blockSize:4,ivSize:2});function a(){for(var A=this._X,e=this._C,t=0;t<8;t++)n[t]=e[t];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<n[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<n[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<n[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<n[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<n[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<n[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<n[6]>>>0?1:0)|0,this._b=e[7]>>>0<n[7]>>>0?1:0,t=0;t<8;t++){var r=A[t]+e[t],i=65535&r,s=r>>>16,a=((i*i>>>17)+i*s>>>15)+s*s,l=((4294901760&r)*r|0)+((65535&r)*r|0);o[t]=a^l}A[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,A[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,A[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,A[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,A[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,A[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,A[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,A[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}A.RabbitLegacy=e._createHelper(s)}(),r.RabbitLegacy)},13480:function(A,e,t){var r;A.exports=(r=t(57359),t(8139),t(79174),t(96844),t(9951),function(){var A=r,e=A.lib.StreamCipher,t=A.algo,i=[],n=[],o=[],s=t.Rabbit=e.extend({_doReset:function(){for(var A=this._key.words,e=this.cfg.iv,t=0;t<4;t++)A[t]=16711935&(A[t]<<8|A[t]>>>24)|4278255360&(A[t]<<24|A[t]>>>8);var r=this._X=[A[0],A[3]<<16|A[2]>>>16,A[1],A[0]<<16|A[3]>>>16,A[2],A[1]<<16|A[0]>>>16,A[3],A[2]<<16|A[1]>>>16],i=this._C=[A[2]<<16|A[2]>>>16,4294901760&A[0]|65535&A[1],A[3]<<16|A[3]>>>16,4294901760&A[1]|65535&A[2],A[0]<<16|A[0]>>>16,4294901760&A[2]|65535&A[3],A[1]<<16|A[1]>>>16,4294901760&A[3]|65535&A[0]];for(this._b=0,t=0;t<4;t++)a.call(this);for(t=0;t<8;t++)i[t]^=r[t+4&7];if(e){var n=e.words,o=n[0],s=n[1],l=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),g=l>>>16|4294901760&c,u=c<<16|65535&l;for(i[0]^=l,i[1]^=g,i[2]^=c,i[3]^=u,i[4]^=l,i[5]^=g,i[6]^=c,i[7]^=u,t=0;t<4;t++)a.call(this)}},_doProcessBlock:function(A,e){var t=this._X;a.call(this),i[0]=t[0]^t[5]>>>16^t[3]<<16,i[1]=t[2]^t[7]>>>16^t[5]<<16,i[2]=t[4]^t[1]>>>16^t[7]<<16,i[3]=t[6]^t[3]>>>16^t[1]<<16;for(var r=0;r<4;r++)i[r]=16711935&(i[r]<<8|i[r]>>>24)|4278255360&(i[r]<<24|i[r]>>>8),A[e+r]^=i[r]},blockSize:4,ivSize:2});function a(){for(var A=this._X,e=this._C,t=0;t<8;t++)n[t]=e[t];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<n[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<n[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<n[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<n[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<n[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<n[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<n[6]>>>0?1:0)|0,this._b=e[7]>>>0<n[7]>>>0?1:0,t=0;t<8;t++){var r=A[t]+e[t],i=65535&r,s=r>>>16,a=((i*i>>>17)+i*s>>>15)+s*s,l=((4294901760&r)*r|0)+((65535&r)*r|0);o[t]=a^l}A[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,A[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,A[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,A[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,A[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,A[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,A[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,A[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}A.Rabbit=e._createHelper(s)}(),r.Rabbit)},10830:function(A,e,t){var r;A.exports=(r=t(57359),t(8139),t(79174),t(96844),t(9951),function(){var A=r,e=A.lib.StreamCipher,t=A.algo,i=t.RC4=e.extend({_doReset:function(){for(var A=this._key,e=A.words,t=A.sigBytes,r=this._S=[],i=0;i<256;i++)r[i]=i;i=0;for(var n=0;i<256;i++){var o=i%t,s=e[o>>>2]>>>24-o%4*8&255;n=(n+r[i]+s)%256;var a=r[i];r[i]=r[n],r[n]=a}this._i=this._j=0},_doProcessBlock:function(A,e){A[e]^=n.call(this)},keySize:8,ivSize:0});function n(){for(var A=this._S,e=this._i,t=this._j,r=0,i=0;i<4;i++){t=(t+A[e=(e+1)%256])%256;var n=A[e];A[e]=A[t],A[t]=n,r|=A[(A[e]+A[t])%256]<<24-8*i}return this._i=e,this._j=t,r}A.RC4=e._createHelper(i);var o=t.RC4Drop=i.extend({cfg:i.cfg.extend({drop:192}),_doReset:function(){i._doReset.call(this);for(var A=this.cfg.drop;A>0;A--)n.call(this)}});A.RC4Drop=e._createHelper(o)}(),r.RC4)},25293:function(A,e,t){var r;A.exports=(r=t(57359),function(A){var e=r,t=e.lib,i=t.WordArray,n=t.Hasher,o=e.algo,s=i.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),a=i.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),l=i.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),c=i.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),g=i.create([0,1518500249,1859775393,2400959708,2840853838]),u=i.create([1352829926,1548603684,1836072691,2053994217,0]),h=o.RIPEMD160=n.extend({_doReset:function(){this._hash=i.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(A,e){for(var t=0;t<16;t++){var r=e+t,i=A[r];A[r]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}var n,o,h,w,m,C,Q,R,y,U,v,M=this._hash.words,T=g.words,b=u.words,S=s.words,F=a.words,D=l.words,N=c.words;for(C=n=M[0],Q=o=M[1],R=h=M[2],y=w=M[3],U=m=M[4],t=0;t<80;t+=1)v=n+A[e+S[t]]|0,v+=t<16?E(o,h,w)+T[0]:t<32?B(o,h,w)+T[1]:t<48?I(o,h,w)+T[2]:t<64?f(o,h,w)+T[3]:p(o,h,w)+T[4],v=(v=d(v|=0,D[t]))+m|0,n=m,m=w,w=d(h,10),h=o,o=v,v=C+A[e+F[t]]|0,v+=t<16?p(Q,R,y)+b[0]:t<32?f(Q,R,y)+b[1]:t<48?I(Q,R,y)+b[2]:t<64?B(Q,R,y)+b[3]:E(Q,R,y)+b[4],v=(v=d(v|=0,N[t]))+U|0,C=U,U=y,y=d(R,10),R=Q,Q=v;v=M[1]+h+y|0,M[1]=M[2]+w+U|0,M[2]=M[3]+m+C|0,M[3]=M[4]+n+Q|0,M[4]=M[0]+o+R|0,M[0]=v},_doFinalize:function(){var A=this._data,e=A.words,t=8*this._nDataBytes,r=8*A.sigBytes;e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=16711935&(t<<8|t>>>24)|4278255360&(t<<24|t>>>8),A.sigBytes=4*(e.length+1),this._process();for(var i=this._hash,n=i.words,o=0;o<5;o++){var s=n[o];n[o]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return i},clone:function(){var A=n.clone.call(this);return A._hash=this._hash.clone(),A}});function E(A,e,t){return A^e^t}function B(A,e,t){return A&e|~A&t}function I(A,e,t){return(A|~e)^t}function f(A,e,t){return A&t|e&~t}function p(A,e,t){return A^(e|~t)}function d(A,e){return A<<e|A>>>32-e}e.RIPEMD160=n._createHelper(h),e.HmacRIPEMD160=n._createHmacHelper(h)}(Math),r.RIPEMD160)},81637:function(A,e,t){var r,i,n,o,s,a,l,c;A.exports=(i=(r=c=t(57359)).lib,n=i.WordArray,o=i.Hasher,s=r.algo,a=[],l=s.SHA1=o.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(A,e){for(var t=this._hash.words,r=t[0],i=t[1],n=t[2],o=t[3],s=t[4],l=0;l<80;l++){if(l<16)a[l]=0|A[e+l];else{var c=a[l-3]^a[l-8]^a[l-14]^a[l-16];a[l]=c<<1|c>>>31}var g=(r<<5|r>>>27)+s+a[l];g+=l<20?1518500249+(i&n|~i&o):l<40?1859775393+(i^n^o):l<60?(i&n|i&o|n&o)-1894007588:(i^n^o)-899497514,s=o,o=n,n=i<<30|i>>>2,i=r,r=g}t[0]=t[0]+r|0,t[1]=t[1]+i|0,t[2]=t[2]+n|0,t[3]=t[3]+o|0,t[4]=t[4]+s|0},_doFinalize:function(){var A=this._data,e=A.words,t=8*this._nDataBytes,r=8*A.sigBytes;return e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=Math.floor(t/4294967296),e[15+(r+64>>>9<<4)]=t,A.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var A=o.clone.call(this);return A._hash=this._hash.clone(),A}}),r.SHA1=o._createHelper(l),r.HmacSHA1=o._createHmacHelper(l),c.SHA1)},83640:function(A,e,t){var r,i,n,o,s,a;A.exports=(a=t(57359),t(11093),i=(r=a).lib.WordArray,n=r.algo,o=n.SHA256,s=n.SHA224=o.extend({_doReset:function(){this._hash=new i.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var A=o._doFinalize.call(this);return A.sigBytes-=4,A}}),r.SHA224=o._createHelper(s),r.HmacSHA224=o._createHmacHelper(s),a.SHA224)},11093:function(A,e,t){var r;A.exports=(r=t(57359),function(A){var e=r,t=e.lib,i=t.WordArray,n=t.Hasher,o=e.algo,s=[],a=[];!function(){function e(e){for(var t=A.sqrt(e),r=2;r<=t;r++)if(!(e%r))return!1;return!0}function t(A){return 4294967296*(A-(0|A))|0}for(var r=2,i=0;i<64;)e(r)&&(i<8&&(s[i]=t(A.pow(r,.5))),a[i]=t(A.pow(r,1/3)),i++),r++}();var l=[],c=o.SHA256=n.extend({_doReset:function(){this._hash=new i.init(s.slice(0))},_doProcessBlock:function(A,e){for(var t=this._hash.words,r=t[0],i=t[1],n=t[2],o=t[3],s=t[4],c=t[5],g=t[6],u=t[7],h=0;h<64;h++){if(h<16)l[h]=0|A[e+h];else{var E=l[h-15],B=(E<<25|E>>>7)^(E<<14|E>>>18)^E>>>3,I=l[h-2],f=(I<<15|I>>>17)^(I<<13|I>>>19)^I>>>10;l[h]=B+l[h-7]+f+l[h-16]}var p=r&i^r&n^i&n,d=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),w=u+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&c^~s&g)+a[h]+l[h];u=g,g=c,c=s,s=o+w|0,o=n,n=i,i=r,r=w+(d+p)|0}t[0]=t[0]+r|0,t[1]=t[1]+i|0,t[2]=t[2]+n|0,t[3]=t[3]+o|0,t[4]=t[4]+s|0,t[5]=t[5]+c|0,t[6]=t[6]+g|0,t[7]=t[7]+u|0},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return t[i>>>5]|=128<<24-i%32,t[14+(i+64>>>9<<4)]=A.floor(r/4294967296),t[15+(i+64>>>9<<4)]=r,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var A=n.clone.call(this);return A._hash=this._hash.clone(),A}});e.SHA256=n._createHelper(c),e.HmacSHA256=n._createHmacHelper(c)}(Math),r.SHA256)},7140:function(A,e,t){var r;A.exports=(r=t(57359),t(92312),function(A){var e=r,t=e.lib,i=t.WordArray,n=t.Hasher,o=e.x64.Word,s=e.algo,a=[],l=[],c=[];!function(){for(var A=1,e=0,t=0;t<24;t++){a[A+5*e]=(t+1)*(t+2)/2%64;var r=(2*A+3*e)%5;A=e%5,e=r}for(A=0;A<5;A++)for(e=0;e<5;e++)l[A+5*e]=e+(2*A+3*e)%5*5;for(var i=1,n=0;n<24;n++){for(var s=0,g=0,u=0;u<7;u++){if(1&i){var h=(1<<u)-1;h<32?g^=1<<h:s^=1<<h-32}128&i?i=i<<1^113:i<<=1}c[n]=o.create(s,g)}}();var g=[];!function(){for(var A=0;A<25;A++)g[A]=o.create()}();var u=s.SHA3=n.extend({cfg:n.cfg.extend({outputLength:512}),_doReset:function(){for(var A=this._state=[],e=0;e<25;e++)A[e]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(A,e){for(var t=this._state,r=this.blockSize/2,i=0;i<r;i++){var n=A[e+2*i],o=A[e+2*i+1];n=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),(M=t[i]).high^=o,M.low^=n}for(var s=0;s<24;s++){for(var u=0;u<5;u++){for(var h=0,E=0,B=0;B<5;B++)h^=(M=t[u+5*B]).high,E^=M.low;var I=g[u];I.high=h,I.low=E}for(u=0;u<5;u++){var f=g[(u+4)%5],p=g[(u+1)%5],d=p.high,w=p.low;for(h=f.high^(d<<1|w>>>31),E=f.low^(w<<1|d>>>31),B=0;B<5;B++)(M=t[u+5*B]).high^=h,M.low^=E}for(var m=1;m<25;m++){var C=(M=t[m]).high,Q=M.low,R=a[m];R<32?(h=C<<R|Q>>>32-R,E=Q<<R|C>>>32-R):(h=Q<<R-32|C>>>64-R,E=C<<R-32|Q>>>64-R);var y=g[l[m]];y.high=h,y.low=E}var U=g[0],v=t[0];for(U.high=v.high,U.low=v.low,u=0;u<5;u++)for(B=0;B<5;B++){var M=t[m=u+5*B],T=g[m],b=g[(u+1)%5+5*B],S=g[(u+2)%5+5*B];M.high=T.high^~b.high&S.high,M.low=T.low^~b.low&S.low}M=t[0];var F=c[s];M.high^=F.high,M.low^=F.low}},_doFinalize:function(){var e=this._data,t=e.words,r=(this._nDataBytes,8*e.sigBytes),n=32*this.blockSize;t[r>>>5]|=1<<24-r%32,t[(A.ceil((r+1)/n)*n>>>5)-1]|=128,e.sigBytes=4*t.length,this._process();for(var o=this._state,s=this.cfg.outputLength/8,a=s/8,l=[],c=0;c<a;c++){var g=o[c],u=g.high,h=g.low;u=16711935&(u<<8|u>>>24)|4278255360&(u<<24|u>>>8),h=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),l.push(h),l.push(u)}return new i.init(l,s)},clone:function(){for(var A=n.clone.call(this),e=A._state=this._state.slice(0),t=0;t<25;t++)e[t]=e[t].clone();return A}});e.SHA3=n._createHelper(u),e.HmacSHA3=n._createHmacHelper(u)}(Math),r.SHA3)},91716:function(A,e,t){var r,i,n,o,s,a,l,c;A.exports=(c=t(57359),t(92312),t(11834),i=(r=c).x64,n=i.Word,o=i.WordArray,s=r.algo,a=s.SHA512,l=s.SHA384=a.extend({_doReset:function(){this._hash=new o.init([new n.init(3418070365,3238371032),new n.init(1654270250,914150663),new n.init(2438529370,812702999),new n.init(355462360,4144912697),new n.init(1731405415,4290775857),new n.init(2394180231,1750603025),new n.init(3675008525,1694076839),new n.init(1203062813,3204075428)])},_doFinalize:function(){var A=a._doFinalize.call(this);return A.sigBytes-=16,A}}),r.SHA384=a._createHelper(l),r.HmacSHA384=a._createHmacHelper(l),c.SHA384)},11834:function(A,e,t){var r;A.exports=(r=t(57359),t(92312),function(){var A=r,e=A.lib.Hasher,t=A.x64,i=t.Word,n=t.WordArray,o=A.algo;function s(){return i.create.apply(i,arguments)}var a=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],l=[];!function(){for(var A=0;A<80;A++)l[A]=s()}();var c=o.SHA512=e.extend({_doReset:function(){this._hash=new n.init([new i.init(1779033703,4089235720),new i.init(3144134277,2227873595),new i.init(1013904242,4271175723),new i.init(2773480762,1595750129),new i.init(1359893119,2917565137),new i.init(2600822924,725511199),new i.init(528734635,4215389547),new i.init(1541459225,327033209)])},_doProcessBlock:function(A,e){for(var t=this._hash.words,r=t[0],i=t[1],n=t[2],o=t[3],s=t[4],c=t[5],g=t[6],u=t[7],h=r.high,E=r.low,B=i.high,I=i.low,f=n.high,p=n.low,d=o.high,w=o.low,m=s.high,C=s.low,Q=c.high,R=c.low,y=g.high,U=g.low,v=u.high,M=u.low,T=h,b=E,S=B,F=I,D=f,N=p,G=d,V=w,k=m,O=C,x=Q,Z=R,J=y,P=U,Y=v,H=M,L=0;L<80;L++){var j,W,z=l[L];if(L<16)W=z.high=0|A[e+2*L],j=z.low=0|A[e+2*L+1];else{var K=l[L-15],q=K.high,X=K.low,_=(q>>>1|X<<31)^(q>>>8|X<<24)^q>>>7,$=(X>>>1|q<<31)^(X>>>8|q<<24)^(X>>>7|q<<25),AA=l[L-2],eA=AA.high,tA=AA.low,rA=(eA>>>19|tA<<13)^(eA<<3|tA>>>29)^eA>>>6,iA=(tA>>>19|eA<<13)^(tA<<3|eA>>>29)^(tA>>>6|eA<<26),nA=l[L-7],oA=nA.high,sA=nA.low,aA=l[L-16],lA=aA.high,cA=aA.low;W=(W=(W=_+oA+((j=$+sA)>>>0<$>>>0?1:0))+rA+((j+=iA)>>>0<iA>>>0?1:0))+lA+((j+=cA)>>>0<cA>>>0?1:0),z.high=W,z.low=j}var gA,uA=k&x^~k&J,hA=O&Z^~O&P,EA=T&S^T&D^S&D,BA=b&F^b&N^F&N,IA=(T>>>28|b<<4)^(T<<30|b>>>2)^(T<<25|b>>>7),fA=(b>>>28|T<<4)^(b<<30|T>>>2)^(b<<25|T>>>7),pA=(k>>>14|O<<18)^(k>>>18|O<<14)^(k<<23|O>>>9),dA=(O>>>14|k<<18)^(O>>>18|k<<14)^(O<<23|k>>>9),wA=a[L],mA=wA.high,CA=wA.low,QA=Y+pA+((gA=H+dA)>>>0<H>>>0?1:0),RA=fA+BA;Y=J,H=P,J=x,P=Z,x=k,Z=O,k=G+(QA=(QA=(QA=QA+uA+((gA+=hA)>>>0<hA>>>0?1:0))+mA+((gA+=CA)>>>0<CA>>>0?1:0))+W+((gA+=j)>>>0<j>>>0?1:0))+((O=V+gA|0)>>>0<V>>>0?1:0)|0,G=D,V=N,D=S,N=F,S=T,F=b,T=QA+(IA+EA+(RA>>>0<fA>>>0?1:0))+((b=gA+RA|0)>>>0<gA>>>0?1:0)|0}E=r.low=E+b,r.high=h+T+(E>>>0<b>>>0?1:0),I=i.low=I+F,i.high=B+S+(I>>>0<F>>>0?1:0),p=n.low=p+N,n.high=f+D+(p>>>0<N>>>0?1:0),w=o.low=w+V,o.high=d+G+(w>>>0<V>>>0?1:0),C=s.low=C+O,s.high=m+k+(C>>>0<O>>>0?1:0),R=c.low=R+Z,c.high=Q+x+(R>>>0<Z>>>0?1:0),U=g.low=U+P,g.high=y+J+(U>>>0<P>>>0?1:0),M=u.low=M+H,u.high=v+Y+(M>>>0<H>>>0?1:0)},_doFinalize:function(){var A=this._data,e=A.words,t=8*this._nDataBytes,r=8*A.sigBytes;return e[r>>>5]|=128<<24-r%32,e[30+(r+128>>>10<<5)]=Math.floor(t/4294967296),e[31+(r+128>>>10<<5)]=t,A.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var A=e.clone.call(this);return A._hash=this._hash.clone(),A},blockSize:32});A.SHA512=e._createHelper(c),A.HmacSHA512=e._createHmacHelper(c)}(),r.SHA512)},60567:function(A,e,t){var r;A.exports=(r=t(57359),t(8139),t(79174),t(96844),t(9951),function(){var A=r,e=A.lib,t=e.WordArray,i=e.BlockCipher,n=A.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],s=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],a=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],l=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],c=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],g=n.DES=i.extend({_doReset:function(){for(var A=this._key.words,e=[],t=0;t<56;t++){var r=o[t]-1;e[t]=A[r>>>5]>>>31-r%32&1}for(var i=this._subKeys=[],n=0;n<16;n++){var l=i[n]=[],c=a[n];for(t=0;t<24;t++)l[t/6|0]|=e[(s[t]-1+c)%28]<<31-t%6,l[4+(t/6|0)]|=e[28+(s[t+24]-1+c)%28]<<31-t%6;for(l[0]=l[0]<<1|l[0]>>>31,t=1;t<7;t++)l[t]=l[t]>>>4*(t-1)+3;l[7]=l[7]<<5|l[7]>>>27}var g=this._invSubKeys=[];for(t=0;t<16;t++)g[t]=i[15-t]},encryptBlock:function(A,e){this._doCryptBlock(A,e,this._subKeys)},decryptBlock:function(A,e){this._doCryptBlock(A,e,this._invSubKeys)},_doCryptBlock:function(A,e,t){this._lBlock=A[e],this._rBlock=A[e+1],u.call(this,4,252645135),u.call(this,16,65535),h.call(this,2,858993459),h.call(this,8,16711935),u.call(this,1,1431655765);for(var r=0;r<16;r++){for(var i=t[r],n=this._lBlock,o=this._rBlock,s=0,a=0;a<8;a++)s|=l[a][((o^i[a])&c[a])>>>0];this._lBlock=o,this._rBlock=n^s}var g=this._lBlock;this._lBlock=this._rBlock,this._rBlock=g,u.call(this,1,1431655765),h.call(this,8,16711935),h.call(this,2,858993459),u.call(this,16,65535),u.call(this,4,252645135),A[e]=this._lBlock,A[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function u(A,e){var t=(this._lBlock>>>A^this._rBlock)&e;this._rBlock^=t,this._lBlock^=t<<A}function h(A,e){var t=(this._rBlock>>>A^this._lBlock)&e;this._lBlock^=t,this._rBlock^=t<<A}A.DES=i._createHelper(g);var E=n.TripleDES=i.extend({_doReset:function(){var A=this._key.words;if(2!==A.length&&4!==A.length&&A.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=A.slice(0,2),r=A.length<4?A.slice(0,2):A.slice(2,4),i=A.length<6?A.slice(0,2):A.slice(4,6);this._des1=g.createEncryptor(t.create(e)),this._des2=g.createEncryptor(t.create(r)),this._des3=g.createEncryptor(t.create(i))},encryptBlock:function(A,e){this._des1.encryptBlock(A,e),this._des2.decryptBlock(A,e),this._des3.encryptBlock(A,e)},decryptBlock:function(A,e){this._des3.decryptBlock(A,e),this._des2.encryptBlock(A,e),this._des1.decryptBlock(A,e)},keySize:6,ivSize:2,blockSize:2});A.TripleDES=i._createHelper(E)}(),r.TripleDES)},92312:function(A,e,t){var r,i,n,o,s,a;A.exports=(r=t(57359),n=(i=r).lib,o=n.Base,s=n.WordArray,(a=i.x64={}).Word=o.extend({init:function(A,e){this.high=A,this.low=e}}),a.WordArray=o.extend({init:function(A,e){A=this.words=A||[],this.sigBytes=null!=e?e:8*A.length},toX32:function(){for(var A=this.words,e=A.length,t=[],r=0;r<e;r++){var i=A[r];t.push(i.high),t.push(i.low)}return s.create(t,this.sigBytes)},clone:function(){for(var A=o.clone.call(this),e=A.words=this.words.slice(0),t=e.length,r=0;r<t;r++)e[r]=e[r].clone();return A}}),r)},27303:(A,e,t)=>{"use strict";t.d(e,{Z:()=>s});var r=t(39601),i=t.n(r),n=t(82609),o=t.n(n)()(i());o.push([A.id,"[data-simplebar]{position:relative;flex-direction:column;flex-wrap:wrap;justify-content:flex-start;align-content:flex-start;align-items:flex-start}.simplebar-wrapper{overflow:hidden;width:inherit;height:inherit;max-width:inherit;max-height:inherit}.simplebar-mask{direction:inherit;position:absolute;overflow:hidden;padding:0;margin:0;left:0;top:0;bottom:0;right:0;width:auto!important;height:auto!important;z-index:0}.simplebar-offset{direction:inherit!important;box-sizing:inherit!important;resize:none!important;position:absolute;top:0;left:0;bottom:0;right:0;padding:0;margin:0;-webkit-overflow-scrolling:touch}.simplebar-content-wrapper{direction:inherit;box-sizing:border-box!important;position:relative;display:block;height:100%;width:auto;max-width:100%;max-height:100%;overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.simplebar-content-wrapper::-webkit-scrollbar,.simplebar-hide-scrollbar::-webkit-scrollbar{display:none;width:0;height:0}.simplebar-content:after,.simplebar-content:before{content:' ';display:table}.simplebar-placeholder{max-height:100%;max-width:100%;width:100%;pointer-events:none}.simplebar-height-auto-observer-wrapper{box-sizing:inherit!important;height:100%;width:100%;max-width:1px;position:relative;float:left;max-height:1px;overflow:hidden;z-index:-1;padding:0;margin:0;pointer-events:none;flex-grow:inherit;flex-shrink:0;flex-basis:0}.simplebar-height-auto-observer{box-sizing:inherit;display:block;opacity:0;position:absolute;top:0;left:0;height:1000%;width:1000%;min-height:1px;min-width:1px;overflow:hidden;pointer-events:none;z-index:-1}.simplebar-track{z-index:1;position:absolute;right:0;bottom:0;pointer-events:none;overflow:hidden}[data-simplebar].simplebar-dragging{pointer-events:none;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[data-simplebar].simplebar-dragging .simplebar-content{pointer-events:none;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[data-simplebar].simplebar-dragging .simplebar-track{pointer-events:all}.simplebar-scrollbar{position:absolute;left:0;right:0;min-height:10px}.simplebar-scrollbar:before{position:absolute;content:'';background:#000;border-radius:7px;left:2px;right:2px;opacity:0;transition:opacity .2s .5s linear}.simplebar-scrollbar.simplebar-visible:before{opacity:.5;transition-delay:0s;transition-duration:0s}.simplebar-track.simplebar-vertical{top:0;width:11px}.simplebar-scrollbar:before{top:2px;bottom:2px;left:2px;right:2px}.simplebar-track.simplebar-horizontal{left:0;height:11px}.simplebar-track.simplebar-horizontal .simplebar-scrollbar{right:auto;left:0;top:0;bottom:0;min-height:0;min-width:10px;width:auto}[data-simplebar-direction=rtl] .simplebar-track.simplebar-vertical{right:auto;left:0}.simplebar-dummy-scrollbar-size{direction:rtl;position:fixed;opacity:0;visibility:hidden;height:500px;width:500px;overflow-y:hidden;overflow-x:scroll;-ms-overflow-style:scrollbar!important}.simplebar-dummy-scrollbar-size>div{width:200%;height:200%;margin:10px 0}.simplebar-hide-scrollbar{position:fixed;left:0;visibility:hidden;overflow-y:scroll;scrollbar-width:none;-ms-overflow-style:none}\n",""]);const s=o},82609:A=>{"use strict";A.exports=function(A){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=A(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(A,t,r,i,n){"string"==typeof A&&(A=[[null,A,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var a=this[s][0];null!=a&&(o[a]=!0)}for(var l=0;l<A.length;l++){var c=[].concat(A[l]);r&&o[c[0]]||(void 0!==n&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=n),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},39601:A=>{"use strict";A.exports=function(A){return A[1]}},23870:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),new Uint8Array(16);let t=new Uint8Array(32);function r(A){var e,t=new Float64Array(16);if(A)for(e=0;e<A.length;e++)t[e]=A[e];return t}t[0]=9;const i=r(),n=r([1]),o=r([56129,1]),s=r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),a=r([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),l=r([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),c=r([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),g=r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function u(A,e,t,r){A[e]=t>>24&255,A[e+1]=t>>16&255,A[e+2]=t>>8&255,A[e+3]=255&t,A[e+4]=r>>24&255,A[e+5]=r>>16&255,A[e+6]=r>>8&255,A[e+7]=255&r}function h(A,e,t,r){return function(A,e,t,r,i){var n,o=0;for(n=0;n<32;n++)o|=A[e+n]^t[r+n];return(1&o-1>>>8)-1}(A,e,t,r)}function E(A,e){var t;for(t=0;t<16;t++)A[t]=0|e[t]}function B(A){var e,t,r=1;for(e=0;e<16;e++)t=A[e]+r+65535,r=Math.floor(t/65536),A[e]=t-65536*r;A[0]+=r-1+37*(r-1)}function I(A,e,t){for(var r,i=~(t-1),n=0;n<16;n++)r=i&(A[n]^e[n]),A[n]^=r,e[n]^=r}function f(A,e){var t,i,n,o=r(),s=r();for(t=0;t<16;t++)s[t]=e[t];for(B(s),B(s),B(s),i=0;i<2;i++){for(o[0]=s[0]-65517,t=1;t<15;t++)o[t]=s[t]-65535-(o[t-1]>>16&1),o[t-1]&=65535;o[15]=s[15]-32767-(o[14]>>16&1),n=o[15]>>16&1,o[14]&=65535,I(s,o,1-n)}for(t=0;t<16;t++)A[2*t]=255&s[t],A[2*t+1]=s[t]>>8}function p(A,e){var t=new Uint8Array(32),r=new Uint8Array(32);return f(t,A),f(r,e),h(t,0,r,0)}function d(A){var e=new Uint8Array(32);return f(e,A),1&e[0]}function w(A,e){var t;for(t=0;t<16;t++)A[t]=e[2*t]+(e[2*t+1]<<8);A[15]&=32767}function m(A,e,t){for(var r=0;r<16;r++)A[r]=e[r]+t[r]}function C(A,e,t){for(var r=0;r<16;r++)A[r]=e[r]-t[r]}function Q(A,e,t){var r,i,n=0,o=0,s=0,a=0,l=0,c=0,g=0,u=0,h=0,E=0,B=0,I=0,f=0,p=0,d=0,w=0,m=0,C=0,Q=0,R=0,y=0,U=0,v=0,M=0,T=0,b=0,S=0,F=0,D=0,N=0,G=0,V=t[0],k=t[1],O=t[2],x=t[3],Z=t[4],J=t[5],P=t[6],Y=t[7],H=t[8],L=t[9],j=t[10],W=t[11],z=t[12],K=t[13],q=t[14],X=t[15];n+=(r=e[0])*V,o+=r*k,s+=r*O,a+=r*x,l+=r*Z,c+=r*J,g+=r*P,u+=r*Y,h+=r*H,E+=r*L,B+=r*j,I+=r*W,f+=r*z,p+=r*K,d+=r*q,w+=r*X,o+=(r=e[1])*V,s+=r*k,a+=r*O,l+=r*x,c+=r*Z,g+=r*J,u+=r*P,h+=r*Y,E+=r*H,B+=r*L,I+=r*j,f+=r*W,p+=r*z,d+=r*K,w+=r*q,m+=r*X,s+=(r=e[2])*V,a+=r*k,l+=r*O,c+=r*x,g+=r*Z,u+=r*J,h+=r*P,E+=r*Y,B+=r*H,I+=r*L,f+=r*j,p+=r*W,d+=r*z,w+=r*K,m+=r*q,C+=r*X,a+=(r=e[3])*V,l+=r*k,c+=r*O,g+=r*x,u+=r*Z,h+=r*J,E+=r*P,B+=r*Y,I+=r*H,f+=r*L,p+=r*j,d+=r*W,w+=r*z,m+=r*K,C+=r*q,Q+=r*X,l+=(r=e[4])*V,c+=r*k,g+=r*O,u+=r*x,h+=r*Z,E+=r*J,B+=r*P,I+=r*Y,f+=r*H,p+=r*L,d+=r*j,w+=r*W,m+=r*z,C+=r*K,Q+=r*q,R+=r*X,c+=(r=e[5])*V,g+=r*k,u+=r*O,h+=r*x,E+=r*Z,B+=r*J,I+=r*P,f+=r*Y,p+=r*H,d+=r*L,w+=r*j,m+=r*W,C+=r*z,Q+=r*K,R+=r*q,y+=r*X,g+=(r=e[6])*V,u+=r*k,h+=r*O,E+=r*x,B+=r*Z,I+=r*J,f+=r*P,p+=r*Y,d+=r*H,w+=r*L,m+=r*j,C+=r*W,Q+=r*z,R+=r*K,y+=r*q,U+=r*X,u+=(r=e[7])*V,h+=r*k,E+=r*O,B+=r*x,I+=r*Z,f+=r*J,p+=r*P,d+=r*Y,w+=r*H,m+=r*L,C+=r*j,Q+=r*W,R+=r*z,y+=r*K,U+=r*q,v+=r*X,h+=(r=e[8])*V,E+=r*k,B+=r*O,I+=r*x,f+=r*Z,p+=r*J,d+=r*P,w+=r*Y,m+=r*H,C+=r*L,Q+=r*j,R+=r*W,y+=r*z,U+=r*K,v+=r*q,M+=r*X,E+=(r=e[9])*V,B+=r*k,I+=r*O,f+=r*x,p+=r*Z,d+=r*J,w+=r*P,m+=r*Y,C+=r*H,Q+=r*L,R+=r*j,y+=r*W,U+=r*z,v+=r*K,M+=r*q,T+=r*X,B+=(r=e[10])*V,I+=r*k,f+=r*O,p+=r*x,d+=r*Z,w+=r*J,m+=r*P,C+=r*Y,Q+=r*H,R+=r*L,y+=r*j,U+=r*W,v+=r*z,M+=r*K,T+=r*q,b+=r*X,I+=(r=e[11])*V,f+=r*k,p+=r*O,d+=r*x,w+=r*Z,m+=r*J,C+=r*P,Q+=r*Y,R+=r*H,y+=r*L,U+=r*j,v+=r*W,M+=r*z,T+=r*K,b+=r*q,S+=r*X,f+=(r=e[12])*V,p+=r*k,d+=r*O,w+=r*x,m+=r*Z,C+=r*J,Q+=r*P,R+=r*Y,y+=r*H,U+=r*L,v+=r*j,M+=r*W,T+=r*z,b+=r*K,S+=r*q,F+=r*X,p+=(r=e[13])*V,d+=r*k,w+=r*O,m+=r*x,C+=r*Z,Q+=r*J,R+=r*P,y+=r*Y,U+=r*H,v+=r*L,M+=r*j,T+=r*W,b+=r*z,S+=r*K,F+=r*q,D+=r*X,d+=(r=e[14])*V,w+=r*k,m+=r*O,C+=r*x,Q+=r*Z,R+=r*J,y+=r*P,U+=r*Y,v+=r*H,M+=r*L,T+=r*j,b+=r*W,S+=r*z,F+=r*K,D+=r*q,N+=r*X,w+=(r=e[15])*V,o+=38*(C+=r*O),s+=38*(Q+=r*x),a+=38*(R+=r*Z),l+=38*(y+=r*J),c+=38*(U+=r*P),g+=38*(v+=r*Y),u+=38*(M+=r*H),h+=38*(T+=r*L),E+=38*(b+=r*j),B+=38*(S+=r*W),I+=38*(F+=r*z),f+=38*(D+=r*K),p+=38*(N+=r*q),d+=38*(G+=r*X),n=(r=(n+=38*(m+=r*k))+(i=1)+65535)-65536*(i=Math.floor(r/65536)),o=(r=o+i+65535)-65536*(i=Math.floor(r/65536)),s=(r=s+i+65535)-65536*(i=Math.floor(r/65536)),a=(r=a+i+65535)-65536*(i=Math.floor(r/65536)),l=(r=l+i+65535)-65536*(i=Math.floor(r/65536)),c=(r=c+i+65535)-65536*(i=Math.floor(r/65536)),g=(r=g+i+65535)-65536*(i=Math.floor(r/65536)),u=(r=u+i+65535)-65536*(i=Math.floor(r/65536)),h=(r=h+i+65535)-65536*(i=Math.floor(r/65536)),E=(r=E+i+65535)-65536*(i=Math.floor(r/65536)),B=(r=B+i+65535)-65536*(i=Math.floor(r/65536)),I=(r=I+i+65535)-65536*(i=Math.floor(r/65536)),f=(r=f+i+65535)-65536*(i=Math.floor(r/65536)),p=(r=p+i+65535)-65536*(i=Math.floor(r/65536)),d=(r=d+i+65535)-65536*(i=Math.floor(r/65536)),w=(r=w+i+65535)-65536*(i=Math.floor(r/65536)),n=(r=(n+=i-1+37*(i-1))+(i=1)+65535)-65536*(i=Math.floor(r/65536)),o=(r=o+i+65535)-65536*(i=Math.floor(r/65536)),s=(r=s+i+65535)-65536*(i=Math.floor(r/65536)),a=(r=a+i+65535)-65536*(i=Math.floor(r/65536)),l=(r=l+i+65535)-65536*(i=Math.floor(r/65536)),c=(r=c+i+65535)-65536*(i=Math.floor(r/65536)),g=(r=g+i+65535)-65536*(i=Math.floor(r/65536)),u=(r=u+i+65535)-65536*(i=Math.floor(r/65536)),h=(r=h+i+65535)-65536*(i=Math.floor(r/65536)),E=(r=E+i+65535)-65536*(i=Math.floor(r/65536)),B=(r=B+i+65535)-65536*(i=Math.floor(r/65536)),I=(r=I+i+65535)-65536*(i=Math.floor(r/65536)),f=(r=f+i+65535)-65536*(i=Math.floor(r/65536)),p=(r=p+i+65535)-65536*(i=Math.floor(r/65536)),d=(r=d+i+65535)-65536*(i=Math.floor(r/65536)),w=(r=w+i+65535)-65536*(i=Math.floor(r/65536)),n+=i-1+37*(i-1),A[0]=n,A[1]=o,A[2]=s,A[3]=a,A[4]=l,A[5]=c,A[6]=g,A[7]=u,A[8]=h,A[9]=E,A[10]=B,A[11]=I,A[12]=f,A[13]=p,A[14]=d,A[15]=w}function R(A,e){Q(A,e,e)}function y(A,e){var t,i=r();for(t=0;t<16;t++)i[t]=e[t];for(t=253;t>=0;t--)R(i,i),2!==t&&4!==t&&Q(i,i,e);for(t=0;t<16;t++)A[t]=i[t]}function U(A,e,t){var i,n,s=new Uint8Array(32),a=new Float64Array(80),l=r(),c=r(),g=r(),u=r(),h=r(),E=r();for(n=0;n<31;n++)s[n]=e[n];for(s[31]=127&e[31]|64,s[0]&=248,w(a,t),n=0;n<16;n++)c[n]=a[n],u[n]=l[n]=g[n]=0;for(l[0]=u[0]=1,n=254;n>=0;--n)I(l,c,i=s[n>>>3]>>>(7&n)&1),I(g,u,i),m(h,l,g),C(l,l,g),m(g,c,u),C(c,c,u),R(u,h),R(E,l),Q(l,g,l),Q(g,c,h),m(h,l,g),C(l,l,g),R(c,l),C(g,u,E),Q(l,g,o),m(l,l,u),Q(g,g,l),Q(l,u,E),Q(u,c,a),R(c,h),I(l,c,i),I(g,u,i);for(n=0;n<16;n++)a[n+16]=l[n],a[n+32]=g[n],a[n+48]=c[n],a[n+64]=u[n];var B=a.subarray(32),p=a.subarray(16);return y(B,B),Q(p,p,B),f(A,p),0}var v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function M(A,e,t,r){for(var i,n,o,s,a,l,c,g,u,h,E,B,I,f,p,d,w,m,C,Q,R,y,U,M,T,b,S=new Int32Array(16),F=new Int32Array(16),D=A[0],N=A[1],G=A[2],V=A[3],k=A[4],O=A[5],x=A[6],Z=A[7],J=e[0],P=e[1],Y=e[2],H=e[3],L=e[4],j=e[5],W=e[6],z=e[7],K=0;r>=128;){for(C=0;C<16;C++)Q=8*C+K,S[C]=t[Q+0]<<24|t[Q+1]<<16|t[Q+2]<<8|t[Q+3],F[C]=t[Q+4]<<24|t[Q+5]<<16|t[Q+6]<<8|t[Q+7];for(C=0;C<80;C++)if(i=D,n=N,o=G,s=V,a=k,l=O,c=x,u=J,h=P,E=Y,B=H,I=L,f=j,p=W,U=65535&(y=z),M=y>>>16,T=65535&(R=Z),b=R>>>16,U+=65535&(y=(L>>>14|k<<18)^(L>>>18|k<<14)^(k>>>9|L<<23)),M+=y>>>16,T+=65535&(R=(k>>>14|L<<18)^(k>>>18|L<<14)^(L>>>9|k<<23)),b+=R>>>16,U+=65535&(y=L&j^~L&W),M+=y>>>16,T+=65535&(R=k&O^~k&x),b+=R>>>16,R=v[2*C],U+=65535&(y=v[2*C+1]),M+=y>>>16,T+=65535&R,b+=R>>>16,R=S[C%16],M+=(y=F[C%16])>>>16,T+=65535&R,b+=R>>>16,T+=(M+=(U+=65535&y)>>>16)>>>16,U=65535&(y=m=65535&U|M<<16),M=y>>>16,T=65535&(R=w=65535&T|(b+=T>>>16)<<16),b=R>>>16,U+=65535&(y=(J>>>28|D<<4)^(D>>>2|J<<30)^(D>>>7|J<<25)),M+=y>>>16,T+=65535&(R=(D>>>28|J<<4)^(J>>>2|D<<30)^(J>>>7|D<<25)),b+=R>>>16,M+=(y=J&P^J&Y^P&Y)>>>16,T+=65535&(R=D&N^D&G^N&G),b+=R>>>16,g=65535&(T+=(M+=(U+=65535&y)>>>16)>>>16)|(b+=T>>>16)<<16,d=65535&U|M<<16,U=65535&(y=B),M=y>>>16,T=65535&(R=s),b=R>>>16,M+=(y=m)>>>16,T+=65535&(R=w),b+=R>>>16,N=i,G=n,V=o,k=s=65535&(T+=(M+=(U+=65535&y)>>>16)>>>16)|(b+=T>>>16)<<16,O=a,x=l,Z=c,D=g,P=u,Y=h,H=E,L=B=65535&U|M<<16,j=I,W=f,z=p,J=d,C%16==15)for(Q=0;Q<16;Q++)R=S[Q],U=65535&(y=F[Q]),M=y>>>16,T=65535&R,b=R>>>16,R=S[(Q+9)%16],U+=65535&(y=F[(Q+9)%16]),M+=y>>>16,T+=65535&R,b+=R>>>16,w=S[(Q+1)%16],U+=65535&(y=((m=F[(Q+1)%16])>>>1|w<<31)^(m>>>8|w<<24)^(m>>>7|w<<25)),M+=y>>>16,T+=65535&(R=(w>>>1|m<<31)^(w>>>8|m<<24)^w>>>7),b+=R>>>16,w=S[(Q+14)%16],M+=(y=((m=F[(Q+14)%16])>>>19|w<<13)^(w>>>29|m<<3)^(m>>>6|w<<26))>>>16,T+=65535&(R=(w>>>19|m<<13)^(m>>>29|w<<3)^w>>>6),b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,S[Q]=65535&T|b<<16,F[Q]=65535&U|M<<16;U=65535&(y=J),M=y>>>16,T=65535&(R=D),b=R>>>16,R=A[0],M+=(y=e[0])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[0]=D=65535&T|b<<16,e[0]=J=65535&U|M<<16,U=65535&(y=P),M=y>>>16,T=65535&(R=N),b=R>>>16,R=A[1],M+=(y=e[1])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[1]=N=65535&T|b<<16,e[1]=P=65535&U|M<<16,U=65535&(y=Y),M=y>>>16,T=65535&(R=G),b=R>>>16,R=A[2],M+=(y=e[2])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[2]=G=65535&T|b<<16,e[2]=Y=65535&U|M<<16,U=65535&(y=H),M=y>>>16,T=65535&(R=V),b=R>>>16,R=A[3],M+=(y=e[3])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[3]=V=65535&T|b<<16,e[3]=H=65535&U|M<<16,U=65535&(y=L),M=y>>>16,T=65535&(R=k),b=R>>>16,R=A[4],M+=(y=e[4])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[4]=k=65535&T|b<<16,e[4]=L=65535&U|M<<16,U=65535&(y=j),M=y>>>16,T=65535&(R=O),b=R>>>16,R=A[5],M+=(y=e[5])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[5]=O=65535&T|b<<16,e[5]=j=65535&U|M<<16,U=65535&(y=W),M=y>>>16,T=65535&(R=x),b=R>>>16,R=A[6],M+=(y=e[6])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[6]=x=65535&T|b<<16,e[6]=W=65535&U|M<<16,U=65535&(y=z),M=y>>>16,T=65535&(R=Z),b=R>>>16,R=A[7],M+=(y=e[7])>>>16,T+=65535&R,b+=R>>>16,b+=(T+=(M+=(U+=65535&y)>>>16)>>>16)>>>16,A[7]=Z=65535&T|b<<16,e[7]=z=65535&U|M<<16,K+=128,r-=128}return r}function T(A,e,t){var r,i=new Int32Array(8),n=new Int32Array(8),o=new Uint8Array(256),s=t;for(i[0]=1779033703,i[1]=3144134277,i[2]=1013904242,i[3]=2773480762,i[4]=1359893119,i[5]=2600822924,i[6]=528734635,i[7]=1541459225,n[0]=4089235720,n[1]=2227873595,n[2]=4271175723,n[3]=1595750129,n[4]=2917565137,n[5]=725511199,n[6]=4215389547,n[7]=327033209,M(i,n,e,t),t%=128,r=0;r<t;r++)o[r]=e[s-t+r];for(o[t]=128,o[(t=256-128*(t<112?1:0))-9]=0,u(o,t-8,s/536870912|0,s<<3),M(i,n,o,t),r=0;r<8;r++)u(A,8*r,i[r],n[r]);return 0}function b(A,e){var t=r(),i=r(),n=r(),o=r(),s=r(),l=r(),c=r(),g=r(),u=r();C(t,A[1],A[0]),C(u,e[1],e[0]),Q(t,t,u),m(i,A[0],A[1]),m(u,e[0],e[1]),Q(i,i,u),Q(n,A[3],e[3]),Q(n,n,a),Q(o,A[2],e[2]),m(o,o,o),C(s,i,t),C(l,o,n),m(c,o,n),m(g,i,t),Q(A[0],s,l),Q(A[1],g,c),Q(A[2],c,l),Q(A[3],s,g)}function S(A,e,t){var r;for(r=0;r<4;r++)I(A[r],e[r],t)}function F(A,e){var t=r(),i=r(),n=r();y(n,e[2]),Q(t,e[0],n),Q(i,e[1],n),f(A,i),A[31]^=d(t)<<7}function D(A,e,t){var r,o;for(E(A[0],i),E(A[1],n),E(A[2],n),E(A[3],i),o=255;o>=0;--o)S(A,e,r=t[o/8|0]>>(7&o)&1),b(e,A),b(A,A),S(A,e,r)}function N(A,e){var t=[r(),r(),r(),r()];E(t[0],l),E(t[1],c),E(t[2],n),Q(t[3],l,c),D(A,t,e)}var G=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function V(A,e){var t,r,i,n;for(r=63;r>=32;--r){for(t=0,i=r-32,n=r-12;i<n;++i)e[i]+=t-16*e[r]*G[i-(r-32)],t=e[i]+128>>8,e[i]-=256*t;e[i]+=t,e[r]=0}for(t=0,i=0;i<32;i++)e[i]+=t-(e[31]>>4)*G[i],t=e[i]>>8,e[i]&=255;for(i=0;i<32;i++)e[i]-=t*G[i];for(r=0;r<32;r++)e[r+1]+=e[r]>>8,A[r]=255&e[r]}function k(A){var e,t=new Float64Array(64);for(e=0;e<64;e++)t[e]=A[e];for(e=0;e<64;e++)A[e]=0;V(A,t)}function O(A,e,t,i,n){for(var o=new Uint8Array(64),s=[r(),r(),r(),r()],a=0;a<32;a++)o[a]=i[a];o[0]&=248,o[31]&=127,o[31]|=64,N(s,o),F(o.subarray(32),s);var l,c=128&o[63];return l=n?function(A,e,t,i,n){var o,s,a=new Uint8Array(64),l=new Uint8Array(64),c=new Float64Array(64),g=[r(),r(),r(),r()];for(A[0]=254,o=1;o<32;o++)A[o]=255;for(o=0;o<32;o++)A[32+o]=i[o];for(o=0;o<t;o++)A[64+o]=e[o];for(o=0;o<64;o++)A[t+64+o]=n[o];for(T(l,A,t+128),k(l),N(g,l),F(A,g),o=0;o<32;o++)A[o+32]=i[32+o];for(T(a,A,t+64),k(a),o=0;o<64;o++)A[t+64+o]=0;for(o=0;o<64;o++)c[o]=0;for(o=0;o<32;o++)c[o]=l[o];for(o=0;o<32;o++)for(s=0;s<32;s++)c[o+s]+=a[o]*i[s];return V(A.subarray(32,t+64),c),t+64}(A,e,t,o,n):function(A,e,t,i){var n,o,s=new Uint8Array(64),a=new Uint8Array(64),l=new Float64Array(64),c=[r(),r(),r(),r()];for(n=0;n<t;n++)A[64+n]=e[n];for(n=0;n<32;n++)A[32+n]=i[n];for(T(a,A.subarray(32),t+32),k(a),N(c,a),F(A,c),n=0;n<32;n++)A[n+32]=i[32+n];for(T(s,A,t+64),k(s),n=0;n<64;n++)l[n]=0;for(n=0;n<32;n++)l[n]=a[n];for(n=0;n<32;n++)for(o=0;o<32;o++)l[n+o]+=s[n]*i[o];return V(A.subarray(32),l),t+64}(A,e,t,o),A[63]|=c,l}function x(A,e,t,o){var a=function(A){var e=new Uint8Array(32),t=r(),i=r(),o=r();return w(t,A),m(i,t,n),C(o,t,n),y(i,i),Q(i,i,o),f(e,i),e}(o);return a[31]|=128&e[63],e[63]&=127,function(A,e,t,o){var a,l=new Uint8Array(32),c=new Uint8Array(64),u=[r(),r(),r(),r()],B=[r(),r(),r(),r()];if(t<64)return-1;if(function(A,e){var t=r(),o=r(),a=r(),l=r(),c=r(),u=r(),h=r();return E(A[2],n),w(A[1],e),R(a,A[1]),Q(l,a,s),C(a,a,A[2]),m(l,A[2],l),R(c,l),R(u,c),Q(h,u,c),Q(t,h,a),Q(t,t,l),function(A,e){var t,i=r();for(t=0;t<16;t++)i[t]=e[t];for(t=250;t>=0;t--)R(i,i),1!==t&&Q(i,i,e);for(t=0;t<16;t++)A[t]=i[t]}(t,t),Q(t,t,a),Q(t,t,l),Q(t,t,l),Q(A[0],t,l),R(o,A[0]),Q(o,o,l),p(o,a)&&Q(A[0],A[0],g),R(o,A[0]),Q(o,o,l),p(o,a)?-1:(d(A[0])===e[31]>>7&&C(A[0],i,A[0]),Q(A[3],A[0],A[1]),0)}(B,o))return-1;for(a=0;a<t;a++)A[a]=e[a];for(a=0;a<32;a++)A[a+32]=o[a];if(T(c,A,t),k(c),D(u,B,c),N(B,e.subarray(32)),b(u,B),F(l,u),t-=64,h(e,0,l,0)){for(a=0;a<t;a++)A[a]=0;return-1}for(a=0;a<t;a++)A[a]=e[a+64];return t}(A,e,t,a)}function Z(...A){var e,t;for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}e.sharedKey=function(A,e){if(Z(e,A),32!==e.length)throw new Error("wrong public key length");if(32!==A.length)throw new Error("wrong secret key length");var t=new Uint8Array(32);return U(t,A,e),t},e.signMessage=function(A,e,t){if(Z(e,A),32!==A.length)throw new Error("wrong secret key length");if(t){if(Z(t),64!==t.length)throw new Error("wrong random data length");var r=new Uint8Array(128+e.length);return O(r,e,e.length,A,t),new Uint8Array(r.subarray(0,64+e.length))}var i=new Uint8Array(64+e.length);return O(i,e,e.length,A),i},e.openMessage=function(A,e){if(Z(e,A),32!==A.length)throw new Error("wrong public key length");var t=new Uint8Array(e.length),r=x(t,e,e.length,A);if(r<0)return null;for(var i=new Uint8Array(r),n=0;n<i.length;n++)i[n]=t[n];return i},e.sign=function(A,e,t){if(Z(A,e),32!==A.length)throw new Error("wrong secret key length");if(t&&(Z(t),64!==t.length))throw new Error("wrong random data length");var r=new Uint8Array((t?128:64)+e.length);O(r,e,e.length,A,t);for(var i=new Uint8Array(64),n=0;n<i.length;n++)i[n]=r[n];return i},e.verify=function(A,e,t){if(Z(e,t,A),64!==t.length)throw new Error("wrong signature length");if(32!==A.length)throw new Error("wrong public key length");var r,i=new Uint8Array(64+e.length),n=new Uint8Array(64+e.length);for(r=0;r<64;r++)i[r]=t[r];for(r=0;r<e.length;r++)i[r+64]=e[r];return x(n,i,i.length,A)>=0},e.generateKeyPair=function(A){if(Z(A),32!==A.length)throw new Error("wrong seed length");for(var e=new Uint8Array(32),r=new Uint8Array(32),i=0;i<32;i++)e[i]=A[i];return U(r,e,t),e[0]&=248,e[31]&=127,e[31]|=64,r[31]&=127,{public:r,private:e}},e.default={}},39714:A=>{"use strict";var e=function(A){return function(A){return!!A&&"object"==typeof A}(A)&&!function(A){var e=Object.prototype.toString.call(A);return"[object RegExp]"===e||"[object Date]"===e||function(A){return A.$$typeof===t}(A)}(A)},t="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(A,e){return!1!==e.clone&&e.isMergeableObject(A)?s((t=A,Array.isArray(t)?[]:{}),A,e):A;var t}function i(A,e,t){return A.concat(e).map((function(A){return r(A,t)}))}function n(A){return Object.keys(A).concat(function(A){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(A).filter((function(e){return A.propertyIsEnumerable(e)})):[]}(A))}function o(A,e){try{return e in A}catch(A){return!1}}function s(A,t,a){(a=a||{}).arrayMerge=a.arrayMerge||i,a.isMergeableObject=a.isMergeableObject||e,a.cloneUnlessOtherwiseSpecified=r;var l=Array.isArray(t);return l===Array.isArray(A)?l?a.arrayMerge(A,t,a):function(A,e,t){var i={};return t.isMergeableObject(A)&&n(A).forEach((function(e){i[e]=r(A[e],t)})),n(e).forEach((function(n){(function(A,e){return o(A,e)&&!(Object.hasOwnProperty.call(A,e)&&Object.propertyIsEnumerable.call(A,e))})(A,n)||(o(A,n)&&t.isMergeableObject(e[n])?i[n]=function(A,e){if(!e.customMerge)return s;var t=e.customMerge(A);return"function"==typeof t?t:s}(n,t)(A[n],e[n],t):i[n]=r(e[n],t))})),i}(A,t,a):r(t,a)}s.all=function(A,e){if(!Array.isArray(A))throw new Error("first argument should be an array");return A.reduce((function(A,t){return s(A,t,e)}),{})};var a=s;A.exports=a},10161:A=>{"use strict";var e=Object.prototype.hasOwnProperty,t="~";function r(){}function i(A,e,t){this.fn=A,this.context=e,this.once=t||!1}function n(A,e,r,n,o){if("function"!=typeof r)throw new TypeError("The listener must be a function");var s=new i(r,n||A,o),a=t?t+e:e;return A._events[a]?A._events[a].fn?A._events[a]=[A._events[a],s]:A._events[a].push(s):(A._events[a]=s,A._eventsCount++),A}function o(A,e){0==--A._eventsCount?A._events=new r:delete A._events[e]}function s(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(t=!1)),s.prototype.eventNames=function(){var A,r,i=[];if(0===this._eventsCount)return i;for(r in A=this._events)e.call(A,r)&&i.push(t?r.slice(1):r);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(A)):i},s.prototype.listeners=function(A){var e=t?t+A:A,r=this._events[e];if(!r)return[];if(r.fn)return[r.fn];for(var i=0,n=r.length,o=new Array(n);i<n;i++)o[i]=r[i].fn;return o},s.prototype.listenerCount=function(A){var e=t?t+A:A,r=this._events[e];return r?r.fn?1:r.length:0},s.prototype.emit=function(A,e,r,i,n,o){var s=t?t+A:A;if(!this._events[s])return!1;var a,l,c=this._events[s],g=arguments.length;if(c.fn){switch(c.once&&this.removeListener(A,c.fn,void 0,!0),g){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,e),!0;case 3:return c.fn.call(c.context,e,r),!0;case 4:return c.fn.call(c.context,e,r,i),!0;case 5:return c.fn.call(c.context,e,r,i,n),!0;case 6:return c.fn.call(c.context,e,r,i,n,o),!0}for(l=1,a=new Array(g-1);l<g;l++)a[l-1]=arguments[l];c.fn.apply(c.context,a)}else{var u,h=c.length;for(l=0;l<h;l++)switch(c[l].once&&this.removeListener(A,c[l].fn,void 0,!0),g){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,e);break;case 3:c[l].fn.call(c[l].context,e,r);break;case 4:c[l].fn.call(c[l].context,e,r,i);break;default:if(!a)for(u=1,a=new Array(g-1);u<g;u++)a[u-1]=arguments[u];c[l].fn.apply(c[l].context,a)}}return!0},s.prototype.on=function(A,e,t){return n(this,A,e,t,!1)},s.prototype.once=function(A,e,t){return n(this,A,e,t,!0)},s.prototype.removeListener=function(A,e,r,i){var n=t?t+A:A;if(!this._events[n])return this;if(!e)return o(this,n),this;var s=this._events[n];if(s.fn)s.fn!==e||i&&!s.once||r&&s.context!==r||o(this,n);else{for(var a=0,l=[],c=s.length;a<c;a++)(s[a].fn!==e||i&&!s[a].once||r&&s[a].context!==r)&&l.push(s[a]);l.length?this._events[n]=1===l.length?l[0]:l:o(this,n)}return this},s.prototype.removeAllListeners=function(A){var e;return A?(e=t?t+A:A,this._events[e]&&o(this,e)):(this._events=new r,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=t,s.EventEmitter=s,A.exports=s},77481:(A,e,t)=>{"use strict";t.d(e,{C:()=>a});var r=t(54106),i=t(53753),n=t(75413),o=t(30087);function s(A){return{create:function(){return{get:function(e){return A[e]},set:function(e,t){A[e]=t}}}}}var a=function(){function A(e,t,i,a){void 0===t&&(t=A.defaultLocale);var l,c,g,u=this;if(this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(A){var e=u.formatToParts(A);if(1===e.length)return e[0].value;var t=e.reduce((function(A,e){return A.length&&e.type===o.du.literal&&"string"==typeof A[A.length-1]?A[A.length-1]+=e.value:A.push(e.value),A}),[]);return t.length<=1?t[0]||"":t},this.formatToParts=function(A){return(0,o.FK)(u.ast,u.locales,u.formatters,u.formats,A,void 0,u.message)},this.resolvedOptions=function(){var A;return{locale:(null===(A=u.resolvedLocale)||void 0===A?void 0:A.toString())||Intl.NumberFormat.supportedLocalesOf(u.locales)[0]}},this.getAst=function(){return u.ast},this.locales=t,this.resolvedLocale=A.resolveLocale(t),"string"==typeof e){if(this.message=e,!A.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");var h=a||{},E=(h.formatters,(0,r._T)(h,["formatters"]));this.ast=A.__parse(e,(0,r.pi)((0,r.pi)({},E),{locale:this.resolvedLocale}))}else this.ast=e;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=(c=A.formats,(g=i)?Object.keys(c).reduce((function(A,e){var t,i;return A[e]=(t=c[e],(i=g[e])?(0,r.pi)((0,r.pi)((0,r.pi)({},t||{}),i||{}),Object.keys(t).reduce((function(A,e){return A[e]=(0,r.pi)((0,r.pi)({},t[e]),i[e]||{}),A}),{})):t),A}),(0,r.pi)({},c)):c),this.formatters=a&&a.formatters||(void 0===(l=this.formatterCache)&&(l={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:(0,n.Z)((function(){for(var A,e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new((A=Intl.NumberFormat).bind.apply(A,(0,r.ev)([void 0],e,!1)))}),{cache:s(l.number),strategy:n.A.variadic}),getDateTimeFormat:(0,n.Z)((function(){for(var A,e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new((A=Intl.DateTimeFormat).bind.apply(A,(0,r.ev)([void 0],e,!1)))}),{cache:s(l.dateTime),strategy:n.A.variadic}),getPluralRules:(0,n.Z)((function(){for(var A,e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new((A=Intl.PluralRules).bind.apply(A,(0,r.ev)([void 0],e,!1)))}),{cache:s(l.pluralRules),strategy:n.A.variadic})})}return Object.defineProperty(A,"defaultLocale",{get:function(){return A.memoizedDefaultLocale||(A.memoizedDefaultLocale=(new Intl.NumberFormat).resolvedOptions().locale),A.memoizedDefaultLocale},enumerable:!1,configurable:!0}),A.memoizedDefaultLocale=null,A.resolveLocale=function(A){if(void 0!==Intl.Locale){var e=Intl.NumberFormat.supportedLocalesOf(A);return e.length>0?new Intl.Locale(e[0]):new Intl.Locale("string"==typeof A?A:A[0])}},A.__parse=i.Qc,A.formats={number:{integer:{maximumFractionDigits:0},currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},A}()},56313:(A,e,t)=>{"use strict";t.d(e,{C8:()=>o,HR:()=>a,YR:()=>s,jK:()=>r,u_:()=>n});var r,i=t(54106);!function(A){A.MISSING_VALUE="MISSING_VALUE",A.INVALID_VALUE="INVALID_VALUE",A.MISSING_INTL_API="MISSING_INTL_API"}(r||(r={}));var n=function(A){function e(e,t,r){var i=A.call(this,e)||this;return i.code=t,i.originalMessage=r,i}return(0,i.ZT)(e,A),e.prototype.toString=function(){return"[formatjs Error: ".concat(this.code,"] ").concat(this.message)},e}(Error),o=function(A){function e(e,t,i,n){return A.call(this,'Invalid values for "'.concat(e,'": "').concat(t,'". Options are "').concat(Object.keys(i).join('", "'),'"'),r.INVALID_VALUE,n)||this}return(0,i.ZT)(e,A),e}(n),s=function(A){function e(e,t,i){return A.call(this,'Value for "'.concat(e,'" must be of type ').concat(t),r.INVALID_VALUE,i)||this}return(0,i.ZT)(e,A),e}(n),a=function(A){function e(e,t){return A.call(this,'The intl string context variable "'.concat(e,'" was not provided to the string "').concat(t,'"'),r.MISSING_VALUE,t)||this}return(0,i.ZT)(e,A),e}(n)},30087:(A,e,t)=>{"use strict";t.d(e,{FK:()=>s,Gt:()=>o,du:()=>r});var r,i=t(53753),n=t(56313);function o(A){return"function"==typeof A}function s(A,e,t,a,l,c,g){if(1===A.length&&(0,i.O4)(A[0]))return[{type:r.literal,value:A[0].value}];for(var u=[],h=0,E=A;h<E.length;h++){var B=E[h];if((0,i.O4)(B))u.push({type:r.literal,value:B.value});else if((0,i.yx)(B))"number"==typeof c&&u.push({type:r.literal,value:t.getNumberFormat(e).format(c)});else{var I=B.value;if(!l||!(I in l))throw new n.HR(I,g);var f=l[I];if((0,i.VG)(B))f&&"string"!=typeof f&&"number"!=typeof f||(f="string"==typeof f||"number"==typeof f?String(f):""),u.push({type:"string"==typeof f?r.literal:r.object,value:f});else if((0,i.rp)(B)){var p="string"==typeof B.style?a.date[B.style]:(0,i.Ii)(B.style)?B.style.parsedOptions:void 0;u.push({type:r.literal,value:t.getDateTimeFormat(e,p).format(f)})}else if((0,i.pe)(B))p="string"==typeof B.style?a.time[B.style]:(0,i.Ii)(B.style)?B.style.parsedOptions:a.time.medium,u.push({type:r.literal,value:t.getDateTimeFormat(e,p).format(f)});else if((0,i.uf)(B))(p="string"==typeof B.style?a.number[B.style]:(0,i.Wh)(B.style)?B.style.parsedOptions:void 0)&&p.scale&&(f*=p.scale||1),u.push({type:r.literal,value:t.getNumberFormat(e,p).format(f)});else{if((0,i.HI)(B)){var d=B.children,w=B.value,m=l[w];if(!o(m))throw new n.YR(w,"function",g);var C=m(s(d,e,t,a,l,c).map((function(A){return A.value})));Array.isArray(C)||(C=[C]),u.push.apply(u,C.map((function(A){return{type:"string"==typeof A?r.literal:r.object,value:A}})))}if((0,i.Wi)(B)){if(!(Q=B.options[f]||B.options.other))throw new n.C8(B.value,f,Object.keys(B.options),g);u.push.apply(u,s(Q.value,e,t,a,l))}else if((0,i.Jo)(B)){var Q;if(!(Q=B.options["=".concat(f)])){if(!Intl.PluralRules)throw new n.u_('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',n.jK.MISSING_INTL_API,g);var R=t.getPluralRules(e,{type:B.pluralType}).select(f-(B.offset||0));Q=B.options[R]||B.options.other}if(!Q)throw new n.C8(B.value,f,Object.keys(B.options),g);u.push.apply(u,s(Q.value,e,t,a,l,f-(B.offset||0)))}}}}return(y=u).length<2?y:y.reduce((function(A,e){var t=A[A.length-1];return t&&t.type===r.literal&&e.type===r.literal?t.value+=e.value:A.push(e),A}),[]);var y}!function(A){A[A.literal=0]="literal",A[A.object=1]="object"}(r||(r={}))},54106:(A,e,t)=>{"use strict";t.d(e,{ZT:()=>i,_T:()=>o,ev:()=>s,pi:()=>n});var r=function(A,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(A,e){A.__proto__=e}||function(A,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(A[t]=e[t])},r(A,e)};function i(A,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=A}r(A,e),A.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}var n=function(){return n=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},n.apply(this,arguments)};function o(A,e){var t={};for(var r in A)Object.prototype.hasOwnProperty.call(A,r)&&e.indexOf(r)<0&&(t[r]=A[r]);if(null!=A&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(A);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(A,r[i])&&(t[r[i]]=A[r[i]])}return t}function s(A,e,t){if(t||2===arguments.length)for(var r,i=0,n=e.length;i<n;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return A.concat(r||Array.prototype.slice.call(e))}Object.create,Object.create},72903:A=>{var e,t;self,A.exports=(e={1238:A=>{"use strict";A.exports={version:"17.5.0"}},7629:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(9474),o=t(1687),s=t(8652),a=t(8160),l=t(3292),c=t(6354),g=t(8901),u=t(9708),h=t(6914),E=t(2294),B=t(6133),I=t(1152),f=t(8863),p=t(2036),d={Base:class{constructor(A){this.type=A,this.$_root=null,this._definition={},this._reset()}_reset(){this._ids=new E.Ids,this._preferences=null,this._refs=new B.Manager,this._cache=null,this._valids=null,this._invalids=null,this._flags={},this._rules=[],this._singleRules=new Map,this.$_terms={},this.$_temp={ruleset:null,whens:{}}}describe(){return r("function"==typeof u.describe,"Manifest functionality disabled"),u.describe(this)}allow(...A){return a.verifyFlat(A,"allow"),this._values(A,"_valids")}alter(A){r(A&&"object"==typeof A&&!Array.isArray(A),"Invalid targets argument"),r(!this._inRuleset(),"Cannot set alterations inside a ruleset");const e=this.clone();e.$_terms.alterations=e.$_terms.alterations||[];for(const t in A){const i=A[t];r("function"==typeof i,"Alteration adjuster for",t,"must be a function"),e.$_terms.alterations.push({target:t,adjuster:i})}return e.$_temp.ruleset=!1,e}artifact(A){return r(void 0!==A,"Artifact cannot be undefined"),r(!this._cache,"Cannot set an artifact with a rule cache"),this.$_setFlag("artifact",A)}cast(A){return r(!1===A||"string"==typeof A,"Invalid to value"),r(!1===A||this._definition.cast[A],"Type",this.type,"does not support casting to",A),this.$_setFlag("cast",!1===A?void 0:A)}default(A,e){return this._default("default",A,e)}description(A){return r(A&&"string"==typeof A,"Description must be a non-empty string"),this.$_setFlag("description",A)}empty(A){const e=this.clone();return void 0!==A&&(A=e.$_compile(A,{override:!1})),e.$_setFlag("empty",A,{clone:!1})}error(A){return r(A,"Missing error"),r(A instanceof Error||"function"==typeof A,"Must provide a valid Error object or a function"),this.$_setFlag("error",A)}example(A,e={}){return r(void 0!==A,"Missing example"),a.assertOptions(e,["override"]),this._inner("examples",A,{single:!0,override:e.override})}external(A,e){return"object"==typeof A&&(r(!e,"Cannot combine options with description"),e=A.description,A=A.method),r("function"==typeof A,"Method must be a function"),r(void 0===e||e&&"string"==typeof e,"Description must be a non-empty string"),this._inner("externals",{method:A,description:e},{single:!0})}failover(A,e){return this._default("failover",A,e)}forbidden(){return this.presence("forbidden")}id(A){return A?(r("string"==typeof A,"id must be a non-empty string"),r(/^[^\.]+$/.test(A),"id cannot contain period character"),this.$_setFlag("id",A)):this.$_setFlag("id",void 0)}invalid(...A){return this._values(A,"_invalids")}label(A){return r(A&&"string"==typeof A,"Label name must be a non-empty string"),this.$_setFlag("label",A)}meta(A){return r(void 0!==A,"Meta cannot be undefined"),this._inner("metas",A,{single:!0})}note(...A){r(A.length,"Missing notes");for(const e of A)r(e&&"string"==typeof e,"Notes must be non-empty strings");return this._inner("notes",A)}only(A=!0){return r("boolean"==typeof A,"Invalid mode:",A),this.$_setFlag("only",A)}optional(){return this.presence("optional")}prefs(A){r(A,"Missing preferences"),r(void 0===A.context,"Cannot override context"),r(void 0===A.externals,"Cannot override externals"),r(void 0===A.warnings,"Cannot override warnings"),r(void 0===A.debug,"Cannot override debug"),a.checkPreferences(A);const e=this.clone();return e._preferences=a.preferences(e._preferences,A),e}presence(A){return r(["optional","required","forbidden"].includes(A),"Unknown presence mode",A),this.$_setFlag("presence",A)}raw(A=!0){return this.$_setFlag("result",A?"raw":void 0)}result(A){return r(["raw","strip"].includes(A),"Unknown result mode",A),this.$_setFlag("result",A)}required(){return this.presence("required")}strict(A){const e=this.clone(),t=void 0!==A&&!A;return e._preferences=a.preferences(e._preferences,{convert:t}),e}strip(A=!0){return this.$_setFlag("result",A?"strip":void 0)}tag(...A){r(A.length,"Missing tags");for(const e of A)r(e&&"string"==typeof e,"Tags must be non-empty strings");return this._inner("tags",A)}unit(A){return r(A&&"string"==typeof A,"Unit name must be a non-empty string"),this.$_setFlag("unit",A)}valid(...A){a.verifyFlat(A,"valid");const e=this.allow(...A);return e.$_setFlag("only",!!e._valids,{clone:!1}),e}when(A,e){const t=this.clone();t.$_terms.whens||(t.$_terms.whens=[]);const i=l.when(t,A,e);if(!["any","link"].includes(t.type)){const A=i.is?[i]:i.switch;for(const e of A)r(!e.then||"any"===e.then.type||e.then.type===t.type,"Cannot combine",t.type,"with",e.then&&e.then.type),r(!e.otherwise||"any"===e.otherwise.type||e.otherwise.type===t.type,"Cannot combine",t.type,"with",e.otherwise&&e.otherwise.type)}return t.$_terms.whens.push(i),t.$_mutateRebuild()}cache(A){r(!this._inRuleset(),"Cannot set caching inside a ruleset"),r(!this._cache,"Cannot override schema cache"),r(void 0===this._flags.artifact,"Cannot cache a rule with an artifact");const e=this.clone();return e._cache=A||s.provider.provision(),e.$_temp.ruleset=!1,e}clone(){const A=Object.create(Object.getPrototypeOf(this));return this._assign(A)}concat(A){r(a.isSchema(A),"Invalid schema object"),r("any"===this.type||"any"===A.type||A.type===this.type,"Cannot merge type",this.type,"with another type:",A.type),r(!this._inRuleset(),"Cannot concatenate onto a schema with open ruleset"),r(!A._inRuleset(),"Cannot concatenate a schema with open ruleset");let e=this.clone();if("any"===this.type&&"any"!==A.type){const t=A.clone();for(const A of Object.keys(e))"type"!==A&&(t[A]=e[A]);e=t}e._ids.concat(A._ids),e._refs.register(A,B.toSibling),e._preferences=e._preferences?a.preferences(e._preferences,A._preferences):A._preferences,e._valids=p.merge(e._valids,A._valids,A._invalids),e._invalids=p.merge(e._invalids,A._invalids,A._valids);for(const t of A._singleRules.keys())e._singleRules.has(t)&&(e._rules=e._rules.filter((A=>A.keep||A.name!==t)),e._singleRules.delete(t));for(const t of A._rules)A._definition.rules[t.method].multi||e._singleRules.set(t.name,t),e._rules.push(t);if(e._flags.empty&&A._flags.empty){e._flags.empty=e._flags.empty.concat(A._flags.empty);const t=Object.assign({},A._flags);delete t.empty,o(e._flags,t)}else if(A._flags.empty){e._flags.empty=A._flags.empty;const t=Object.assign({},A._flags);delete t.empty,o(e._flags,t)}else o(e._flags,A._flags);for(const t in A.$_terms){const r=A.$_terms[t];r?e.$_terms[t]?e.$_terms[t]=e.$_terms[t].concat(r):e.$_terms[t]=r.slice():e.$_terms[t]||(e.$_terms[t]=r)}return this.$_root._tracer&&this.$_root._tracer._combine(e,[this,A]),e.$_mutateRebuild()}extend(A){return r(!A.base,"Cannot extend type with another base"),g.type(this,A)}extract(A){return A=Array.isArray(A)?A:A.split("."),this._ids.reach(A)}fork(A,e){r(!this._inRuleset(),"Cannot fork inside a ruleset");let t=this;for(let r of[].concat(A))r=Array.isArray(r)?r:r.split("."),t=t._ids.fork(r,e,t);return t.$_temp.ruleset=!1,t}rule(A){const e=this._definition;a.assertOptions(A,Object.keys(e.modifiers)),r(!1!==this.$_temp.ruleset,"Cannot apply rules to empty ruleset or the last rule added does not support rule properties");const t=null===this.$_temp.ruleset?this._rules.length-1:this.$_temp.ruleset;r(t>=0&&t<this._rules.length,"Cannot apply rules to empty ruleset");const n=this.clone();for(let o=t;o<n._rules.length;++o){const t=n._rules[o],s=i(t);for(const i in A)e.modifiers[i](s,A[i]),r(s.name===t.name,"Cannot change rule name");n._rules[o]=s,n._singleRules.get(s.name)===t&&n._singleRules.set(s.name,s)}return n.$_temp.ruleset=!1,n.$_mutateRebuild()}get ruleset(){r(!this._inRuleset(),"Cannot start a new ruleset without closing the previous one");const A=this.clone();return A.$_temp.ruleset=A._rules.length,A}get $(){return this.ruleset}tailor(A){A=[].concat(A),r(!this._inRuleset(),"Cannot tailor inside a ruleset");let e=this;if(this.$_terms.alterations)for(const{target:t,adjuster:i}of this.$_terms.alterations)A.includes(t)&&(e=i(e),r(a.isSchema(e),"Alteration adjuster for",t,"failed to return a schema object"));return e=e.$_modify({each:e=>e.tailor(A),ref:!1}),e.$_temp.ruleset=!1,e.$_mutateRebuild()}tracer(){return I.location?I.location(this):this}validate(A,e){return f.entry(A,this,e)}validateAsync(A,e){return f.entryAsync(A,this,e)}$_addRule(A){"string"==typeof A&&(A={name:A}),r(A&&"object"==typeof A,"Invalid options"),r(A.name&&"string"==typeof A.name,"Invalid rule name");for(const e in A)r("_"!==e[0],"Cannot set private rule properties");const e=Object.assign({},A);e._resolve=[],e.method=e.method||e.name;const t=this._definition.rules[e.method],i=e.args;r(t,"Unknown rule",e.method);const n=this.clone();if(i){r(1===Object.keys(i).length||Object.keys(i).length===this._definition.rules[e.name].args.length,"Invalid rule definition for",this.type,e.name);for(const A in i){let o=i[A];if(void 0!==o){if(t.argsByName){const s=t.argsByName.get(A);if(s.ref&&a.isResolvable(o))e._resolve.push(A),n.$_mutateRegister(o);else if(s.normalize&&(o=s.normalize(o),i[A]=o),s.assert){const e=a.validateArg(o,A,s);r(!e,e,"or reference")}}i[A]=o}else delete i[A]}}return t.multi||(n._ruleRemove(e.name,{clone:!1}),n._singleRules.set(e.name,e)),!1===n.$_temp.ruleset&&(n.$_temp.ruleset=null),t.priority?n._rules.unshift(e):n._rules.push(e),n}$_compile(A,e){return l.schema(this.$_root,A,e)}$_createError(A,e,t,r,i,n={}){const o=!1!==n.flags?this._flags:{},s=n.messages?h.merge(this._definition.messages,n.messages):this._definition.messages;return new c.Report(A,e,t,o,s,r,i)}$_getFlag(A){return this._flags[A]}$_getRule(A){return this._singleRules.get(A)}$_mapLabels(A){return A=Array.isArray(A)?A:A.split("."),this._ids.labels(A)}$_match(A,e,t,r){(t=Object.assign({},t)).abortEarly=!0,t._externals=!1,e.snapshot();const i=!f.validate(A,this,e,t,r).errors;return e.restore(),i}$_modify(A){return a.assertOptions(A,["each","once","ref","schema"]),E.schema(this,A)||this}$_mutateRebuild(){return r(!this._inRuleset(),"Cannot add this rule inside a ruleset"),this._refs.reset(),this._ids.reset(),this.$_modify({each:(A,{source:e,name:t,path:r,key:i})=>{const n=this._definition[e][t]&&this._definition[e][t].register;!1!==n&&this.$_mutateRegister(A,{family:n,key:i})}}),this._definition.rebuild&&this._definition.rebuild(this),this.$_temp.ruleset=!1,this}$_mutateRegister(A,{family:e,key:t}={}){this._refs.register(A,e),this._ids.register(A,{key:t})}$_property(A){return this._definition.properties[A]}$_reach(A){return this._ids.reach(A)}$_rootReferences(){return this._refs.roots()}$_setFlag(A,e,t={}){r("_"===A[0]||!this._inRuleset(),"Cannot set flag inside a ruleset");const i=this._definition.flags[A]||{};if(n(e,i.default)&&(e=void 0),n(e,this._flags[A]))return this;const o=!1!==t.clone?this.clone():this;return void 0!==e?(o._flags[A]=e,o.$_mutateRegister(e)):delete o._flags[A],"_"!==A[0]&&(o.$_temp.ruleset=!1),o}$_parent(A,...e){return this[A][a.symbols.parent].call(this,...e)}$_validate(A,e,t){return f.validate(A,this,e,t)}_assign(A){A.type=this.type,A.$_root=this.$_root,A.$_temp=Object.assign({},this.$_temp),A.$_temp.whens={},A._ids=this._ids.clone(),A._preferences=this._preferences,A._valids=this._valids&&this._valids.clone(),A._invalids=this._invalids&&this._invalids.clone(),A._rules=this._rules.slice(),A._singleRules=i(this._singleRules,{shallow:!0}),A._refs=this._refs.clone(),A._flags=Object.assign({},this._flags),A._cache=null,A.$_terms={};for(const e in this.$_terms)A.$_terms[e]=this.$_terms[e]?this.$_terms[e].slice():null;A.$_super={};for(const e in this.$_super)A.$_super[e]=this._super[e].bind(A);return A}_bare(){const A=this.clone();A._reset();const e=A._definition.terms;for(const t in e){const r=e[t];A.$_terms[t]=r.init}return A.$_mutateRebuild()}_default(A,e,t={}){return a.assertOptions(t,"literal"),r(void 0!==e,"Missing",A,"value"),r("function"==typeof e||!t.literal,"Only function value supports literal option"),"function"==typeof e&&t.literal&&(e={[a.symbols.literal]:!0,literal:e}),this.$_setFlag(A,e)}_generate(A,e,t){if(!this.$_terms.whens)return{schema:this};const r=[],i=[];for(let n=0;n<this.$_terms.whens.length;++n){const o=this.$_terms.whens[n];if(o.concat){r.push(o.concat),i.push("".concat(n,".concat"));continue}const s=o.ref?o.ref.resolve(A,e,t):A,a=o.is?[o]:o.switch,l=i.length;for(let l=0;l<a.length;++l){const{is:c,then:g,otherwise:u}=a[l],h="".concat(n).concat(o.switch?"."+l:"");if(c.$_match(s,e.nest(c,"".concat(h,".is")),t)){if(g){const n=e.localize([...e.path,"".concat(h,".then")],e.ancestors,e.schemas),{schema:o,id:s}=g._generate(A,n,t);r.push(o),i.push("".concat(h,".then").concat(s?"(".concat(s,")"):""));break}}else if(u){const n=e.localize([...e.path,"".concat(h,".otherwise")],e.ancestors,e.schemas),{schema:o,id:s}=u._generate(A,n,t);r.push(o),i.push("".concat(h,".otherwise").concat(s?"(".concat(s,")"):""));break}}if(o.break&&i.length>l)break}const n=i.join(", ");if(e.mainstay.tracer.debug(e,"rule","when",n),!n)return{schema:this};if(!e.mainstay.tracer.active&&this.$_temp.whens[n])return{schema:this.$_temp.whens[n],id:n};let o=this;this._definition.generate&&(o=this._definition.generate(this,A,e,t));for(const A of r)o=o.concat(A);return this.$_root._tracer&&this.$_root._tracer._combine(o,[this,...r]),this.$_temp.whens[n]=o,{schema:o,id:n}}_inner(A,e,t={}){r(!this._inRuleset(),"Cannot set ".concat(A," inside a ruleset"));const i=this.clone();return i.$_terms[A]&&!t.override||(i.$_terms[A]=[]),t.single?i.$_terms[A].push(e):i.$_terms[A].push(...e),i.$_temp.ruleset=!1,i}_inRuleset(){return null!==this.$_temp.ruleset&&!1!==this.$_temp.ruleset}_ruleRemove(A,e={}){if(!this._singleRules.has(A))return this;const t=!1!==e.clone?this.clone():this;t._singleRules.delete(A);const r=[];for(let e=0;e<t._rules.length;++e){const i=t._rules[e];i.name!==A||i.keep?r.push(i):t._inRuleset()&&e<t.$_temp.ruleset&&--t.$_temp.ruleset}return t._rules=r,t}_values(A,e){a.verifyFlat(A,e.slice(1,-1));const t=this.clone(),i=A[0]===a.symbols.override;if(i&&(A=A.slice(1)),!t[e]&&A.length?t[e]=new p:i&&(t[e]=A.length?new p:null,t.$_mutateRebuild()),!t[e])return t;i&&t[e].override();for(const i of A){r(void 0!==i,"Cannot call allow/valid/invalid with undefined"),r(i!==a.symbols.override,"Override must be the first value");const A="_invalids"===e?"_valids":"_invalids";t[A]&&(t[A].remove(i),t[A].length||(r("_valids"===e||!t._flags.only,"Setting invalid value",i,"leaves schema rejecting all values due to previous valid rule"),t[A]=null)),t[e].add(i,t._refs)}return t}}};d.Base.prototype[a.symbols.any]={version:a.version,compile:l.compile,root:"$_root"},d.Base.prototype.isImmutable=!0,d.Base.prototype.deny=d.Base.prototype.invalid,d.Base.prototype.disallow=d.Base.prototype.invalid,d.Base.prototype.equal=d.Base.prototype.valid,d.Base.prototype.exist=d.Base.prototype.required,d.Base.prototype.not=d.Base.prototype.invalid,d.Base.prototype.options=d.Base.prototype.prefs,d.Base.prototype.preferences=d.Base.prototype.prefs,A.exports=new d.Base},8652:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(8160),o={max:1e3,supported:new Set(["undefined","boolean","number","string"])};e.provider={provision:A=>new o.Cache(A)},o.Cache=class{constructor(A={}){n.assertOptions(A,["max"]),r(void 0===A.max||A.max&&A.max>0&&isFinite(A.max),"Invalid max cache size"),this._max=A.max||o.max,this._map=new Map,this._list=new o.List}get length(){return this._map.size}set(A,e){if(null!==A&&!o.supported.has(typeof A))return;let t=this._map.get(A);if(t)return t.value=e,void this._list.first(t);t=this._list.unshift({key:A,value:e}),this._map.set(A,t),this._compact()}get(A){const e=this._map.get(A);if(e)return this._list.first(e),i(e.value)}_compact(){if(this._map.size>this._max){const A=this._list.pop();this._map.delete(A.key)}}},o.List=class{constructor(){this.tail=null,this.head=null}unshift(A){return A.next=null,A.prev=this.head,this.head&&(this.head.next=A),this.head=A,this.tail||(this.tail=A),A}first(A){A!==this.head&&(this._remove(A),this.unshift(A))}pop(){return this._remove(this.tail)}_remove(A){const{next:e,prev:t}=A;return e.prev=t,t&&(t.next=e),A===this.tail&&(this.tail=e),A.prev=null,A.next=null,A}}},8160:(A,e,t)=>{"use strict";const r=t(375),i=t(7916),n=t(1238);let o,s;const a={isoDate:/^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/};e.version=n.version,e.defaults={abortEarly:!0,allowUnknown:!1,artifacts:!1,cache:!0,context:null,convert:!0,dateFormat:"iso",errors:{escapeHtml:!1,label:"path",language:null,render:!0,stack:!1,wrap:{label:'"',array:"[]"}},externals:!0,messages:{},nonEnumerables:!1,noDefaults:!1,presence:"optional",skipFunctions:!1,stripUnknown:!1,warnings:!1},e.symbols={any:Symbol.for("@hapi/joi/schema"),arraySingle:Symbol("arraySingle"),deepDefault:Symbol("deepDefault"),errors:Symbol("errors"),literal:Symbol("literal"),override:Symbol("override"),parent:Symbol("parent"),prefs:Symbol("prefs"),ref:Symbol("ref"),template:Symbol("template"),values:Symbol("values")},e.assertOptions=function(A,e,t="Options"){r(A&&"object"==typeof A&&!Array.isArray(A),"Options must be of type object");const i=Object.keys(A).filter((A=>!e.includes(A)));r(0===i.length,"".concat(t," contain unknown keys: ").concat(i))},e.checkPreferences=function(A){s=s||t(3378);const e=s.preferences.validate(A);if(e.error)throw new i([e.error.details[0].message])},e.compare=function(A,e,t){switch(t){case"=":return A===e;case">":return A>e;case"<":return A<e;case">=":return A>=e;case"<=":return A<=e}},e.default=function(A,e){return void 0===A?e:A},e.isIsoDate=function(A){return a.isoDate.test(A)},e.isNumber=function(A){return"number"==typeof A&&!isNaN(A)},e.isResolvable=function(A){return!!A&&(A[e.symbols.ref]||A[e.symbols.template])},e.isSchema=function(A,t={}){const i=A&&A[e.symbols.any];return!!i&&(r(t.legacy||i.version===e.version,"Cannot mix different versions of joi schemas"),!0)},e.isValues=function(A){return A[e.symbols.values]},e.limit=function(A){return Number.isSafeInteger(A)&&A>=0},e.preferences=function(A,r){o=o||t(6914),A=A||{},r=r||{};const i=Object.assign({},A,r);return r.errors&&A.errors&&(i.errors=Object.assign({},A.errors,r.errors),i.errors.wrap=Object.assign({},A.errors.wrap,r.errors.wrap)),r.messages&&(i.messages=o.compile(r.messages,A.messages)),delete i[e.symbols.prefs],i},e.tryWithPath=function(A,e,t={}){try{return A()}catch(A){throw void 0!==A.path?A.path=e+"."+A.path:A.path=e,t.append&&(A.message="".concat(A.message," (").concat(A.path,")")),A}},e.validateArg=function(A,t,{assert:r,message:i}){if(e.isSchema(r)){const e=r.validate(A);if(!e.error)return;return e.error.message}if(!r(A))return t?"".concat(t," ").concat(i):i},e.verifyFlat=function(A,e){for(const t of A)r(!Array.isArray(t),"Method no longer accepts array arguments:",e)}},3292:(A,e,t)=>{"use strict";const r=t(375),i=t(8160),n=t(6133),o={};e.schema=function(A,e,t={}){i.assertOptions(t,["appendPath","override"]);try{return o.schema(A,e,t)}catch(A){throw t.appendPath&&void 0!==A.path&&(A.message="".concat(A.message," (").concat(A.path,")")),A}},o.schema=function(A,e,t){r(void 0!==e,"Invalid undefined schema"),Array.isArray(e)&&(r(e.length,"Invalid empty array schema"),1===e.length&&(e=e[0]));const n=(e,...r)=>!1!==t.override?e.valid(A.override,...r):e.valid(...r);if(o.simple(e))return n(A,e);if("function"==typeof e)return A.custom(e);if(r("object"==typeof e,"Invalid schema content:",typeof e),i.isResolvable(e))return n(A,e);if(i.isSchema(e))return e;if(Array.isArray(e)){for(const t of e)if(!o.simple(t))return A.alternatives().try(...e);return n(A,...e)}return e instanceof RegExp?A.string().regex(e):e instanceof Date?n(A.date(),e):(r(Object.getPrototypeOf(e)===Object.getPrototypeOf({}),"Schema can only contain plain objects"),A.object().keys(e))},e.ref=function(A,e){return n.isRef(A)?A:n.create(A,e)},e.compile=function(A,t,n={}){i.assertOptions(n,["legacy"]);const s=t&&t[i.symbols.any];if(s)return r(n.legacy||s.version===i.version,"Cannot mix different versions of joi schemas:",s.version,i.version),t;if("object"!=typeof t||!n.legacy)return e.schema(A,t,{appendPath:!0});const a=o.walk(t);return a?a.compile(a.root,t):e.schema(A,t,{appendPath:!0})},o.walk=function(A){if("object"!=typeof A)return null;if(Array.isArray(A)){for(const e of A){const A=o.walk(e);if(A)return A}return null}const e=A[i.symbols.any];if(e)return{root:A[e.root],compile:e.compile};r(Object.getPrototypeOf(A)===Object.getPrototypeOf({}),"Schema can only contain plain objects");for(const e in A){const t=o.walk(A[e]);if(t)return t}return null},o.simple=function(A){return null===A||["boolean","string","number"].includes(typeof A)},e.when=function(A,t,s){if(void 0===s&&(r(t&&"object"==typeof t,"Missing options"),s=t,t=n.create(".")),Array.isArray(s)&&(s={switch:s}),i.assertOptions(s,["is","not","then","otherwise","switch","break"]),i.isSchema(t))return r(void 0===s.is,'"is" can not be used with a schema condition'),r(void 0===s.not,'"not" can not be used with a schema condition'),r(void 0===s.switch,'"switch" can not be used with a schema condition'),o.condition(A,{is:t,then:s.then,otherwise:s.otherwise,break:s.break});if(r(n.isRef(t)||"string"==typeof t,"Invalid condition:",t),r(void 0===s.not||void 0===s.is,'Cannot combine "is" with "not"'),void 0===s.switch){let a=s;void 0!==s.not&&(a={is:s.not,then:s.otherwise,otherwise:s.then,break:s.break});let l=void 0!==a.is?A.$_compile(a.is):A.$_root.invalid(null,!1,0,"").required();return r(void 0!==a.then||void 0!==a.otherwise,'options must have at least one of "then", "otherwise", or "switch"'),r(void 0===a.break||void 0===a.then||void 0===a.otherwise,"Cannot specify then, otherwise, and break all together"),void 0===s.is||n.isRef(s.is)||i.isSchema(s.is)||(l=l.required()),o.condition(A,{ref:e.ref(t),is:l,then:a.then,otherwise:a.otherwise,break:a.break})}r(Array.isArray(s.switch),'"switch" must be an array'),r(void 0===s.is,'Cannot combine "switch" with "is"'),r(void 0===s.not,'Cannot combine "switch" with "not"'),r(void 0===s.then,'Cannot combine "switch" with "then"');const a={ref:e.ref(t),switch:[],break:s.break};for(let e=0;e<s.switch.length;++e){const t=s.switch[e],o=e===s.switch.length-1;i.assertOptions(t,o?["is","then","otherwise"]:["is","then"]),r(void 0!==t.is,'Switch statement missing "is"'),r(void 0!==t.then,'Switch statement missing "then"');const l={is:A.$_compile(t.is),then:A.$_compile(t.then)};if(n.isRef(t.is)||i.isSchema(t.is)||(l.is=l.is.required()),o){r(void 0===s.otherwise||void 0===t.otherwise,'Cannot specify "otherwise" inside and outside a "switch"');const e=void 0!==s.otherwise?s.otherwise:t.otherwise;void 0!==e&&(r(void 0===a.break,"Cannot specify both otherwise and break"),l.otherwise=A.$_compile(e))}a.switch.push(l)}return a},o.condition=function(A,e){for(const t of["then","otherwise"])void 0===e[t]?delete e[t]:e[t]=A.$_compile(e[t]);return e}},6354:(A,e,t)=>{"use strict";const r=t(5688),i=t(8160),n=t(3328);e.Report=class{constructor(A,t,r,i,n,o,s){if(this.code=A,this.flags=i,this.messages=n,this.path=o.path,this.prefs=s,this.state=o,this.value=t,this.message=null,this.template=null,this.local=r||{},this.local.label=e.label(this.flags,this.state,this.prefs,this.messages),void 0===this.value||this.local.hasOwnProperty("value")||(this.local.value=this.value),this.path.length){const A=this.path[this.path.length-1];"object"!=typeof A&&(this.local.key=A)}}_setTemplate(A){if(this.template=A,!this.flags.label&&0===this.path.length){const A=this._template(this.template,"root");A&&(this.local.label=A)}}toString(){if(this.message)return this.message;const A=this.code;if(!this.prefs.errors.render)return this.code;const e=this._template(this.template)||this._template(this.prefs.messages)||this._template(this.messages);return void 0===e?'Error code "'.concat(A,'" is not defined, your custom type is missing the correct messages definition'):(this.message=e.render(this.value,this.state,this.prefs,this.local,{errors:this.prefs.errors,messages:[this.prefs.messages,this.messages]}),this.prefs.errors.label||(this.message=this.message.replace(/^"" /,"").trim()),this.message)}_template(A,t){return e.template(this.value,A,t||this.code,this.state,this.prefs)}},e.path=function(A){let e="";for(const t of A)"object"!=typeof t&&("string"==typeof t?(e&&(e+="."),e+=t):e+="[".concat(t,"]"));return e},e.template=function(A,e,t,r,o){if(!e)return;if(n.isTemplate(e))return"root"!==t?e:null;let s=o.errors.language;if(i.isResolvable(s)&&(s=s.resolve(A,r,o)),s&&e[s]){if(void 0!==e[s][t])return e[s][t];if(void 0!==e[s]["*"])return e[s]["*"]}return e[t]?e[t]:e["*"]},e.label=function(A,t,r,i){if(A.label)return A.label;if(!r.errors.label)return"";let n=t.path;return"key"===r.errors.label&&t.path.length>1&&(n=t.path.slice(-1)),e.path(n)||e.template(null,r.messages,"root",t,r)||i&&e.template(null,i,"root",t,r)||"value"},e.process=function(A,t,r){if(!A)return null;const{override:i,message:n,details:o}=e.details(A);if(i)return i;if(r.errors.stack)return new e.ValidationError(n,o,t);const s=Error.stackTraceLimit;Error.stackTraceLimit=0;const a=new e.ValidationError(n,o,t);return Error.stackTraceLimit=s,a},e.details=function(A,e={}){let t=[];const r=[];for(const i of A){if(i instanceof Error){if(!1!==e.override)return{override:i};const A=i.toString();t.push(A),r.push({message:A,type:"override",context:{error:i}});continue}const A=i.toString();t.push(A),r.push({message:A,path:i.path.filter((A=>"object"!=typeof A)),type:i.code,context:i.local})}return t.length>1&&(t=[...new Set(t)]),{message:t.join(". "),details:r}},e.ValidationError=class extends Error{constructor(A,e,t){super(A),this._original=t,this.details=e}static isError(A){return A instanceof e.ValidationError}},e.ValidationError.prototype.isJoi=!0,e.ValidationError.prototype.name="ValidationError",e.ValidationError.prototype.annotate=r.error},8901:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(8160),o=t(6914),s={};e.type=function(A,e){const t=Object.getPrototypeOf(A),a=i(t),l=A._assign(Object.create(a)),c=Object.assign({},e);delete c.base,a._definition=c;const g=t._definition||{};c.messages=o.merge(g.messages,c.messages),c.properties=Object.assign({},g.properties,c.properties),l.type=c.type,c.flags=Object.assign({},g.flags,c.flags);const u=Object.assign({},g.terms);if(c.terms)for(const A in c.terms){const e=c.terms[A];r(void 0===l.$_terms[A],"Invalid term override for",c.type,A),l.$_terms[A]=e.init,u[A]=e}c.terms=u,c.args||(c.args=g.args),c.prepare=s.prepare(c.prepare,g.prepare),c.coerce&&("function"==typeof c.coerce&&(c.coerce={method:c.coerce}),c.coerce.from&&!Array.isArray(c.coerce.from)&&(c.coerce={method:c.coerce.method,from:[].concat(c.coerce.from)})),c.coerce=s.coerce(c.coerce,g.coerce),c.validate=s.validate(c.validate,g.validate);const h=Object.assign({},g.rules);if(c.rules)for(const A in c.rules){const e=c.rules[A];r("object"==typeof e,"Invalid rule definition for",c.type,A);let t=e.method;if(void 0===t&&(t=function(){return this.$_addRule(A)}),t&&(r(!a[A],"Rule conflict in",c.type,A),a[A]=t),r(!h[A],"Rule conflict in",c.type,A),h[A]=e,e.alias){const A=[].concat(e.alias);for(const t of A)a[t]=e.method}e.args&&(e.argsByName=new Map,e.args=e.args.map((A=>("string"==typeof A&&(A={name:A}),r(!e.argsByName.has(A.name),"Duplicated argument name",A.name),n.isSchema(A.assert)&&(A.assert=A.assert.strict().label(A.name)),e.argsByName.set(A.name,A),A))))}c.rules=h;const E=Object.assign({},g.modifiers);if(c.modifiers)for(const A in c.modifiers){r(!a[A],"Rule conflict in",c.type,A);const e=c.modifiers[A];r("function"==typeof e,"Invalid modifier definition for",c.type,A);const t=function(e){return this.rule({[A]:e})};a[A]=t,E[A]=e}if(c.modifiers=E,c.overrides){a._super=t,l.$_super={};for(const A in c.overrides)r(t[A],"Cannot override missing",A),c.overrides[A][n.symbols.parent]=t[A],l.$_super[A]=t[A].bind(l);Object.assign(a,c.overrides)}c.cast=Object.assign({},g.cast,c.cast);const B=Object.assign({},g.manifest,c.manifest);return B.build=s.build(c.manifest&&c.manifest.build,g.manifest&&g.manifest.build),c.manifest=B,c.rebuild=s.rebuild(c.rebuild,g.rebuild),l},s.build=function(A,e){return A&&e?function(t,r){return e(A(t,r),r)}:A||e},s.coerce=function(A,e){return A&&e?{from:A.from&&e.from?[...new Set([...A.from,...e.from])]:null,method(t,r){let i;if((!e.from||e.from.includes(typeof t))&&(i=e.method(t,r),i)){if(i.errors||void 0===i.value)return i;t=i.value}if(!A.from||A.from.includes(typeof t)){const e=A.method(t,r);if(e)return e}return i}}:A||e},s.prepare=function(A,e){return A&&e?function(t,r){const i=A(t,r);if(i){if(i.errors||void 0===i.value)return i;t=i.value}return e(t,r)||i}:A||e},s.rebuild=function(A,e){return A&&e?function(t){e(t),A(t)}:A||e},s.validate=function(A,e){return A&&e?function(t,r){const i=e(t,r);if(i){if(i.errors&&(!Array.isArray(i.errors)||i.errors.length))return i;t=i.value}return A(t,r)||i}:A||e}},5107:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(8652),o=t(8160),s=t(3292),a=t(6354),l=t(8901),c=t(9708),g=t(6133),u=t(3328),h=t(1152);let E;const B={types:{alternatives:t(4946),any:t(8068),array:t(546),boolean:t(4937),date:t(7500),function:t(390),link:t(8785),number:t(3832),object:t(8966),string:t(7417),symbol:t(8826)},aliases:{alt:"alternatives",bool:"boolean",func:"function"},root:function(){const A={_types:new Set(Object.keys(B.types))};for(const e of A._types)A[e]=function(...A){return r(!A.length||["alternatives","link","object"].includes(e),"The",e,"type does not allow arguments"),B.generate(this,B.types[e],A)};for(const e of["allow","custom","disallow","equal","exist","forbidden","invalid","not","only","optional","options","prefs","preferences","required","strip","valid","when"])A[e]=function(...A){return this.any()[e](...A)};Object.assign(A,B.methods);for(const e in B.aliases){const t=B.aliases[e];A[e]=A[t]}return A.x=A.expression,h.setup&&h.setup(A),A}};B.methods={ValidationError:a.ValidationError,version:o.version,cache:n.provider,assert(A,e,...t){B.assert(A,e,!0,t)},attempt:(A,e,...t)=>B.assert(A,e,!1,t),build(A){return r("function"==typeof c.build,"Manifest functionality disabled"),c.build(this,A)},checkPreferences(A){o.checkPreferences(A)},compile(A,e){return s.compile(this,A,e)},defaults(A){r("function"==typeof A,"modifier must be a function");const e=Object.assign({},this);for(const t of e._types){const i=A(e[t]());r(o.isSchema(i),"modifier must return a valid schema object"),e[t]=function(...A){return B.generate(this,i,A)}}return e},expression:(...A)=>new u(...A),extend(...A){o.verifyFlat(A,"extend"),E=E||t(3378),r(A.length,"You need to provide at least one extension"),this.assert(A,E.extensions);const e=Object.assign({},this);e._types=new Set(e._types);for(let t of A){"function"==typeof t&&(t=t(e)),this.assert(t,E.extension);const A=B.expandExtension(t,e);for(const t of A){r(void 0===e[t.type]||e._types.has(t.type),"Cannot override name",t.type);const A=t.base||this.any(),i=l.type(A,t);e._types.add(t.type),e[t.type]=function(...A){return B.generate(this,i,A)}}}return e},isError:a.ValidationError.isError,isExpression:u.isTemplate,isRef:g.isRef,isSchema:o.isSchema,in:(...A)=>g.in(...A),override:o.symbols.override,ref:(...A)=>g.create(...A),types(){const A={};for(const e of this._types)A[e]=this[e]();for(const e in B.aliases)A[e]=this[e]();return A}},B.assert=function(A,e,t,r){const n=r[0]instanceof Error||"string"==typeof r[0]?r[0]:null,s=n?r[1]:r[0],l=e.validate(A,o.preferences({errors:{stack:!0}},s||{}));let c=l.error;if(!c)return l.value;if(n instanceof Error)throw n;const g=t&&"function"==typeof c.annotate?c.annotate():c.message;throw c instanceof a.ValidationError==0&&(c=i(c)),c.message=n?"".concat(n," ").concat(g):g,c},B.generate=function(A,e,t){return r(A,"Must be invoked on a Joi instance."),e.$_root=A,e._definition.args&&t.length?e._definition.args(e,...t):e},B.expandExtension=function(A,e){if("string"==typeof A.type)return[A];const t=[];for(const r of e._types)if(A.type.test(r)){const i=Object.assign({},A);i.type=r,i.base=e[r](),t.push(i)}return t},A.exports=B.root()},6914:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(3328);e.compile=function(A,e){if("string"==typeof A)return r(!e,"Cannot set single message string"),new n(A);if(n.isTemplate(A))return r(!e,"Cannot set single message template"),A;r("object"==typeof A&&!Array.isArray(A),"Invalid message options"),e=e?i(e):{};for(let t in A){const i=A[t];if("root"===t||n.isTemplate(i)){e[t]=i;continue}if("string"==typeof i){e[t]=new n(i);continue}r("object"==typeof i&&!Array.isArray(i),"Invalid message for",t);const o=t;for(t in e[o]=e[o]||{},i){const A=i[t];"root"===t||n.isTemplate(A)?e[o][t]=A:(r("string"==typeof A,"Invalid message for",t,"in",o),e[o][t]=new n(A))}}return e},e.decompile=function(A){const e={};for(let t in A){const r=A[t];if("root"===t){e.root=r;continue}if(n.isTemplate(r)){e[t]=r.describe({compact:!0});continue}const i=t;for(t in e[i]={},r){const A=r[t];"root"!==t?e[i][t]=A.describe({compact:!0}):e[i].root=A}}return e},e.merge=function(A,t){if(!A)return e.compile(t);if(!t)return A;if("string"==typeof t)return new n(t);if(n.isTemplate(t))return t;const o=i(A);for(let A in t){const e=t[A];if("root"===A||n.isTemplate(e)){o[A]=e;continue}if("string"==typeof e){o[A]=new n(e);continue}r("object"==typeof e&&!Array.isArray(e),"Invalid message for",A);const i=A;for(A in o[i]=o[i]||{},e){const t=e[A];"root"===A||n.isTemplate(t)?o[i][A]=t:(r("string"==typeof t,"Invalid message for",A,"in",i),o[i][A]=new n(t))}}return o}},2294:(A,e,t)=>{"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(375),s=t(8160),a=t(6133),l={};e.Ids=l.Ids=class{constructor(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}clone(){const A=new l.Ids;return A._byId=new Map(this._byId),A._byKey=new Map(this._byKey),A._schemaChain=this._schemaChain,A}concat(A){A._schemaChain&&(this._schemaChain=!0);for(const[e,t]of A._byId.entries())o(!this._byKey.has(e),"Schema id conflicts with existing key:",e),this._byId.set(e,t);for(const[e,t]of A._byKey.entries())o(!this._byId.has(e),"Schema key conflicts with existing id:",e),this._byKey.set(e,t)}fork(A,e,t){const r=this._collect(A);r.push({schema:t});const i=r.shift();let n={id:i.id,schema:e(i.schema)};o(s.isSchema(n.schema),"adjuster function failed to return a joi schema type");for(const A of r)n={id:A.id,schema:l.fork(A.schema,n.id,n.schema)};return n.schema}labels(A,e=[]){const t=A[0],r=this._get(t);if(!r)return[...e,...A].join(".");const i=A.slice(1);return e=[...e,r.schema._flags.label||t],i.length?r.schema._ids.labels(i,e):e.join(".")}reach(A,e=[]){const t=A[0],r=this._get(t);o(r,"Schema does not contain path",[...e,...A].join("."));const i=A.slice(1);return i.length?r.schema._ids.reach(i,[...e,t]):r.schema}register(A,{key:e}={}){if(!A||!s.isSchema(A))return;(A.$_property("schemaChain")||A._ids._schemaChain)&&(this._schemaChain=!0);const t=A._flags.id;if(t){const e=this._byId.get(t);o(!e||e.schema===A,"Cannot add different schemas with the same id:",t),o(!this._byKey.has(t),"Schema id conflicts with existing key:",t),this._byId.set(t,{schema:A,id:t})}e&&(o(!this._byKey.has(e),"Schema already contains key:",e),o(!this._byId.has(e),"Schema key conflicts with existing id:",e),this._byKey.set(e,{schema:A,id:e}))}reset(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}_collect(A,e=[],t=[]){const r=A[0],i=this._get(r);o(i,"Schema does not contain path",[...e,...A].join(".")),t=[i,...t];const n=A.slice(1);return n.length?i.schema._ids._collect(n,[...e,r],t):t}_get(A){return this._byId.get(A)||this._byKey.get(A)}},l.fork=function(A,t,r){const i=e.schema(A,{each:(A,{key:e})=>{if(t===(A._flags.id||e))return r},ref:!1});return i?i.$_mutateRebuild():A},e.schema=function(A,e){let t;for(const r in A._flags){if("_"===r[0])continue;const i=l.scan(A._flags[r],{source:"flags",name:r},e);void 0!==i&&(t=t||A.clone(),t._flags[r]=i)}for(let r=0;r<A._rules.length;++r){const i=A._rules[r],n=l.scan(i.args,{source:"rules",name:i.name},e);if(void 0!==n){t=t||A.clone();const e=Object.assign({},i);e.args=n,t._rules[r]=e,t._singleRules.get(i.name)===i&&t._singleRules.set(i.name,e)}}for(const r in A.$_terms){if("_"===r[0])continue;const i=l.scan(A.$_terms[r],{source:"terms",name:r},e);void 0!==i&&(t=t||A.clone(),t.$_terms[r]=i)}return t},l.scan=function(A,e,t,r,n){const o=r||[];if(null===A||"object"!=typeof A)return;let c;if(Array.isArray(A)){for(let r=0;r<A.length;++r){const i="terms"===e.source&&"keys"===e.name&&A[r].key,n=l.scan(A[r],e,t,[r,...o],i);void 0!==n&&(c=c||A.slice(),c[r]=n)}return c}if(!1!==t.schema&&s.isSchema(A)||!1!==t.ref&&a.isRef(A)){const r=t.each(A,i(i({},e),{},{path:o,key:n}));if(r===A)return;return r}for(const r in A){if("_"===r[0])continue;const i=l.scan(A[r],e,t,[r,...o],n);void 0!==i&&(c=c||Object.assign({},A),c[r]=i)}return c}},6133:(A,e,t)=>{"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(375),s=t(8571),a=t(9621),l=t(8160);let c;const g={symbol:Symbol("ref"),defaults:{adjust:null,in:!1,iterables:null,map:null,separator:".",type:"value"}};e.create=function(A,e={}){o("string"==typeof A,"Invalid reference key:",A),l.assertOptions(e,["adjust","ancestor","in","iterables","map","prefix","render","separator"]),o(!e.prefix||"object"==typeof e.prefix,"options.prefix must be of type object");const t=Object.assign({},g.defaults,e);delete t.prefix;const r=t.separator,i=g.context(A,r,e.prefix);if(t.type=i.type,A=i.key,"value"===t.type)if(i.root&&(o(!r||A[0]!==r,"Cannot specify relative path with root prefix"),t.ancestor="root",A||(A=null)),r&&r===A)A=null,t.ancestor=0;else if(void 0!==t.ancestor)o(!r||!A||A[0]!==r,"Cannot combine prefix with ancestor option");else{const[e,i]=g.ancestor(A,r);i&&""===(A=A.slice(i))&&(A=null),t.ancestor=e}return t.path=r?null===A?[]:A.split(r):[A],new g.Ref(t)},e.in=function(A,t={}){return e.create(A,i(i({},t),{},{in:!0}))},e.isRef=function(A){return!!A&&!!A[l.symbols.ref]},g.Ref=class{constructor(A){o("object"==typeof A,"Invalid reference construction"),l.assertOptions(A,["adjust","ancestor","in","iterables","map","path","render","separator","type","depth","key","root","display"]),o([!1,void 0].includes(A.separator)||"string"==typeof A.separator&&1===A.separator.length,"Invalid separator"),o(!A.adjust||"function"==typeof A.adjust,"options.adjust must be a function"),o(!A.map||Array.isArray(A.map),"options.map must be an array"),o(!A.map||!A.adjust,"Cannot set both map and adjust options"),Object.assign(this,g.defaults,A),o("value"===this.type||void 0===this.ancestor,"Non-value references cannot reference ancestors"),Array.isArray(this.map)&&(this.map=new Map(this.map)),this.depth=this.path.length,this.key=this.path.length?this.path.join(this.separator):null,this.root=this.path[0],this.updateDisplay()}resolve(A,e,t,r,i={}){return o(!this.in||i.in,"Invalid in() reference usage"),"global"===this.type?this._resolve(t.context,e,i):"local"===this.type?this._resolve(r,e,i):this.ancestor?"root"===this.ancestor?this._resolve(e.ancestors[e.ancestors.length-1],e,i):(o(this.ancestor<=e.ancestors.length,"Invalid reference exceeds the schema root:",this.display),this._resolve(e.ancestors[this.ancestor-1],e,i)):this._resolve(A,e,i)}_resolve(A,e,t){let r;if("value"===this.type&&e.mainstay.shadow&&!1!==t.shadow&&(r=e.mainstay.shadow.get(this.absolute(e))),void 0===r&&(r=a(A,this.path,{iterables:this.iterables,functions:!0})),this.adjust&&(r=this.adjust(r)),this.map){const A=this.map.get(r);void 0!==A&&(r=A)}return e.mainstay&&e.mainstay.tracer.resolve(e,this,r),r}toString(){return this.display}absolute(A){return[...A.path.slice(0,-this.ancestor),...this.path]}clone(){return new g.Ref(this)}describe(){const A={path:this.path};"value"!==this.type&&(A.type=this.type),"."!==this.separator&&(A.separator=this.separator),"value"===this.type&&1!==this.ancestor&&(A.ancestor=this.ancestor),this.map&&(A.map=[...this.map]);for(const e of["adjust","iterables","render"])null!==this[e]&&void 0!==this[e]&&(A[e]=this[e]);return!1!==this.in&&(A.in=!0),{ref:A}}updateDisplay(){const A=null!==this.key?this.key:"";if("value"!==this.type)return void(this.display="ref:".concat(this.type,":").concat(A));if(!this.separator)return void(this.display="ref:".concat(A));if(!this.ancestor)return void(this.display="ref:".concat(this.separator).concat(A));if("root"===this.ancestor)return void(this.display="ref:root:".concat(A));if(1===this.ancestor)return void(this.display="ref:".concat(A||".."));const e=new Array(this.ancestor+1).fill(this.separator).join("");this.display="ref:".concat(e).concat(A||"")}},g.Ref.prototype[l.symbols.ref]=!0,e.build=function(A){return"value"===(A=Object.assign({},g.defaults,A)).type&&void 0===A.ancestor&&(A.ancestor=1),new g.Ref(A)},g.context=function(A,e,t={}){if(A=A.trim(),t){const r=void 0===t.global?"$":t.global;if(r!==e&&A.startsWith(r))return{key:A.slice(r.length),type:"global"};const i=void 0===t.local?"#":t.local;if(i!==e&&A.startsWith(i))return{key:A.slice(i.length),type:"local"};const n=void 0===t.root?"/":t.root;if(n!==e&&A.startsWith(n))return{key:A.slice(n.length),type:"value",root:!0}}return{key:A,type:"value"}},g.ancestor=function(A,e){if(!e)return[1,0];if(A[0]!==e)return[1,0];if(A[1]!==e)return[0,1];let t=2;for(;A[t]===e;)++t;return[t-1,t]},e.toSibling=0,e.toParent=1,e.Manager=class{constructor(){this.refs=[]}register(A,r){if(A)if(r=void 0===r?e.toParent:r,Array.isArray(A))for(const e of A)this.register(e,r);else if(l.isSchema(A))for(const e of A._refs.refs)e.ancestor-r>=0&&this.refs.push({ancestor:e.ancestor-r,root:e.root});else e.isRef(A)&&"value"===A.type&&A.ancestor-r>=0&&this.refs.push({ancestor:A.ancestor-r,root:A.root}),c=c||t(3328),c.isTemplate(A)&&this.register(A.refs(),r)}get length(){return this.refs.length}clone(){const A=new e.Manager;return A.refs=s(this.refs),A}reset(){this.refs=[]}roots(){return this.refs.filter((A=>!A.ancestor)).map((A=>A.root))}}},3378:(A,e,t)=>{"use strict";const r=t(5107),i={};i.wrap=r.string().min(1).max(2).allow(!1),e.preferences=r.object({allowUnknown:r.boolean(),abortEarly:r.boolean(),artifacts:r.boolean(),cache:r.boolean(),context:r.object(),convert:r.boolean(),dateFormat:r.valid("date","iso","string","time","utc"),debug:r.boolean(),errors:{escapeHtml:r.boolean(),label:r.valid("path","key",!1),language:[r.string(),r.object().ref()],render:r.boolean(),stack:r.boolean(),wrap:{label:i.wrap,array:i.wrap,string:i.wrap}},externals:r.boolean(),messages:r.object(),noDefaults:r.boolean(),nonEnumerables:r.boolean(),presence:r.valid("required","optional","forbidden"),skipFunctions:r.boolean(),stripUnknown:r.object({arrays:r.boolean(),objects:r.boolean()}).or("arrays","objects").allow(!0,!1),warnings:r.boolean()}).strict(),i.nameRx=/^[a-zA-Z0-9]\w*$/,i.rule=r.object({alias:r.array().items(r.string().pattern(i.nameRx)).single(),args:r.array().items(r.string(),r.object({name:r.string().pattern(i.nameRx).required(),ref:r.boolean(),assert:r.alternatives([r.function(),r.object().schema()]).conditional("ref",{is:!0,then:r.required()}),normalize:r.function(),message:r.string().when("assert",{is:r.function(),then:r.required()})})),convert:r.boolean(),manifest:r.boolean(),method:r.function().allow(!1),multi:r.boolean(),validate:r.function()}),e.extension=r.object({type:r.alternatives([r.string(),r.object().regex()]).required(),args:r.function(),cast:r.object().pattern(i.nameRx,r.object({from:r.function().maxArity(1).required(),to:r.function().minArity(1).maxArity(2).required()})),base:r.object().schema().when("type",{is:r.object().regex(),then:r.forbidden()}),coerce:[r.function().maxArity(3),r.object({method:r.function().maxArity(3).required(),from:r.array().items(r.string()).single()})],flags:r.object().pattern(i.nameRx,r.object({setter:r.string(),default:r.any()})),manifest:{build:r.function().arity(2)},messages:[r.object(),r.string()],modifiers:r.object().pattern(i.nameRx,r.function().minArity(1).maxArity(2)),overrides:r.object().pattern(i.nameRx,r.function()),prepare:r.function().maxArity(3),rebuild:r.function().arity(1),rules:r.object().pattern(i.nameRx,i.rule),terms:r.object().pattern(i.nameRx,r.object({init:r.array().allow(null).required(),manifest:r.object().pattern(/.+/,[r.valid("schema","single"),r.object({mapped:r.object({from:r.string().required(),to:r.string().required()}).required()})])})),validate:r.function().maxArity(3)}).strict(),e.extensions=r.array().items(r.object(),r.function().arity(1)).strict(),i.desc={buffer:r.object({buffer:r.string()}),func:r.object({function:r.function().required(),options:{literal:!0}}),override:r.object({override:!0}),ref:r.object({ref:r.object({type:r.valid("value","global","local"),path:r.array().required(),separator:r.string().length(1).allow(!1),ancestor:r.number().min(0).integer().allow("root"),map:r.array().items(r.array().length(2)).min(1),adjust:r.function(),iterables:r.boolean(),in:r.boolean(),render:r.boolean()}).required()}),regex:r.object({regex:r.string().min(3)}),special:r.object({special:r.valid("deep").required()}),template:r.object({template:r.string().required(),options:r.object()}),value:r.object({value:r.alternatives([r.object(),r.array()]).required()})},i.desc.entity=r.alternatives([r.array().items(r.link("...")),r.boolean(),r.function(),r.number(),r.string(),i.desc.buffer,i.desc.func,i.desc.ref,i.desc.regex,i.desc.special,i.desc.template,i.desc.value,r.link("/")]),i.desc.values=r.array().items(null,r.boolean(),r.function(),r.number().allow(1/0,-1/0),r.string().allow(""),r.symbol(),i.desc.buffer,i.desc.func,i.desc.override,i.desc.ref,i.desc.regex,i.desc.template,i.desc.value),i.desc.messages=r.object().pattern(/.+/,[r.string(),i.desc.template,r.object().pattern(/.+/,[r.string(),i.desc.template])]),e.description=r.object({type:r.string().required(),flags:r.object({cast:r.string(),default:r.any(),description:r.string(),empty:r.link("/"),failover:i.desc.entity,id:r.string(),label:r.string(),only:!0,presence:["optional","required","forbidden"],result:["raw","strip"],strip:r.boolean(),unit:r.string()}).unknown(),preferences:{allowUnknown:r.boolean(),abortEarly:r.boolean(),artifacts:r.boolean(),cache:r.boolean(),convert:r.boolean(),dateFormat:["date","iso","string","time","utc"],errors:{escapeHtml:r.boolean(),label:["path","key"],language:[r.string(),i.desc.ref],wrap:{label:i.wrap,array:i.wrap}},externals:r.boolean(),messages:i.desc.messages,noDefaults:r.boolean(),nonEnumerables:r.boolean(),presence:["required","optional","forbidden"],skipFunctions:r.boolean(),stripUnknown:r.object({arrays:r.boolean(),objects:r.boolean()}).or("arrays","objects").allow(!0,!1),warnings:r.boolean()},allow:i.desc.values,invalid:i.desc.values,rules:r.array().min(1).items({name:r.string().required(),args:r.object().min(1),keep:r.boolean(),message:[r.string(),i.desc.messages],warn:r.boolean()}),keys:r.object().pattern(/.*/,r.link("/")),link:i.desc.ref}).pattern(/^[a-z]\w*$/,r.any())},493:(A,e,t)=>{"use strict";const r=t(8571),i=t(9621),n=t(8160),o={value:Symbol("value")};A.exports=o.State=class{constructor(A,e,t){this.path=A,this.ancestors=e,this.mainstay=t.mainstay,this.schemas=t.schemas,this.debug=null}localize(A,e=null,t=null){const r=new o.State(A,e,this);return t&&r.schemas&&(r.schemas=[o.schemas(t),...r.schemas]),r}nest(A,e){const t=new o.State(this.path,this.ancestors,this);return t.schemas=t.schemas&&[o.schemas(A),...t.schemas],t.debug=e,t}shadow(A,e){this.mainstay.shadow=this.mainstay.shadow||new o.Shadow,this.mainstay.shadow.set(this.path,A,e)}snapshot(){this.mainstay.shadow&&(this._snapshot=r(this.mainstay.shadow.node(this.path)))}restore(){this.mainstay.shadow&&(this.mainstay.shadow.override(this.path,this._snapshot),this._snapshot=void 0)}},o.schemas=function(A){return n.isSchema(A)?{schema:A}:A},o.Shadow=class{constructor(){this._values=null}set(A,e,t){if(!A.length)return;if("strip"===t&&"number"==typeof A[A.length-1])return;this._values=this._values||new Map;let r=this._values;for(let e=0;e<A.length;++e){const t=A[e];let i=r.get(t);i||(i=new Map,r.set(t,i)),r=i}r[o.value]=e}get(A){const e=this.node(A);if(e)return e[o.value]}node(A){if(this._values)return i(this._values,A,{iterables:!0})}override(A,e){if(!this._values)return;const t=A.slice(0,-1),r=A[A.length-1],n=i(this._values,t,{iterables:!0});e?n.set(r,e):n&&n.delete(r)}}},3328:(A,e,t)=>{"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(375),s=t(8571),a=t(5277),l=t(1447),c=t(8160),g=t(6354),u=t(6133),h={symbol:Symbol("template"),opens:new Array(1e3).join("\0"),closes:new Array(1e3).join(""),dateFormat:{date:Date.prototype.toDateString,iso:Date.prototype.toISOString,string:Date.prototype.toString,time:Date.prototype.toTimeString,utc:Date.prototype.toUTCString}};A.exports=h.Template=class{constructor(A,e){o("string"==typeof A,"Template source must be a string"),o(!A.includes("\0")&&!A.includes(""),"Template source cannot contain reserved control characters"),this.source=A,this.rendered=A,this._template=null,this._settings=s(e),this._parse()}_parse(){if(!this.source.includes("{"))return;const A=h.encode(this.source),e=h.split(A);let t=!1;const r=[],i=e.shift();i&&r.push(i);for(const A of e){const e="{"!==A[0],i=e?"}":"}}",n=A.indexOf(i);if(-1===n||"{"===A[1]){r.push("{".concat(h.decode(A)));continue}let o=A.slice(e?0:1,n);const s=":"===o[0];s&&(o=o.slice(1));const a=this._ref(h.decode(o),{raw:e,wrapped:s});r.push(a),"string"!=typeof a&&(t=!0);const l=A.slice(n+i.length);l&&r.push(h.decode(l))}t?this._template=r:this.rendered=r.join("")}static date(A,e){return h.dateFormat[e.dateFormat].call(A)}describe(A={}){if(!this._settings&&A.compact)return this.source;const e={template:this.source};return this._settings&&(e.options=this._settings),e}static build(A){return new h.Template(A.template,A.options)}isDynamic(){return!!this._template}static isTemplate(A){return!!A&&!!A[c.symbols.template]}refs(){if(!this._template)return;const A=[];for(const e of this._template)"string"!=typeof e&&A.push(...e.refs);return A}resolve(A,e,t,r){return this._template&&1===this._template.length?this._part(this._template[0],A,e,t,r,{}):this.render(A,e,t,r)}_part(A,...e){return A.ref?A.ref.resolve(...e):A.formula.evaluate(e)}render(A,e,t,r,i={}){if(!this.isDynamic())return this.rendered;const n=[];for(const o of this._template)if("string"==typeof o)n.push(o);else{const s=this._part(o,A,e,t,r,i),l=h.stringify(s,A,e,t,r,i);if(void 0!==l){const A=o.raw||!1===(i.errors&&i.errors.escapeHtml)?l:a(l);n.push(h.wrap(A,o.wrapped&&t.errors.wrap.label))}}return n.join("")}_ref(A,{raw:e,wrapped:t}){const r=[],i=A=>{const e=u.create(A,this._settings);return r.push(e),A=>e.resolve(...A)};try{var n=new l.Parser(A,{reference:i,functions:h.functions,constants:h.constants})}catch(e){throw e.message='Invalid template variable "'.concat(A,'" fails due to: ').concat(e.message),e}if(n.single){if("reference"===n.single.type){const A=r[0];return{ref:A,raw:e,refs:r,wrapped:t||"local"===A.type&&"label"===A.key}}return h.stringify(n.single.value)}return{formula:n,raw:e,refs:r}}toString(){return this.source}},h.Template.prototype[c.symbols.template]=!0,h.Template.prototype.isImmutable=!0,h.encode=function(A){return A.replace(/\\(\{+)/g,((A,e)=>h.opens.slice(0,e.length))).replace(/\\(\}+)/g,((A,e)=>h.closes.slice(0,e.length)))},h.decode=function(A){return A.replace(/\u0000/g,"{").replace(/\u0001/g,"}")},h.split=function(A){const e=[];let t="";for(let r=0;r<A.length;++r){const i=A[r];if("{"===i){let i="";for(;r+1<A.length&&"{"===A[r+1];)i+="{",++r;e.push(t),t=i}else t+=i}return e.push(t),e},h.wrap=function(A,e){return e?1===e.length?"".concat(e).concat(A).concat(e):"".concat(e[0]).concat(A).concat(e[1]):A},h.stringify=function(A,e,t,r,n,o={}){const s=typeof A,a=r&&r.errors&&r.errors.wrap||{};let l=!1;if(u.isRef(A)&&A.render&&(l=A.in,A=A.resolve(e,t,r,n,i({in:A.in},o))),null===A)return"null";if("string"===s)return h.wrap(A,o.arrayItems&&a.string);if("number"===s||"function"===s||"symbol"===s)return A.toString();if("object"!==s)return JSON.stringify(A);if(A instanceof Date)return h.Template.date(A,r);if(A instanceof Map){const e=[];for(const[t,r]of A.entries())e.push("".concat(t.toString()," -> ").concat(r.toString()));A=e}if(!Array.isArray(A))return A.toString();const c=[];for(const s of A)c.push(h.stringify(s,e,t,r,n,i({arrayItems:!0},o)));return h.wrap(c.join(", "),!l&&a.array)},h.constants={true:!0,false:!1,null:null,second:1e3,minute:6e4,hour:36e5,day:864e5},h.functions={if:(A,e,t)=>A?e:t,msg(A){const[e,t,r,i,n]=this,o=n.messages;if(!o)return"";const s=g.template(e,o[0],A,t,r)||g.template(e,o[1],A,t,r);return s?s.render(e,t,r,i,n):""},number:A=>"number"==typeof A?A:"string"==typeof A?parseFloat(A):"boolean"==typeof A?A?1:0:A instanceof Date?A.getTime():null}},4946:(A,e,t)=>{"use strict";const r=t(375),i=t(1687),n=t(8068),o=t(8160),s=t(3292),a=t(6354),l=t(6133),c={};A.exports=n.extend({type:"alternatives",flags:{match:{default:"any"}},terms:{matches:{init:[],register:l.toSibling}},args:(A,...e)=>1===e.length&&Array.isArray(e[0])?A.try(...e[0]):A.try(...e),validate(A,e){const{schema:t,error:r,state:n,prefs:o}=e;if(t._flags.match){const e=[],s=[];for(let r=0;r<t.$_terms.matches.length;++r){const i=t.$_terms.matches[r],a=n.nest(i.schema,"match.".concat(r));a.snapshot();const l=i.schema.$_validate(A,a,o);l.errors?(s.push(l.errors),a.restore()):e.push(l.value)}if(0===e.length)return{errors:r("alternatives.any",{details:s.map((A=>a.details(A,{override:!1})))})};if("one"===t._flags.match)return 1===e.length?{value:e[0]}:{errors:r("alternatives.one")};if(e.length!==t.$_terms.matches.length)return{errors:r("alternatives.all",{details:s.map((A=>a.details(A,{override:!1})))})};const l=A=>A.$_terms.matches.some((A=>"object"===A.schema.type||"alternatives"===A.schema.type&&l(A.schema)));return l(t)?{value:e.reduce(((A,e)=>i(A,e,{mergeArrays:!1})))}:{value:e[e.length-1]}}const s=[];for(let e=0;e<t.$_terms.matches.length;++e){const r=t.$_terms.matches[e];if(r.schema){const t=n.nest(r.schema,"match.".concat(e));t.snapshot();const i=r.schema.$_validate(A,t,o);if(!i.errors)return i;t.restore(),s.push({schema:r.schema,reports:i.errors});continue}const i=r.ref?r.ref.resolve(A,n,o):A,a=r.is?[r]:r.switch;for(let t=0;t<a.length;++t){const s=a[t],{is:l,then:c,otherwise:g}=s,u="match.".concat(e).concat(r.switch?"."+t:"");if(l.$_match(i,n.nest(l,"".concat(u,".is")),o)){if(c)return c.$_validate(A,n.nest(c,"".concat(u,".then")),o)}else if(g)return g.$_validate(A,n.nest(g,"".concat(u,".otherwise")),o)}}return c.errors(s,e)},rules:{conditional:{method(A,e){r(!this._flags._endedSwitch,"Unreachable condition"),r(!this._flags.match,"Cannot combine match mode",this._flags.match,"with conditional rule"),r(void 0===e.break,"Cannot use break option with alternatives conditional");const t=this.clone(),i=s.when(t,A,e),n=i.is?[i]:i.switch;for(const A of n)if(A.then&&A.otherwise){t.$_setFlag("_endedSwitch",!0,{clone:!1});break}return t.$_terms.matches.push(i),t.$_mutateRebuild()}},match:{method(A){if(r(["any","one","all"].includes(A),"Invalid alternatives match mode",A),"any"!==A)for(const e of this.$_terms.matches)r(e.schema,"Cannot combine match mode",A,"with conditional rules");return this.$_setFlag("match",A)}},try:{method(...A){r(A.length,"Missing alternative schemas"),o.verifyFlat(A,"try"),r(!this._flags._endedSwitch,"Unreachable condition");const e=this.clone();for(const t of A)e.$_terms.matches.push({schema:e.$_compile(t)});return e.$_mutateRebuild()}}},overrides:{label(A){return this.$_parent("label",A).$_modify({each:(e,t)=>"is"!==t.path[0]?e.label(A):void 0,ref:!1})}},rebuild(A){A.$_modify({each:e=>{o.isSchema(e)&&"array"===e.type&&A.$_setFlag("_arrayItems",!0,{clone:!1})}})},manifest:{build(A,e){if(e.matches)for(const t of e.matches){const{schema:e,ref:r,is:i,not:n,then:o,otherwise:s}=t;A=e?A.try(e):r?A.conditional(r,{is:i,then:o,not:n,otherwise:s,switch:t.switch}):A.conditional(i,{then:o,otherwise:s})}return A}},messages:{"alternatives.all":"{{#label}} does not match all of the required types","alternatives.any":"{{#label}} does not match any of the allowed types","alternatives.match":"{{#label}} does not match any of the allowed types","alternatives.one":"{{#label}} matches more than one allowed type","alternatives.types":"{{#label}} must be one of {{#types}}"}}),c.errors=function(A,{error:e,state:t}){if(!A.length)return{errors:e("alternatives.any")};if(1===A.length)return{errors:A[0].reports};const r=new Set,i=[];for(const{reports:n,schema:o}of A){if(n.length>1)return c.unmatched(A,e);const s=n[0];if(s instanceof a.Report==0)return c.unmatched(A,e);if(s.state.path.length!==t.path.length){i.push({type:o.type,report:s});continue}if("any.only"===s.code){for(const A of s.local.valids)r.add(A);continue}const[l,g]=s.code.split(".");"base"===g?r.add(l):i.push({type:o.type,report:s})}return i.length?1===i.length?{errors:i[0].report}:c.unmatched(A,e):{errors:e("alternatives.types",{types:[...r]})}},c.unmatched=function(A,e){const t=[];for(const e of A)t.push(...e.reports);return{errors:e("alternatives.match",a.details(t,{override:!1}))}}},8068:(A,e,t)=>{"use strict";const r=t(375),i=t(7629),n=t(8160),o=t(6914);A.exports=i.extend({type:"any",flags:{only:{default:!1}},terms:{alterations:{init:null},examples:{init:null},externals:{init:null},metas:{init:[]},notes:{init:[]},shared:{init:null},tags:{init:[]},whens:{init:null}},rules:{custom:{method(A,e){return r("function"==typeof A,"Method must be a function"),r(void 0===e||e&&"string"==typeof e,"Description must be a non-empty string"),this.$_addRule({name:"custom",args:{method:A,description:e}})},validate(A,e,{method:t}){try{return t(A,e)}catch(A){return e.error("any.custom",{error:A})}},args:["method","description"],multi:!0},messages:{method(A){return this.prefs({messages:A})}},shared:{method(A){r(n.isSchema(A)&&A._flags.id,"Schema must be a schema with an id");const e=this.clone();return e.$_terms.shared=e.$_terms.shared||[],e.$_terms.shared.push(A),e.$_mutateRegister(A),e}},warning:{method(A,e){return r(A&&"string"==typeof A,"Invalid warning code"),this.$_addRule({name:"warning",args:{code:A,local:e},warn:!0})},validate:(A,e,{code:t,local:r})=>e.error(t,r),args:["code","local"],multi:!0}},modifiers:{keep(A,e=!0){A.keep=e},message(A,e){A.message=o.compile(e)},warn(A,e=!0){A.warn=e}},manifest:{build(A,e){for(const t in e){const r=e[t];if(["examples","externals","metas","notes","tags"].includes(t))for(const e of r)A=A[t.slice(0,-1)](e);else if("alterations"!==t)if("whens"!==t){if("shared"===t)for(const e of r)A=A.shared(e)}else for(const e of r){const{ref:t,is:r,not:i,then:n,otherwise:o,concat:s}=e;A=s?A.concat(s):t?A.when(t,{is:r,not:i,then:n,otherwise:o,switch:e.switch,break:e.break}):A.when(r,{then:n,otherwise:o,break:e.break})}else{const e={};for(const{target:A,adjuster:t}of r)e[A]=t;A=A.alter(e)}}return A}},messages:{"any.custom":"{{#label}} failed custom validation because {{#error.message}}","any.default":"{{#label}} threw an error when running default method","any.failover":"{{#label}} threw an error when running failover method","any.invalid":"{{#label}} contains an invalid value","any.only":'{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',"any.ref":"{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}","any.required":"{{#label}} is required","any.unknown":"{{#label}} is not allowed"}})},546:(A,e,t)=>{"use strict";const r=t(375),i=t(9474),n=t(9621),o=t(8068),s=t(8160),a=t(3292),l={};A.exports=o.extend({type:"array",flags:{single:{default:!1},sparse:{default:!1}},terms:{items:{init:[],manifest:"schema"},ordered:{init:[],manifest:"schema"},_exclusions:{init:[]},_inclusions:{init:[]},_requireds:{init:[]}},coerce:{from:"object",method(A,{schema:e,state:t,prefs:r}){if(!Array.isArray(A))return;const i=e.$_getRule("sort");return i?l.sort(e,A,i.args.options,t,r):void 0}},validate(A,{schema:e,error:t}){if(!Array.isArray(A)){if(e._flags.single){const e=[A];return e[s.symbols.arraySingle]=!0,{value:e}}return{errors:t("array.base")}}if(e.$_getRule("items")||e.$_terms.externals)return{value:A.slice()}},rules:{has:{method(A){A=this.$_compile(A,{appendPath:!0});const e=this.$_addRule({name:"has",args:{schema:A}});return e.$_mutateRegister(A),e},validate(A,{state:e,prefs:t,error:r},{schema:i}){const n=[A,...e.ancestors];for(let r=0;r<A.length;++r){const o=e.localize([...e.path,r],n,i);if(i.$_match(A[r],o,t))return A}const o=i._flags.label;return o?r("array.hasKnown",{patternLabel:o}):r("array.hasUnknown",null)},multi:!0},items:{method(...A){s.verifyFlat(A,"items");const e=this.$_addRule("items");for(let t=0;t<A.length;++t){const r=s.tryWithPath((()=>this.$_compile(A[t])),t,{append:!0});e.$_terms.items.push(r)}return e.$_mutateRebuild()},validate(A,{schema:e,error:t,state:r,prefs:i,errorsArray:n}){const o=e.$_terms._requireds.slice(),a=e.$_terms.ordered.slice(),c=[...e.$_terms._inclusions,...o],g=!A[s.symbols.arraySingle];delete A[s.symbols.arraySingle];const u=n();let h=A.length;for(let n=0;n<h;++n){const s=A[n];let E=!1,B=!1;const I=g?n:new Number(n),f=[...r.path,I];if(!e._flags.sparse&&void 0===s){if(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),i.abortEarly)return u;a.shift();continue}const p=[A,...r.ancestors];for(const A of e.$_terms._exclusions)if(A.$_match(s,r.localize(f,p,A),i,{presence:"ignore"})){if(u.push(t("array.excludes",{pos:n,value:s},r.localize(f))),i.abortEarly)return u;E=!0,a.shift();break}if(E)continue;if(e.$_terms.ordered.length){if(a.length){const o=a.shift(),c=o.$_validate(s,r.localize(f,p,o),i);if(c.errors){if(u.push(...c.errors),i.abortEarly)return u}else if("strip"===o._flags.result)l.fastSplice(A,n),--n,--h;else{if(!e._flags.sparse&&void 0===c.value){if(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),i.abortEarly)return u;continue}A[n]=c.value}continue}if(!e.$_terms.items.length){if(u.push(t("array.orderedLength",{pos:n,limit:e.$_terms.ordered.length})),i.abortEarly)return u;break}}const d=[];let w=o.length;for(let a=0;a<w;++a){const c=r.localize(f,p,o[a]);c.snapshot();const g=o[a].$_validate(s,c,i);if(d[a]=g,!g.errors){if(A[n]=g.value,B=!0,l.fastSplice(o,a),--a,--w,!e._flags.sparse&&void 0===g.value&&(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),i.abortEarly))return u;break}c.restore()}if(B)continue;const m=i.stripUnknown&&!!i.stripUnknown.arrays||!1;w=c.length;for(const a of c){let c;const g=o.indexOf(a);if(-1!==g)c=d[g];else{const o=r.localize(f,p,a);if(o.snapshot(),c=a.$_validate(s,o,i),!c.errors){"strip"===a._flags.result?(l.fastSplice(A,n),--n,--h):e._flags.sparse||void 0!==c.value?A[n]=c.value:(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),E=!0),B=!0;break}o.restore()}if(1===w){if(m){l.fastSplice(A,n),--n,--h,B=!0;break}if(u.push(...c.errors),i.abortEarly)return u;E=!0;break}}if(!E&&(e.$_terms._inclusions.length||e.$_terms._requireds.length)&&!B){if(m){l.fastSplice(A,n),--n,--h;continue}if(u.push(t("array.includes",{pos:n,value:s},r.localize(f))),i.abortEarly)return u}}return o.length&&l.fillMissedErrors(e,u,o,A,r,i),a.length&&(l.fillOrderedErrors(e,u,a,A,r,i),u.length||l.fillDefault(a,A,r,i)),u.length?u:A},priority:!0,manifest:!1},length:{method(A){return this.$_addRule({name:"length",args:{limit:A},operator:"="})},validate:(A,e,{limit:t},{name:r,operator:i,args:n})=>s.compare(A.length,t,i)?A:e.error("array."+r,{limit:n.limit,value:A}),args:[{name:"limit",ref:!0,assert:s.limit,message:"must be a positive integer"}]},max:{method(A){return this.$_addRule({name:"max",method:"length",args:{limit:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"length",args:{limit:A},operator:">="})}},ordered:{method(...A){s.verifyFlat(A,"ordered");const e=this.$_addRule("items");for(let t=0;t<A.length;++t){const r=s.tryWithPath((()=>this.$_compile(A[t])),t,{append:!0});l.validateSingle(r,e),e.$_mutateRegister(r),e.$_terms.ordered.push(r)}return e.$_mutateRebuild()}},single:{method(A){const e=void 0===A||!!A;return r(!e||!this._flags._arrayItems,"Cannot specify single rule when array has array items"),this.$_setFlag("single",e)}},sort:{method(A={}){s.assertOptions(A,["by","order"]);const e={order:A.order||"ascending"};return A.by&&(e.by=a.ref(A.by,{ancestor:0}),r(!e.by.ancestor,"Cannot sort by ancestor")),this.$_addRule({name:"sort",args:{options:e}})},validate(A,{error:e,state:t,prefs:r,schema:i},{options:n}){const{value:o,errors:s}=l.sort(i,A,n,t,r);if(s)return s;for(let t=0;t<A.length;++t)if(A[t]!==o[t])return e("array.sort",{order:n.order,by:n.by?n.by.key:"value"});return A},convert:!0},sparse:{method(A){const e=void 0===A||!!A;return this._flags.sparse===e?this:(e?this.clone():this.$_addRule("items")).$_setFlag("sparse",e,{clone:!1})}},unique:{method(A,e={}){r(!A||"function"==typeof A||"string"==typeof A,"comparator must be a function or a string"),s.assertOptions(e,["ignoreUndefined","separator"]);const t={name:"unique",args:{options:e,comparator:A}};if(A)if("string"==typeof A){const r=s.default(e.separator,".");t.path=r?A.split(r):[A]}else t.comparator=A;return this.$_addRule(t)},validate(A,{state:e,error:t,schema:o},{comparator:s,options:a},{comparator:l,path:c}){const g={string:Object.create(null),number:Object.create(null),undefined:Object.create(null),boolean:Object.create(null),object:new Map,function:new Map,custom:new Map},u=l||i,h=a.ignoreUndefined;for(let i=0;i<A.length;++i){const o=c?n(A[i],c):A[i],a=l?g.custom:g[typeof o];if(r(a,"Failed to find unique map container for type",typeof o),a instanceof Map){const r=a.entries();let n;for(;!(n=r.next()).done;)if(u(n.value[0],o)){const r=e.localize([...e.path,i],[A,...e.ancestors]),o={pos:i,value:A[i],dupePos:n.value[1],dupeValue:A[n.value[1]]};return c&&(o.path=s),t("array.unique",o,r)}a.set(o,i)}else{if((!h||void 0!==o)&&void 0!==a[o]){const r={pos:i,value:A[i],dupePos:a[o],dupeValue:A[a[o]]};return c&&(r.path=s),t("array.unique",r,e.localize([...e.path,i],[A,...e.ancestors]))}a[o]=i}}return A},args:["comparator","options"],multi:!0}},cast:{set:{from:Array.isArray,to:(A,e)=>new Set(A)}},rebuild(A){A.$_terms._inclusions=[],A.$_terms._exclusions=[],A.$_terms._requireds=[];for(const e of A.$_terms.items)l.validateSingle(e,A),"required"===e._flags.presence?A.$_terms._requireds.push(e):"forbidden"===e._flags.presence?A.$_terms._exclusions.push(e):A.$_terms._inclusions.push(e);for(const e of A.$_terms.ordered)l.validateSingle(e,A)},manifest:{build:(A,e)=>(e.items&&(A=A.items(...e.items)),e.ordered&&(A=A.ordered(...e.ordered)),A)},messages:{"array.base":"{{#label}} must be an array","array.excludes":"{{#label}} contains an excluded value","array.hasKnown":"{{#label}} does not contain at least one required match for type {:#patternLabel}","array.hasUnknown":"{{#label}} does not contain at least one required match","array.includes":"{{#label}} does not match any of the allowed types","array.includesRequiredBoth":"{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)","array.includesRequiredKnowns":"{{#label}} does not contain {{#knownMisses}}","array.includesRequiredUnknowns":"{{#label}} does not contain {{#unknownMisses}} required value(s)","array.length":"{{#label}} must contain {{#limit}} items","array.max":"{{#label}} must contain less than or equal to {{#limit}} items","array.min":"{{#label}} must contain at least {{#limit}} items","array.orderedLength":"{{#label}} must contain at most {{#limit}} items","array.sort":"{{#label}} must be sorted in {#order} order by {{#by}}","array.sort.mismatching":"{{#label}} cannot be sorted due to mismatching types","array.sort.unsupported":"{{#label}} cannot be sorted due to unsupported type {#type}","array.sparse":"{{#label}} must not be a sparse array item","array.unique":"{{#label}} contains a duplicate value"}}),l.fillMissedErrors=function(A,e,t,r,i,n){const o=[];let s=0;for(const A of t){const e=A._flags.label;e?o.push(e):++s}o.length?s?e.push(A.$_createError("array.includesRequiredBoth",r,{knownMisses:o,unknownMisses:s},i,n)):e.push(A.$_createError("array.includesRequiredKnowns",r,{knownMisses:o},i,n)):e.push(A.$_createError("array.includesRequiredUnknowns",r,{unknownMisses:s},i,n))},l.fillOrderedErrors=function(A,e,t,r,i,n){const o=[];for(const A of t)"required"===A._flags.presence&&o.push(A);o.length&&l.fillMissedErrors(A,e,o,r,i,n)},l.fillDefault=function(A,e,t,r){const i=[];let n=!0;for(let o=A.length-1;o>=0;--o){const s=A[o],a=[e,...t.ancestors],l=s.$_validate(void 0,t.localize(t.path,a,s),r).value;if(n){if(void 0===l)continue;n=!1}i.unshift(l)}i.length&&e.push(...i)},l.fastSplice=function(A,e){let t=e;for(;t<A.length;)A[t++]=A[t];--A.length},l.validateSingle=function(A,e){("array"===A.type||A._flags._arrayItems)&&(r(!e._flags.single,"Cannot specify array item with single rule enabled"),e.$_setFlag("_arrayItems",!0,{clone:!1}))},l.sort=function(A,e,t,r,i){const n="ascending"===t.order?1:-1,o=-1*n,s=n,a=(a,c)=>{let g=l.compare(a,c,o,s);if(null!==g)return g;if(t.by&&(a=t.by.resolve(a,r,i),c=t.by.resolve(c,r,i)),g=l.compare(a,c,o,s),null!==g)return g;const u=typeof a;if(u!==typeof c)throw A.$_createError("array.sort.mismatching",e,null,r,i);if("number"!==u&&"string"!==u)throw A.$_createError("array.sort.unsupported",e,{type:u},r,i);return"number"===u?(a-c)*n:a<c?o:s};try{return{value:e.slice().sort(a)}}catch(A){return{errors:A}}},l.compare=function(A,e,t,r){return A===e?0:void 0===A?1:void 0===e?-1:null===A?r:null===e?t:null}},4937:(A,e,t)=>{"use strict";const r=t(375),i=t(8068),n=t(8160),o=t(2036),s={isBool:function(A){return"boolean"==typeof A}};A.exports=i.extend({type:"boolean",flags:{sensitive:{default:!1}},terms:{falsy:{init:null,manifest:"values"},truthy:{init:null,manifest:"values"}},coerce(A,{schema:e}){if("boolean"!=typeof A){if("string"==typeof A){const t=e._flags.sensitive?A:A.toLowerCase();A="true"===t||"false"!==t&&A}return"boolean"!=typeof A&&(A=e.$_terms.truthy&&e.$_terms.truthy.has(A,null,null,!e._flags.sensitive)||(!e.$_terms.falsy||!e.$_terms.falsy.has(A,null,null,!e._flags.sensitive))&&A),{value:A}}},validate(A,{error:e}){if("boolean"!=typeof A)return{value:A,errors:e("boolean.base")}},rules:{truthy:{method(...A){n.verifyFlat(A,"truthy");const e=this.clone();e.$_terms.truthy=e.$_terms.truthy||new o;for(let t=0;t<A.length;++t){const i=A[t];r(void 0!==i,"Cannot call truthy with undefined"),e.$_terms.truthy.add(i)}return e}},falsy:{method(...A){n.verifyFlat(A,"falsy");const e=this.clone();e.$_terms.falsy=e.$_terms.falsy||new o;for(let t=0;t<A.length;++t){const i=A[t];r(void 0!==i,"Cannot call falsy with undefined"),e.$_terms.falsy.add(i)}return e}},sensitive:{method(A=!0){return this.$_setFlag("sensitive",A)}}},cast:{number:{from:s.isBool,to:(A,e)=>A?1:0},string:{from:s.isBool,to:(A,e)=>A?"true":"false"}},manifest:{build:(A,e)=>(e.truthy&&(A=A.truthy(...e.truthy)),e.falsy&&(A=A.falsy(...e.falsy)),A)},messages:{"boolean.base":"{{#label}} must be a boolean"}})},7500:(A,e,t)=>{"use strict";const r=t(375),i=t(8068),n=t(8160),o=t(3328),s={isDate:function(A){return A instanceof Date}};A.exports=i.extend({type:"date",coerce:{from:["number","string"],method:(A,{schema:e})=>({value:s.parse(A,e._flags.format)||A})},validate(A,{schema:e,error:t,prefs:r}){if(A instanceof Date&&!isNaN(A.getTime()))return;const i=e._flags.format;return r.convert&&i&&"string"==typeof A?{value:A,errors:t("date.format",{format:i})}:{value:A,errors:t("date.base")}},rules:{compare:{method:!1,validate(A,e,{date:t},{name:r,operator:i,args:o}){const s="now"===t?Date.now():t.getTime();return n.compare(A.getTime(),s,i)?A:e.error("date."+r,{limit:o.date,value:A})},args:[{name:"date",ref:!0,normalize:A=>"now"===A?A:s.parse(A),assert:A=>null!==A,message:"must have a valid date format"}]},format:{method(A){return r(["iso","javascript","unix"].includes(A),"Unknown date format",A),this.$_setFlag("format",A)}},greater:{method(A){return this.$_addRule({name:"greater",method:"compare",args:{date:A},operator:">"})}},iso:{method(){return this.format("iso")}},less:{method(A){return this.$_addRule({name:"less",method:"compare",args:{date:A},operator:"<"})}},max:{method(A){return this.$_addRule({name:"max",method:"compare",args:{date:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"compare",args:{date:A},operator:">="})}},timestamp:{method(A="javascript"){return r(["javascript","unix"].includes(A),'"type" must be one of "javascript, unix"'),this.format(A)}}},cast:{number:{from:s.isDate,to:(A,e)=>A.getTime()},string:{from:s.isDate,to:(A,{prefs:e})=>o.date(A,e)}},messages:{"date.base":"{{#label}} must be a valid date","date.format":'{{#label}} must be in {msg("date.format." + #format) || #format} format',"date.greater":"{{#label}} must be greater than {{:#limit}}","date.less":"{{#label}} must be less than {{:#limit}}","date.max":"{{#label}} must be less than or equal to {{:#limit}}","date.min":"{{#label}} must be greater than or equal to {{:#limit}}","date.format.iso":"ISO 8601 date","date.format.javascript":"timestamp or number of milliseconds","date.format.unix":"timestamp or number of seconds"}}),s.parse=function(A,e){if(A instanceof Date)return A;if("string"!=typeof A&&(isNaN(A)||!isFinite(A)))return null;if(/^\s*$/.test(A))return null;if("iso"===e)return n.isIsoDate(A)?s.date(A.toString()):null;const t=A;if("string"==typeof A&&/^[+-]?\d+(\.\d+)?$/.test(A)&&(A=parseFloat(A)),e){if("javascript"===e)return s.date(1*A);if("unix"===e)return s.date(1e3*A);if("string"==typeof t)return null}return s.date(A)},s.date=function(A){const e=new Date(A);return isNaN(e.getTime())?null:e}},390:(A,e,t)=>{"use strict";const r=t(375),i=t(7824);A.exports=i.extend({type:"function",properties:{typeof:"function"},rules:{arity:{method(A){return r(Number.isSafeInteger(A)&&A>=0,"n must be a positive integer"),this.$_addRule({name:"arity",args:{n:A}})},validate:(A,e,{n:t})=>A.length===t?A:e.error("function.arity",{n:t})},class:{method(){return this.$_addRule("class")},validate:(A,e)=>/^\s*class\s/.test(A.toString())?A:e.error("function.class",{value:A})},minArity:{method(A){return r(Number.isSafeInteger(A)&&A>0,"n must be a strict positive integer"),this.$_addRule({name:"minArity",args:{n:A}})},validate:(A,e,{n:t})=>A.length>=t?A:e.error("function.minArity",{n:t})},maxArity:{method(A){return r(Number.isSafeInteger(A)&&A>=0,"n must be a positive integer"),this.$_addRule({name:"maxArity",args:{n:A}})},validate:(A,e,{n:t})=>A.length<=t?A:e.error("function.maxArity",{n:t})}},messages:{"function.arity":"{{#label}} must have an arity of {{#n}}","function.class":"{{#label}} must be a class","function.maxArity":"{{#label}} must have an arity lesser or equal to {{#n}}","function.minArity":"{{#label}} must have an arity greater or equal to {{#n}}"}})},7824:(A,e,t)=>{"use strict";const r=t(978),i=t(375),n=t(8571),o=t(3652),s=t(8068),a=t(8160),l=t(3292),c=t(6354),g=t(6133),u=t(3328),h={renameDefaults:{alias:!1,multiple:!1,override:!1}};A.exports=s.extend({type:"_keys",properties:{typeof:"object"},flags:{unknown:{default:!1}},terms:{dependencies:{init:null},keys:{init:null,manifest:{mapped:{from:"schema",to:"key"}}},patterns:{init:null},renames:{init:null}},args:(A,e)=>A.keys(e),validate(A,{schema:e,error:t,state:r,prefs:i}){if(!A||typeof A!==e.$_property("typeof")||Array.isArray(A))return{value:A,errors:t("object.base",{type:e.$_property("typeof")})};if(!(e.$_terms.renames||e.$_terms.dependencies||e.$_terms.keys||e.$_terms.patterns||e.$_terms.externals))return;A=h.clone(A,i);const n=[];if(e.$_terms.renames&&!h.rename(e,A,r,i,n))return{value:A,errors:n};if(!e.$_terms.keys&&!e.$_terms.patterns&&!e.$_terms.dependencies)return{value:A,errors:n};const o=new Set(Object.keys(A));if(e.$_terms.keys){const t=[A,...r.ancestors];for(const s of e.$_terms.keys){const e=s.key,a=A[e];o.delete(e);const l=r.localize([...r.path,e],t,s),c=s.schema.$_validate(a,l,i);if(c.errors){if(i.abortEarly)return{value:A,errors:c.errors};void 0!==c.value&&(A[e]=c.value),n.push(...c.errors)}else"strip"===s.schema._flags.result||void 0===c.value&&void 0!==a?delete A[e]:void 0!==c.value&&(A[e]=c.value)}}if(o.size||e._flags._hasPatternMatch){const t=h.unknown(e,A,o,n,r,i);if(t)return t}if(e.$_terms.dependencies)for(const t of e.$_terms.dependencies){if(t.key&&void 0===t.key.resolve(A,r,i,null,{shadow:!1}))continue;const o=h.dependencies[t.rel](e,t,A,r,i);if(o){const t=e.$_createError(o.code,A,o.context,r,i);if(i.abortEarly)return{value:A,errors:t};n.push(t)}}return{value:A,errors:n}},rules:{and:{method(...A){return a.verifyFlat(A,"and"),h.dependency(this,"and",null,A)}},append:{method(A){return null==A||0===Object.keys(A).length?this:this.keys(A)}},assert:{method(A,e,t){u.isTemplate(A)||(A=l.ref(A)),i(void 0===t||"string"==typeof t,"Message must be a string"),e=this.$_compile(e,{appendPath:!0});const r=this.$_addRule({name:"assert",args:{subject:A,schema:e,message:t}});return r.$_mutateRegister(A),r.$_mutateRegister(e),r},validate(A,{error:e,prefs:t,state:r},{subject:i,schema:n,message:o}){const s=i.resolve(A,r,t),a=g.isRef(i)?i.absolute(r):[];return n.$_match(s,r.localize(a,[A,...r.ancestors],n),t)?A:e("object.assert",{subject:i,message:o})},args:["subject","schema","message"],multi:!0},instance:{method(A,e){return i("function"==typeof A,"constructor must be a function"),e=e||A.name,this.$_addRule({name:"instance",args:{constructor:A,name:e}})},validate:(A,e,{constructor:t,name:r})=>A instanceof t?A:e.error("object.instance",{type:r,value:A}),args:["constructor","name"]},keys:{method(A){i(void 0===A||"object"==typeof A,"Object schema must be a valid object"),i(!a.isSchema(A),"Object schema cannot be a joi schema");const e=this.clone();if(A)if(Object.keys(A).length){e.$_terms.keys=e.$_terms.keys?e.$_terms.keys.filter((e=>!A.hasOwnProperty(e.key))):new h.Keys;for(const t in A)a.tryWithPath((()=>e.$_terms.keys.push({key:t,schema:this.$_compile(A[t])})),t)}else e.$_terms.keys=new h.Keys;else e.$_terms.keys=null;return e.$_mutateRebuild()}},length:{method(A){return this.$_addRule({name:"length",args:{limit:A},operator:"="})},validate:(A,e,{limit:t},{name:r,operator:i,args:n})=>a.compare(Object.keys(A).length,t,i)?A:e.error("object."+r,{limit:n.limit,value:A}),args:[{name:"limit",ref:!0,assert:a.limit,message:"must be a positive integer"}]},max:{method(A){return this.$_addRule({name:"max",method:"length",args:{limit:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"length",args:{limit:A},operator:">="})}},nand:{method(...A){return a.verifyFlat(A,"nand"),h.dependency(this,"nand",null,A)}},or:{method(...A){return a.verifyFlat(A,"or"),h.dependency(this,"or",null,A)}},oxor:{method(...A){return h.dependency(this,"oxor",null,A)}},pattern:{method(A,e,t={}){const r=A instanceof RegExp;r||(A=this.$_compile(A,{appendPath:!0})),i(void 0!==e,"Invalid rule"),a.assertOptions(t,["fallthrough","matches"]),r&&i(!A.flags.includes("g")&&!A.flags.includes("y"),"pattern should not use global or sticky mode"),e=this.$_compile(e,{appendPath:!0});const n=this.clone();n.$_terms.patterns=n.$_terms.patterns||[];const o={[r?"regex":"schema"]:A,rule:e};return t.matches&&(o.matches=this.$_compile(t.matches),"array"!==o.matches.type&&(o.matches=o.matches.$_root.array().items(o.matches)),n.$_mutateRegister(o.matches),n.$_setFlag("_hasPatternMatch",!0,{clone:!1})),t.fallthrough&&(o.fallthrough=!0),n.$_terms.patterns.push(o),n.$_mutateRegister(e),n}},ref:{method(){return this.$_addRule("ref")},validate:(A,e)=>g.isRef(A)?A:e.error("object.refType",{value:A})},regex:{method(){return this.$_addRule("regex")},validate:(A,e)=>A instanceof RegExp?A:e.error("object.regex",{value:A})},rename:{method(A,e,t={}){i("string"==typeof A||A instanceof RegExp,"Rename missing the from argument"),i("string"==typeof e||e instanceof u,"Invalid rename to argument"),i(e!==A,"Cannot rename key to same name:",A),a.assertOptions(t,["alias","ignoreUndefined","override","multiple"]);const n=this.clone();n.$_terms.renames=n.$_terms.renames||[];for(const e of n.$_terms.renames)i(e.from!==A,"Cannot rename the same key multiple times");return e instanceof u&&n.$_mutateRegister(e),n.$_terms.renames.push({from:A,to:e,options:r(h.renameDefaults,t)}),n}},schema:{method(A="any"){return this.$_addRule({name:"schema",args:{type:A}})},validate:(A,e,{type:t})=>!a.isSchema(A)||"any"!==t&&A.type!==t?e.error("object.schema",{type:t}):A},unknown:{method(A){return this.$_setFlag("unknown",!1!==A)}},with:{method(A,e,t={}){return h.dependency(this,"with",A,e,t)}},without:{method(A,e,t={}){return h.dependency(this,"without",A,e,t)}},xor:{method(...A){return a.verifyFlat(A,"xor"),h.dependency(this,"xor",null,A)}}},overrides:{default(A,e){return void 0===A&&(A=a.symbols.deepDefault),this.$_parent("default",A,e)}},rebuild(A){if(A.$_terms.keys){const e=new o.Sorter;for(const t of A.$_terms.keys)a.tryWithPath((()=>e.add(t,{after:t.schema.$_rootReferences(),group:t.key})),t.key);A.$_terms.keys=new h.Keys(...e.nodes)}},manifest:{build(A,e){if(e.keys&&(A=A.keys(e.keys)),e.dependencies)for(const{rel:t,key:r=null,peers:i,options:n}of e.dependencies)A=h.dependency(A,t,r,i,n);if(e.patterns)for(const{regex:t,schema:r,rule:i,fallthrough:n,matches:o}of e.patterns)A=A.pattern(t||r,i,{fallthrough:n,matches:o});if(e.renames)for(const{from:t,to:r,options:i}of e.renames)A=A.rename(t,r,i);return A}},messages:{"object.and":"{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}","object.assert":'{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',"object.base":"{{#label}} must be of type {{#type}}","object.instance":"{{#label}} must be an instance of {{:#type}}","object.length":'{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}',"object.max":'{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',"object.min":'{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}',"object.missing":"{{#label}} must contain at least one of {{#peersWithLabels}}","object.nand":"{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}","object.oxor":"{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}","object.pattern.match":"{{#label}} keys failed to match pattern requirements","object.refType":"{{#label}} must be a Joi reference","object.regex":"{{#label}} must be a RegExp object","object.rename.multiple":"{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}","object.rename.override":"{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists","object.schema":"{{#label}} must be a Joi schema of {{#type}} type","object.unknown":"{{#label}} is not allowed","object.with":"{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}","object.without":"{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}","object.xor":"{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}"}}),h.clone=function(A,e){if("object"==typeof A){if(e.nonEnumerables)return n(A,{shallow:!0});const t=Object.create(Object.getPrototypeOf(A));return Object.assign(t,A),t}const t=function(...e){return A.apply(this,e)};return t.prototype=n(A.prototype),Object.defineProperty(t,"name",{value:A.name,writable:!1}),Object.defineProperty(t,"length",{value:A.length,writable:!1}),Object.assign(t,A),t},h.dependency=function(A,e,t,r,n){i(null===t||"string"==typeof t,e,"key must be a strings"),n||(n=r.length>1&&"object"==typeof r[r.length-1]?r.pop():{}),a.assertOptions(n,["separator"]),r=[].concat(r);const o=a.default(n.separator,"."),s=[];for(const A of r)i("string"==typeof A,e,"peers must be strings"),s.push(l.ref(A,{separator:o,ancestor:0,prefix:!1}));null!==t&&(t=l.ref(t,{separator:o,ancestor:0,prefix:!1}));const c=A.clone();return c.$_terms.dependencies=c.$_terms.dependencies||[],c.$_terms.dependencies.push(new h.Dependency(e,t,s,r)),c},h.dependencies={and(A,e,t,r,i){const n=[],o=[],s=e.peers.length;for(const A of e.peers)void 0===A.resolve(t,r,i,null,{shadow:!1})?n.push(A.key):o.push(A.key);if(n.length!==s&&o.length!==s)return{code:"object.and",context:{present:o,presentWithLabels:h.keysToLabels(A,o),missing:n,missingWithLabels:h.keysToLabels(A,n)}}},nand(A,e,t,r,i){const n=[];for(const A of e.peers)void 0!==A.resolve(t,r,i,null,{shadow:!1})&&n.push(A.key);if(n.length!==e.peers.length)return;const o=e.paths[0],s=e.paths.slice(1);return{code:"object.nand",context:{main:o,mainWithLabel:h.keysToLabels(A,o),peers:s,peersWithLabels:h.keysToLabels(A,s)}}},or(A,e,t,r,i){for(const A of e.peers)if(void 0!==A.resolve(t,r,i,null,{shadow:!1}))return;return{code:"object.missing",context:{peers:e.paths,peersWithLabels:h.keysToLabels(A,e.paths)}}},oxor(A,e,t,r,i){const n=[];for(const A of e.peers)void 0!==A.resolve(t,r,i,null,{shadow:!1})&&n.push(A.key);if(!n.length||1===n.length)return;const o={peers:e.paths,peersWithLabels:h.keysToLabels(A,e.paths)};return o.present=n,o.presentWithLabels=h.keysToLabels(A,n),{code:"object.oxor",context:o}},with(A,e,t,r,i){for(const n of e.peers)if(void 0===n.resolve(t,r,i,null,{shadow:!1}))return{code:"object.with",context:{main:e.key.key,mainWithLabel:h.keysToLabels(A,e.key.key),peer:n.key,peerWithLabel:h.keysToLabels(A,n.key)}}},without(A,e,t,r,i){for(const n of e.peers)if(void 0!==n.resolve(t,r,i,null,{shadow:!1}))return{code:"object.without",context:{main:e.key.key,mainWithLabel:h.keysToLabels(A,e.key.key),peer:n.key,peerWithLabel:h.keysToLabels(A,n.key)}}},xor(A,e,t,r,i){const n=[];for(const A of e.peers)void 0!==A.resolve(t,r,i,null,{shadow:!1})&&n.push(A.key);if(1===n.length)return;const o={peers:e.paths,peersWithLabels:h.keysToLabels(A,e.paths)};return 0===n.length?{code:"object.missing",context:o}:(o.present=n,o.presentWithLabels=h.keysToLabels(A,n),{code:"object.xor",context:o})}},h.keysToLabels=function(A,e){return Array.isArray(e)?e.map((e=>A.$_mapLabels(e))):A.$_mapLabels(e)},h.rename=function(A,e,t,r,i){const n={};for(const o of A.$_terms.renames){const s=[],a="string"!=typeof o.from;if(a)for(const A in e){if(void 0===e[A]&&o.options.ignoreUndefined)continue;if(A===o.to)continue;const t=o.from.exec(A);t&&s.push({from:A,to:o.to,match:t})}else!Object.prototype.hasOwnProperty.call(e,o.from)||void 0===e[o.from]&&o.options.ignoreUndefined||s.push(o);for(const l of s){const s=l.from;let c=l.to;if(c instanceof u&&(c=c.render(e,t,r,l.match)),s!==c){if(!o.options.multiple&&n[c]&&(i.push(A.$_createError("object.rename.multiple",e,{from:s,to:c,pattern:a},t,r)),r.abortEarly))return!1;if(Object.prototype.hasOwnProperty.call(e,c)&&!o.options.override&&!n[c]&&(i.push(A.$_createError("object.rename.override",e,{from:s,to:c,pattern:a},t,r)),r.abortEarly))return!1;void 0===e[s]?delete e[c]:e[c]=e[s],n[c]=!0,o.options.alias||delete e[s]}}}return!0},h.unknown=function(A,e,t,r,i,n){if(A.$_terms.patterns){let o=!1;const s=A.$_terms.patterns.map((A=>{if(A.matches)return o=!0,[]})),a=[e,...i.ancestors];for(const o of t){const l=e[o],c=[...i.path,o];for(let g=0;g<A.$_terms.patterns.length;++g){const u=A.$_terms.patterns[g];if(u.regex){const A=u.regex.test(o);if(i.mainstay.tracer.debug(i,"rule","pattern.".concat(g),A?"pass":"error"),!A)continue}else if(!u.schema.$_match(o,i.nest(u.schema,"pattern.".concat(g)),n))continue;t.delete(o);const h=i.localize(c,a,{schema:u.rule,key:o}),E=u.rule.$_validate(l,h,n);if(E.errors){if(n.abortEarly)return{value:e,errors:E.errors};r.push(...E.errors)}if(u.matches&&s[g].push(o),e[o]=E.value,!u.fallthrough)break}}if(o)for(let t=0;t<s.length;++t){const o=s[t];if(!o)continue;const l=A.$_terms.patterns[t].matches,g=i.localize(i.path,a,l),u=l.$_validate(o,g,n);if(u.errors){const t=c.details(u.errors,{override:!1});t.matches=o;const s=A.$_createError("object.pattern.match",e,t,i,n);if(n.abortEarly)return{value:e,errors:s};r.push(s)}}}if(t.size&&(A.$_terms.keys||A.$_terms.patterns)){if(n.stripUnknown&&!A._flags.unknown||n.skipFunctions){const A=!(!n.stripUnknown||!0!==n.stripUnknown&&!n.stripUnknown.objects);for(const r of t)A?(delete e[r],t.delete(r)):"function"==typeof e[r]&&t.delete(r)}if(!a.default(A._flags.unknown,n.allowUnknown))for(const o of t){const t=i.localize([...i.path,o],[]),s=A.$_createError("object.unknown",e[o],{child:o},t,n,{flags:!1});if(n.abortEarly)return{value:e,errors:s};r.push(s)}}},h.Dependency=class{constructor(A,e,t,r){this.rel=A,this.key=e,this.peers=t,this.paths=r}describe(){const A={rel:this.rel,peers:this.paths};return null!==this.key&&(A.key=this.key.key),"."!==this.peers[0].separator&&(A.options={separator:this.peers[0].separator}),A}},h.Keys=class extends Array{concat(A){const e=this.slice(),t=new Map;for(let A=0;A<e.length;++A)t.set(e[A].key,A);for(const r of A){const A=r.key,i=t.get(A);void 0!==i?e[i]={key:A,schema:e[i].schema.concat(r.schema)}:e.push(r)}return e}}},8785:(A,e,t)=>{"use strict";const r=t(375),i=t(8068),n=t(8160),o=t(3292),s=t(6354),a={};A.exports=i.extend({type:"link",properties:{schemaChain:!0},terms:{link:{init:null,manifest:"single",register:!1}},args:(A,e)=>A.ref(e),validate(A,{schema:e,state:t,prefs:i}){r(e.$_terms.link,"Uninitialized link schema");const n=a.generate(e,A,t,i),o=e.$_terms.link[0].ref;return n.$_validate(A,t.nest(n,"link:".concat(o.display,":").concat(n.type)),i)},generate:(A,e,t,r)=>a.generate(A,e,t,r),rules:{ref:{method(A){r(!this.$_terms.link,"Cannot reinitialize schema"),A=o.ref(A),r("value"===A.type||"local"===A.type,"Invalid reference type:",A.type),r("local"===A.type||"root"===A.ancestor||A.ancestor>0,"Link cannot reference itself");const e=this.clone();return e.$_terms.link=[{ref:A}],e}},relative:{method(A=!0){return this.$_setFlag("relative",A)}}},overrides:{concat(A){r(this.$_terms.link,"Uninitialized link schema"),r(n.isSchema(A),"Invalid schema object"),r("link"!==A.type,"Cannot merge type link with another link");const e=this.clone();return e.$_terms.whens||(e.$_terms.whens=[]),e.$_terms.whens.push({concat:A}),e.$_mutateRebuild()}},manifest:{build:(A,e)=>(r(e.link,"Invalid link description missing link"),A.ref(e.link))}}),a.generate=function(A,e,t,r){let i=t.mainstay.links.get(A);if(i)return i._generate(e,t,r).schema;const n=A.$_terms.link[0].ref,{perspective:o,path:s}=a.perspective(n,t);a.assert(o,"which is outside of schema boundaries",n,A,t,r);try{i=s.length?o.$_reach(s):o}catch(e){a.assert(!1,"to non-existing schema",n,A,t,r)}return a.assert("link"!==i.type,"which is another link",n,A,t,r),A._flags.relative||t.mainstay.links.set(A,i),i._generate(e,t,r).schema},a.perspective=function(A,e){if("local"===A.type){for(const{schema:t,key:r}of e.schemas){if((t._flags.id||r)===A.path[0])return{perspective:t,path:A.path.slice(1)};if(t.$_terms.shared)for(const e of t.$_terms.shared)if(e._flags.id===A.path[0])return{perspective:e,path:A.path.slice(1)}}return{perspective:null,path:null}}return"root"===A.ancestor?{perspective:e.schemas[e.schemas.length-1].schema,path:A.path}:{perspective:e.schemas[A.ancestor]&&e.schemas[A.ancestor].schema,path:A.path}},a.assert=function(A,e,t,i,n,o){A||r(!1,'"'.concat(s.label(i._flags,n,o),'" contains link reference "').concat(t.display,'" ').concat(e))}},3832:(A,e,t)=>{"use strict";const r=t(375),i=t(8068),n=t(8160),o={numberRx:/^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,precisionRx:/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/};A.exports=i.extend({type:"number",flags:{unsafe:{default:!1}},coerce:{from:"string",method(A,{schema:e,error:t}){const r=A.match(o.numberRx);if(!r)return;A=A.trim();const i={value:parseFloat(A)};if(0===i.value&&(i.value=0),!e._flags.unsafe)if(A.match(/e/i)){if(o.normalizeExponent("".concat(i.value/Math.pow(10,r[1]),"e").concat(r[1]))!==o.normalizeExponent(A))return i.errors=t("number.unsafe"),i}else{const e=i.value.toString();if(e.match(/e/i))return i;if(e!==o.normalizeDecimal(A))return i.errors=t("number.unsafe"),i}return i}},validate(A,{schema:e,error:t,prefs:r}){if(A===1/0||A===-1/0)return{value:A,errors:t("number.infinity")};if(!n.isNumber(A))return{value:A,errors:t("number.base")};const i={value:A};if(r.convert){const A=e.$_getRule("precision");if(A){const e=Math.pow(10,A.args.limit);i.value=Math.round(i.value*e)/e}}return 0===i.value&&(i.value=0),!e._flags.unsafe&&(A>Number.MAX_SAFE_INTEGER||A<Number.MIN_SAFE_INTEGER)&&(i.errors=t("number.unsafe")),i},rules:{compare:{method:!1,validate:(A,e,{limit:t},{name:r,operator:i,args:o})=>n.compare(A,t,i)?A:e.error("number."+r,{limit:o.limit,value:A}),args:[{name:"limit",ref:!0,assert:n.isNumber,message:"must be a number"}]},greater:{method(A){return this.$_addRule({name:"greater",method:"compare",args:{limit:A},operator:">"})}},integer:{method(){return this.$_addRule("integer")},validate:(A,e)=>Math.trunc(A)-A==0?A:e.error("number.integer")},less:{method(A){return this.$_addRule({name:"less",method:"compare",args:{limit:A},operator:"<"})}},max:{method(A){return this.$_addRule({name:"max",method:"compare",args:{limit:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"compare",args:{limit:A},operator:">="})}},multiple:{method(A){return this.$_addRule({name:"multiple",args:{base:A}})},validate:(A,e,{base:t},r)=>A*(1/t)%1==0?A:e.error("number.multiple",{multiple:r.args.base,value:A}),args:[{name:"base",ref:!0,assert:A=>"number"==typeof A&&isFinite(A)&&A>0,message:"must be a positive number"}],multi:!0},negative:{method(){return this.sign("negative")}},port:{method(){return this.$_addRule("port")},validate:(A,e)=>Number.isSafeInteger(A)&&A>=0&&A<=65535?A:e.error("number.port")},positive:{method(){return this.sign("positive")}},precision:{method(A){return r(Number.isSafeInteger(A),"limit must be an integer"),this.$_addRule({name:"precision",args:{limit:A}})},validate(A,e,{limit:t}){const r=A.toString().match(o.precisionRx);return Math.max((r[1]?r[1].length:0)-(r[2]?parseInt(r[2],10):0),0)<=t?A:e.error("number.precision",{limit:t,value:A})},convert:!0},sign:{method(A){return r(["negative","positive"].includes(A),"Invalid sign",A),this.$_addRule({name:"sign",args:{sign:A}})},validate:(A,e,{sign:t})=>"negative"===t&&A<0||"positive"===t&&A>0?A:e.error("number.".concat(t))},unsafe:{method(A=!0){return r("boolean"==typeof A,"enabled must be a boolean"),this.$_setFlag("unsafe",A)}}},cast:{string:{from:A=>"number"==typeof A,to:(A,e)=>A.toString()}},messages:{"number.base":"{{#label}} must be a number","number.greater":"{{#label}} must be greater than {{#limit}}","number.infinity":"{{#label}} cannot be infinity","number.integer":"{{#label}} must be an integer","number.less":"{{#label}} must be less than {{#limit}}","number.max":"{{#label}} must be less than or equal to {{#limit}}","number.min":"{{#label}} must be greater than or equal to {{#limit}}","number.multiple":"{{#label}} must be a multiple of {{#multiple}}","number.negative":"{{#label}} must be a negative number","number.port":"{{#label}} must be a valid port","number.positive":"{{#label}} must be a positive number","number.precision":"{{#label}} must have no more than {{#limit}} decimal places","number.unsafe":"{{#label}} must be a safe number"}}),o.normalizeExponent=function(A){return A.replace(/E/,"e").replace(/\.(\d*[1-9])?0+e/,".$1e").replace(/\.e/,"e").replace(/e\+/,"e").replace(/^\+/,"").replace(/^(-?)0+([1-9])/,"$1$2")},o.normalizeDecimal=function(A){return(A=A.replace(/^\+/,"").replace(/\.0*$/,"").replace(/^(-?)\.([^\.]*)$/,"$10.$2").replace(/^(-?)0+([0-9])/,"$1$2")).includes(".")&&A.endsWith("0")&&(A=A.replace(/0+$/,"")),"-0"===A?"0":A}},8966:(A,e,t)=>{"use strict";const r=t(7824);A.exports=r.extend({type:"object",cast:{map:{from:A=>A&&"object"==typeof A,to:(A,e)=>new Map(Object.entries(A))}}})},7417:(A,e,t)=>{"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(375),s=t(5380),a=t(1745),l=t(9959),c=t(6064),g=t(9926),u=t(5752),h=t(8068),E=t(8160),B={tlds:g instanceof Set&&{tlds:{allow:g,deny:null}},base64Regex:{true:{true:/^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,false:/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/},false:{true:/^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,false:/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/}},dataUriRegex:/^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,hexRegex:/^[a-f0-9]+$/i,ipRegex:l.regex({cidr:"forbidden"}).regex,isoDurationRegex:/^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,guidBrackets:{"{":"}","[":"]","(":")","":""},guidVersions:{uuidv1:"1",uuidv2:"2",uuidv3:"3",uuidv4:"4",uuidv5:"5"},guidSeparators:new Set([void 0,!0,!1,"-",":"]),normalizationForms:["NFC","NFD","NFKC","NFKD"]};A.exports=h.extend({type:"string",flags:{insensitive:{default:!1},truncate:{default:!1}},terms:{replacements:{init:null}},coerce:{from:"string",method(A,{schema:e,state:t,prefs:r}){const i=e.$_getRule("normalize");i&&(A=A.normalize(i.args.form));const n=e.$_getRule("case");n&&(A="upper"===n.args.direction?A.toLocaleUpperCase():A.toLocaleLowerCase());const o=e.$_getRule("trim");if(o&&o.args.enabled&&(A=A.trim()),e.$_terms.replacements)for(const t of e.$_terms.replacements)A=A.replace(t.pattern,t.replacement);const s=e.$_getRule("hex");if(s&&s.args.options.byteAligned&&A.length%2!=0&&(A="0".concat(A)),e.$_getRule("isoDate")){const e=B.isoDate(A);e&&(A=e)}if(e._flags.truncate){const i=e.$_getRule("max");if(i){let n=i.args.limit;if(E.isResolvable(n)&&(n=n.resolve(A,t,r),!E.limit(n)))return{value:A,errors:e.$_createError("any.ref",n,{ref:i.args.limit,arg:"limit",reason:"must be a positive integer"},t,r)};A=A.slice(0,n)}}return{value:A}}},validate(A,{schema:e,error:t}){if("string"!=typeof A)return{value:A,errors:t("string.base")};if(""===A){const r=e.$_getRule("min");if(r&&0===r.args.limit)return;return{value:A,errors:t("string.empty")}}},rules:{alphanum:{method(){return this.$_addRule("alphanum")},validate:(A,e)=>/^[a-zA-Z0-9]+$/.test(A)?A:e.error("string.alphanum")},base64:{method(A={}){return E.assertOptions(A,["paddingRequired","urlSafe"]),A=i({urlSafe:!1,paddingRequired:!0},A),o("boolean"==typeof A.paddingRequired,"paddingRequired must be boolean"),o("boolean"==typeof A.urlSafe,"urlSafe must be boolean"),this.$_addRule({name:"base64",args:{options:A}})},validate:(A,e,{options:t})=>B.base64Regex[t.paddingRequired][t.urlSafe].test(A)?A:e.error("string.base64")},case:{method(A){return o(["lower","upper"].includes(A),"Invalid case:",A),this.$_addRule({name:"case",args:{direction:A}})},validate:(A,e,{direction:t})=>"lower"===t&&A===A.toLocaleLowerCase()||"upper"===t&&A===A.toLocaleUpperCase()?A:e.error("string.".concat(t,"case")),convert:!0},creditCard:{method(){return this.$_addRule("creditCard")},validate(A,e){let t=A.length,r=0,i=1;for(;t--;){const e=A.charAt(t)*i;r+=e-9*(e>9),i^=3}return r>0&&r%10==0?A:e.error("string.creditCard")}},dataUri:{method(A={}){return E.assertOptions(A,["paddingRequired"]),A=i({paddingRequired:!0},A),o("boolean"==typeof A.paddingRequired,"paddingRequired must be boolean"),this.$_addRule({name:"dataUri",args:{options:A}})},validate(A,e,{options:t}){const r=A.match(B.dataUriRegex);if(r){if(!r[2])return A;if("base64"!==r[2])return A;if(B.base64Regex[t.paddingRequired].false.test(r[3]))return A}return e.error("string.dataUri")}},domain:{method(A){A&&E.assertOptions(A,["allowFullyQualified","allowUnicode","maxDomainSegments","minDomainSegments","tlds"]);const e=B.addressOptions(A);return this.$_addRule({name:"domain",args:{options:A},address:e})},validate:(A,e,t,{address:r})=>s.isValid(A,r)?A:e.error("string.domain")},email:{method(A={}){E.assertOptions(A,["allowFullyQualified","allowUnicode","ignoreLength","maxDomainSegments","minDomainSegments","multiple","separator","tlds"]),o(void 0===A.multiple||"boolean"==typeof A.multiple,"multiple option must be an boolean");const e=B.addressOptions(A),t=new RegExp("\\s*[".concat(A.separator?c(A.separator):",","]\\s*"));return this.$_addRule({name:"email",args:{options:A},regex:t,address:e})},validate(A,e,{options:t},{regex:r,address:i}){const n=t.multiple?A.split(r):[A],o=[];for(const A of n)a.isValid(A,i)||o.push(A);return o.length?e.error("string.email",{value:A,invalids:o}):A}},guid:{alias:"uuid",method(A={}){E.assertOptions(A,["version","separator"]);let e="";if(A.version){const t=[].concat(A.version);o(t.length>=1,"version must have at least 1 valid version specified");const r=new Set;for(let A=0;A<t.length;++A){const i=t[A];o("string"==typeof i,"version at position "+A+" must be a string");const n=B.guidVersions[i.toLowerCase()];o(n,"version at position "+A+" must be one of "+Object.keys(B.guidVersions).join(", ")),o(!r.has(n),"version at position "+A+" must not be a duplicate"),e+=n,r.add(n)}}o(B.guidSeparators.has(A.separator),'separator must be one of true, false, "-", or ":"');const t=void 0===A.separator?"[:-]?":!0===A.separator?"[:-]":!1===A.separator?"[]?":"\\".concat(A.separator),r=new RegExp("^([\\[{\\(]?)[0-9A-F]{8}(".concat(t,")[0-9A-F]{4}\\2?[").concat(e||"0-9A-F","][0-9A-F]{3}\\2?[").concat(e?"89AB":"0-9A-F","][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"),"i");return this.$_addRule({name:"guid",args:{options:A},regex:r})},validate(A,e,t,{regex:r}){const i=r.exec(A);return i?B.guidBrackets[i[1]]!==i[i.length-1]?e.error("string.guid"):A:e.error("string.guid")}},hex:{method(A={}){return E.assertOptions(A,["byteAligned"]),A=i({byteAligned:!1},A),o("boolean"==typeof A.byteAligned,"byteAligned must be boolean"),this.$_addRule({name:"hex",args:{options:A}})},validate:(A,e,{options:t})=>B.hexRegex.test(A)?t.byteAligned&&A.length%2!=0?e.error("string.hexAlign"):A:e.error("string.hex")},hostname:{method(){return this.$_addRule("hostname")},validate:(A,e)=>s.isValid(A,{minDomainSegments:1})||B.ipRegex.test(A)?A:e.error("string.hostname")},insensitive:{method(){return this.$_setFlag("insensitive",!0)}},ip:{method(A={}){E.assertOptions(A,["cidr","version"]);const{cidr:e,versions:t,regex:r}=l.regex(A),i=A.version?t:void 0;return this.$_addRule({name:"ip",args:{options:{cidr:e,version:i}},regex:r})},validate:(A,e,{options:t},{regex:r})=>r.test(A)?A:t.version?e.error("string.ipVersion",{value:A,cidr:t.cidr,version:t.version}):e.error("string.ip",{value:A,cidr:t.cidr})},isoDate:{method(){return this.$_addRule("isoDate")},validate:(A,{error:e})=>B.isoDate(A)?A:e("string.isoDate")},isoDuration:{method(){return this.$_addRule("isoDuration")},validate:(A,e)=>B.isoDurationRegex.test(A)?A:e.error("string.isoDuration")},length:{method(A,e){return B.length(this,"length",A,"=",e)},validate(A,e,{limit:t,encoding:r},{name:i,operator:n,args:o}){const s=!r&&A.length;return E.compare(s,t,n)?A:e.error("string."+i,{limit:o.limit,value:A,encoding:r})},args:[{name:"limit",ref:!0,assert:E.limit,message:"must be a positive integer"},"encoding"]},lowercase:{method(){return this.case("lower")}},max:{method(A,e){return B.length(this,"max",A,"<=",e)},args:["limit","encoding"]},min:{method(A,e){return B.length(this,"min",A,">=",e)},args:["limit","encoding"]},normalize:{method(A="NFC"){return o(B.normalizationForms.includes(A),"normalization form must be one of "+B.normalizationForms.join(", ")),this.$_addRule({name:"normalize",args:{form:A}})},validate:(A,{error:e},{form:t})=>A===A.normalize(t)?A:e("string.normalize",{value:A,form:t}),convert:!0},pattern:{alias:"regex",method(A,e={}){o(A instanceof RegExp,"regex must be a RegExp"),o(!A.flags.includes("g")&&!A.flags.includes("y"),"regex should not use global or sticky mode"),"string"==typeof e&&(e={name:e}),E.assertOptions(e,["invert","name"]);const t=["string.pattern",e.invert?".invert":"",e.name?".name":".base"].join("");return this.$_addRule({name:"pattern",args:{regex:A,options:e},errorCode:t})},validate:(A,e,{regex:t,options:r},{errorCode:i})=>t.test(A)^r.invert?A:e.error(i,{name:r.name,regex:t,value:A}),args:["regex","options"],multi:!0},replace:{method(A,e){"string"==typeof A&&(A=new RegExp(c(A),"g")),o(A instanceof RegExp,"pattern must be a RegExp"),o("string"==typeof e,"replacement must be a String");const t=this.clone();return t.$_terms.replacements||(t.$_terms.replacements=[]),t.$_terms.replacements.push({pattern:A,replacement:e}),t}},token:{method(){return this.$_addRule("token")},validate:(A,e)=>/^\w+$/.test(A)?A:e.error("string.token")},trim:{method(A=!0){return o("boolean"==typeof A,"enabled must be a boolean"),this.$_addRule({name:"trim",args:{enabled:A}})},validate:(A,e,{enabled:t})=>t&&A!==A.trim()?e.error("string.trim"):A,convert:!0},truncate:{method(A=!0){return o("boolean"==typeof A,"enabled must be a boolean"),this.$_setFlag("truncate",A)}},uppercase:{method(){return this.case("upper")}},uri:{method(A={}){E.assertOptions(A,["allowRelative","allowQuerySquareBrackets","domain","relativeOnly","scheme"]),A.domain&&E.assertOptions(A.domain,["allowFullyQualified","allowUnicode","maxDomainSegments","minDomainSegments","tlds"]);const{regex:e,scheme:t}=u.regex(A),r=A.domain?B.addressOptions(A.domain):null;return this.$_addRule({name:"uri",args:{options:A},regex:e,domain:r,scheme:t})},validate(A,e,{options:t},{regex:r,domain:i,scheme:n}){if(["http:/","https:/"].includes(A))return e.error("string.uri");const o=r.exec(A);if(o){const r=o[1]||o[2];return!i||t.allowRelative&&!r||s.isValid(r,i)?A:e.error("string.domain",{value:r})}return t.relativeOnly?e.error("string.uriRelativeOnly"):t.scheme?e.error("string.uriCustomScheme",{scheme:n,value:A}):e.error("string.uri")}}},manifest:{build(A,e){if(e.replacements)for(const{pattern:t,replacement:r}of e.replacements)A=A.replace(t,r);return A}},messages:{"string.alphanum":"{{#label}} must only contain alpha-numeric characters","string.base":"{{#label}} must be a string","string.base64":"{{#label}} must be a valid base64 string","string.creditCard":"{{#label}} must be a credit card","string.dataUri":"{{#label}} must be a valid dataUri string","string.domain":"{{#label}} must contain a valid domain name","string.email":"{{#label}} must be a valid email","string.empty":"{{#label}} is not allowed to be empty","string.guid":"{{#label}} must be a valid GUID","string.hex":"{{#label}} must only contain hexadecimal characters","string.hexAlign":"{{#label}} hex decoded representation must be byte aligned","string.hostname":"{{#label}} must be a valid hostname","string.ip":"{{#label}} must be a valid ip address with a {{#cidr}} CIDR","string.ipVersion":"{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR","string.isoDate":"{{#label}} must be in iso format","string.isoDuration":"{{#label}} must be a valid ISO 8601 duration","string.length":"{{#label}} length must be {{#limit}} characters long","string.lowercase":"{{#label}} must only contain lowercase characters","string.max":"{{#label}} length must be less than or equal to {{#limit}} characters long","string.min":"{{#label}} length must be at least {{#limit}} characters long","string.normalize":"{{#label}} must be unicode normalized in the {{#form}} form","string.token":"{{#label}} must only contain alpha-numeric and underscore characters","string.pattern.base":"{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}","string.pattern.name":"{{#label}} with value {:[.]} fails to match the {{#name}} pattern","string.pattern.invert.base":"{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}","string.pattern.invert.name":"{{#label}} with value {:[.]} matches the inverted {{#name}} pattern","string.trim":"{{#label}} must not have leading or trailing whitespace","string.uri":"{{#label}} must be a valid uri","string.uriCustomScheme":"{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern","string.uriRelativeOnly":"{{#label}} must be a valid relative uri","string.uppercase":"{{#label}} must only contain uppercase characters"}}),B.addressOptions=function(A){if(!A)return A;if(o(void 0===A.minDomainSegments||Number.isSafeInteger(A.minDomainSegments)&&A.minDomainSegments>0,"minDomainSegments must be a positive integer"),o(void 0===A.maxDomainSegments||Number.isSafeInteger(A.maxDomainSegments)&&A.maxDomainSegments>0,"maxDomainSegments must be a positive integer"),!1===A.tlds)return A;if(!0===A.tlds||void 0===A.tlds)return o(B.tlds,"Built-in TLD list disabled"),Object.assign({},A,B.tlds);o("object"==typeof A.tlds,"tlds must be true, false, or an object");const e=A.tlds.deny;if(e)return Array.isArray(e)&&(A=Object.assign({},A,{tlds:{deny:new Set(e)}})),o(A.tlds.deny instanceof Set,"tlds.deny must be an array, Set, or boolean"),o(!A.tlds.allow,"Cannot specify both tlds.allow and tlds.deny lists"),B.validateTlds(A.tlds.deny,"tlds.deny"),A;const t=A.tlds.allow;return t?!0===t?(o(B.tlds,"Built-in TLD list disabled"),Object.assign({},A,B.tlds)):(Array.isArray(t)&&(A=Object.assign({},A,{tlds:{allow:new Set(t)}})),o(A.tlds.allow instanceof Set,"tlds.allow must be an array, Set, or boolean"),B.validateTlds(A.tlds.allow,"tlds.allow"),A):A},B.validateTlds=function(A,e){for(const t of A)o(s.isValid(t,{minDomainSegments:1,maxDomainSegments:1}),"".concat(e," must contain valid top level domain names"))},B.isoDate=function(A){if(!E.isIsoDate(A))return null;/.*T.*[+-]\d\d$/.test(A)&&(A+="00");const e=new Date(A);return isNaN(e.getTime())?null:e.toISOString()},B.length=function(A,e,t,r,i){return o(!i||!1,"Invalid encoding:",i),A.$_addRule({name:e,method:"length",args:{limit:t,encoding:i},operator:r})}},8826:(A,e,t)=>{"use strict";const r=t(375),i=t(8068),n={};n.Map=class extends Map{slice(){return new n.Map(this)}},A.exports=i.extend({type:"symbol",terms:{map:{init:new n.Map}},coerce:{method(A,{schema:e,error:t}){const r=e.$_terms.map.get(A);return r&&(A=r),e._flags.only&&"symbol"!=typeof A?{value:A,errors:t("symbol.map",{map:e.$_terms.map})}:{value:A}}},validate(A,{error:e}){if("symbol"!=typeof A)return{value:A,errors:e("symbol.base")}},rules:{map:{method(A){A&&!A[Symbol.iterator]&&"object"==typeof A&&(A=Object.entries(A)),r(A&&A[Symbol.iterator],"Iterable must be an iterable or object");const e=this.clone(),t=[];for(const i of A){r(i&&i[Symbol.iterator],"Entry must be an iterable");const[A,n]=i;r("object"!=typeof A&&"function"!=typeof A&&"symbol"!=typeof A,"Key must not be of type object, function, or Symbol"),r("symbol"==typeof n,"Value must be a Symbol"),e.$_terms.map.set(A,n),t.push(n)}return e.valid(...t)}}},manifest:{build:(A,e)=>(e.map&&(A=A.map(e.map)),A)},messages:{"symbol.base":"{{#label}} must be a symbol","symbol.map":"{{#label}} must be one of {{#map}}"}})},8863:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(738),o=t(9621),s=t(8160),a=t(6354),l=t(493),c={result:Symbol("result")};e.entry=function(A,e,t){let i=s.defaults;t&&(r(void 0===t.warnings,"Cannot override warnings preference in synchronous validation"),r(void 0===t.artifacts,"Cannot override artifacts preference in synchronous validation"),i=s.preferences(s.defaults,t));const n=c.entry(A,e,i);r(!n.mainstay.externals.length,"Schema with external rules must use validateAsync()");const o={value:n.value};return n.error&&(o.error=n.error),n.mainstay.warnings.length&&(o.warning=a.details(n.mainstay.warnings)),n.mainstay.debug&&(o.debug=n.mainstay.debug),n.mainstay.artifacts&&(o.artifacts=n.mainstay.artifacts),o},e.entryAsync=async function(A,e,t){let r=s.defaults;t&&(r=s.preferences(s.defaults,t));const i=c.entry(A,e,r),n=i.mainstay;if(i.error)throw n.debug&&(i.error.debug=n.debug),i.error;if(n.externals.length){let e=i.value;for(const{method:i,path:s,label:a}of n.externals){let n,l,c=e;s.length&&(n=s[s.length-1],l=o(e,s.slice(0,-1)),c=l[n]);try{const A=await i(c,{prefs:t});if(void 0===A||A===c)continue;l?l[n]=A:e=A}catch(A){throw r.errors.label&&(A.message+=" (".concat(a,")")),A}}i.value=e}if(!r.warnings&&!r.debug&&!r.artifacts)return i.value;const l={value:i.value};return n.warnings.length&&(l.warning=a.details(n.warnings)),n.debug&&(l.debug=n.debug),n.artifacts&&(l.artifacts=n.artifacts),l},c.entry=function(A,t,r){const{tracer:i,cleanup:n}=c.tracer(t,r),o={externals:[],warnings:[],tracer:i,debug:r.debug?[]:null,links:t._ids._schemaChain?new Map:null},s=t._ids._schemaChain?[{schema:t}]:null,g=new l([],[],{mainstay:o,schemas:s}),u=e.validate(A,t,g,r);n&&t.$_root.untrace();const h=a.process(u.errors,A,r);return{value:u.value,error:h,mainstay:o}},c.tracer=function(A,e){return A.$_root._tracer?{tracer:A.$_root._tracer._register(A)}:e.debug?(r(A.$_root.trace,"Debug mode not supported"),{tracer:A.$_root.trace()._register(A),cleanup:!0}):{tracer:c.ignore}},e.validate=function(A,e,t,r,i={}){if(e.$_terms.whens&&(e=e._generate(A,t,r).schema),e._preferences&&(r=c.prefs(e,r)),e._cache&&r.cache){const r=e._cache.get(A);if(t.mainstay.tracer.debug(t,"validate","cached",!!r),r)return r}const n=(i,n,o)=>e.$_createError(i,A,n,o||t,r),o={original:A,prefs:r,schema:e,state:t,error:n,errorsArray:c.errorsArray,warn:(A,e,r)=>t.mainstay.warnings.push(n(A,e,r)),message:(i,n)=>e.$_createError("custom",A,n,t,r,{messages:i})};t.mainstay.tracer.entry(e,t);const a=e._definition;if(a.prepare&&void 0!==A&&r.convert){const e=a.prepare(A,o);if(e){if(t.mainstay.tracer.value(t,"prepare",A,e.value),e.errors)return c.finalize(e.value,[].concat(e.errors),o);A=e.value}}if(a.coerce&&void 0!==A&&r.convert&&(!a.coerce.from||a.coerce.from.includes(typeof A))){const e=a.coerce.method(A,o);if(e){if(t.mainstay.tracer.value(t,"coerced",A,e.value),e.errors)return c.finalize(e.value,[].concat(e.errors),o);A=e.value}}const l=e._flags.empty;l&&l.$_match(c.trim(A,e),t.nest(l),s.defaults)&&(t.mainstay.tracer.value(t,"empty",A,void 0),A=void 0);const g=i.presence||e._flags.presence||(e._flags._endedSwitch?null:r.presence);if(void 0===A){if("forbidden"===g)return c.finalize(A,null,o);if("required"===g)return c.finalize(A,[e.$_createError("any.required",A,null,t,r)],o);if("optional"===g){if(e._flags.default!==s.symbols.deepDefault)return c.finalize(A,null,o);t.mainstay.tracer.value(t,"default",A,{}),A={}}}else if("forbidden"===g)return c.finalize(A,[e.$_createError("any.unknown",A,null,t,r)],o);const u=[];if(e._valids){const i=e._valids.get(A,t,r,e._flags.insensitive);if(i)return r.convert&&(t.mainstay.tracer.value(t,"valids",A,i.value),A=i.value),t.mainstay.tracer.filter(e,t,"valid",i),c.finalize(A,null,o);if(e._flags.only){const i=e.$_createError("any.only",A,{valids:e._valids.values({display:!0})},t,r);if(r.abortEarly)return c.finalize(A,[i],o);u.push(i)}}if(e._invalids){const i=e._invalids.get(A,t,r,e._flags.insensitive);if(i){t.mainstay.tracer.filter(e,t,"invalid",i);const n=e.$_createError("any.invalid",A,{invalids:e._invalids.values({display:!0})},t,r);if(r.abortEarly)return c.finalize(A,[n],o);u.push(n)}}if(a.validate){const e=a.validate(A,o);if(e&&(t.mainstay.tracer.value(t,"base",A,e.value),A=e.value,e.errors)){if(!Array.isArray(e.errors))return u.push(e.errors),c.finalize(A,u,o);if(e.errors.length)return u.push(...e.errors),c.finalize(A,u,o)}}return e._rules.length?c.rules(A,u,o):c.finalize(A,u,o)},c.rules=function(A,e,t){const{schema:r,state:i,prefs:n}=t;for(const o of r._rules){const a=r._definition.rules[o.method];if(a.convert&&n.convert){i.mainstay.tracer.log(r,i,"rule",o.name,"full");continue}let l,g=o.args;if(o._resolve.length){g=Object.assign({},g);for(const e of o._resolve){const t=a.argsByName.get(e),o=g[e].resolve(A,i,n),c=t.normalize?t.normalize(o):o,u=s.validateArg(c,null,t);if(u){l=r.$_createError("any.ref",o,{arg:e,ref:g[e],reason:u},i,n);break}g[e]=c}}l=l||a.validate(A,t,g,o);const u=c.rule(l,o);if(u.errors){if(i.mainstay.tracer.log(r,i,"rule",o.name,"error"),o.warn){i.mainstay.warnings.push(...u.errors);continue}if(n.abortEarly)return c.finalize(A,u.errors,t);e.push(...u.errors)}else i.mainstay.tracer.log(r,i,"rule",o.name,"pass"),i.mainstay.tracer.value(i,"rule",A,u.value,o.name),A=u.value}return c.finalize(A,e,t)},c.rule=function(A,e){return A instanceof a.Report?(c.error(A,e),{errors:[A],value:null}):Array.isArray(A)&&A[s.symbols.errors]?(A.forEach((A=>c.error(A,e))),{errors:A,value:null}):{errors:null,value:A}},c.error=function(A,e){return e.message&&A._setTemplate(e.message),A},c.finalize=function(A,e,t){e=e||[];const{schema:i,state:n,prefs:o}=t;if(e.length){const r=c.default("failover",void 0,e,t);void 0!==r&&(n.mainstay.tracer.value(n,"failover",A,r),A=r,e=[])}if(e.length&&i._flags.error)if("function"==typeof i._flags.error){e=i._flags.error(e),Array.isArray(e)||(e=[e]);for(const A of e)r(A instanceof Error||A instanceof a.Report,"error() must return an Error object")}else e=[i._flags.error];if(void 0===A){const r=c.default("default",A,e,t);n.mainstay.tracer.value(n,"default",A,r),A=r}if(i._flags.cast&&void 0!==A){const e=i._definition.cast[i._flags.cast];if(e.from(A)){const r=e.to(A,t);n.mainstay.tracer.value(n,"cast",A,r,i._flags.cast),A=r}}if(i.$_terms.externals&&o.externals&&!1!==o._externals)for(const{method:A}of i.$_terms.externals)n.mainstay.externals.push({method:A,path:n.path,label:a.label(i._flags,n,o)});const s={value:A,errors:e.length?e:null};return i._flags.result&&(s.value="strip"===i._flags.result?void 0:t.original,n.mainstay.tracer.value(n,i._flags.result,A,s.value),n.shadow(A,i._flags.result)),i._cache&&!1!==o.cache&&!i._refs.length&&i._cache.set(t.original,s),void 0===A||s.errors||void 0===i._flags.artifact||(n.mainstay.artifacts=n.mainstay.artifacts||new Map,n.mainstay.artifacts.has(i._flags.artifact)||n.mainstay.artifacts.set(i._flags.artifact,[]),n.mainstay.artifacts.get(i._flags.artifact).push(n.path)),s},c.prefs=function(A,e){const t=e===s.defaults;return t&&A._preferences[s.symbols.prefs]?A._preferences[s.symbols.prefs]:(e=s.preferences(e,A._preferences),t&&(A._preferences[s.symbols.prefs]=e),e)},c.default=function(A,e,t,r){const{schema:n,state:o,prefs:a}=r,l=n._flags[A];if(a.noDefaults||void 0===l)return e;if(o.mainstay.tracer.log(n,o,"rule",A,"full"),!l)return l;if("function"==typeof l){const s=l.length?[i(o.ancestors[0]),r]:[];try{return l(...s)}catch(e){return void t.push(n.$_createError("any.".concat(A),null,{error:e},o,a))}}return"object"!=typeof l?l:l[s.symbols.literal]?l.literal:s.isResolvable(l)?l.resolve(e,o,a):i(l)},c.trim=function(A,e){if("string"!=typeof A)return A;const t=e.$_getRule("trim");return t&&t.args.enabled?A.trim():A},c.ignore={active:!1,debug:n,entry:n,filter:n,log:n,resolve:n,value:n},c.errorsArray=function(){const A=[];return A[s.symbols.errors]=!0,A}},2036:(A,e,t)=>{"use strict";const r=t(375),i=t(9474),n=t(8160),o={};A.exports=o.Values=class{constructor(A,e){this._values=new Set(A),this._refs=new Set(e),this._lowercase=o.lowercases(A),this._override=!1}get length(){return this._values.size+this._refs.size}add(A,e){n.isResolvable(A)?this._refs.has(A)||(this._refs.add(A),e&&e.register(A)):this.has(A,null,null,!1)||(this._values.add(A),"string"==typeof A&&this._lowercase.set(A.toLowerCase(),A))}static merge(A,e,t){if(A=A||new o.Values,e){if(e._override)return e.clone();for(const t of[...e._values,...e._refs])A.add(t)}if(t)for(const e of[...t._values,...t._refs])A.remove(e);return A.length?A:null}remove(A){n.isResolvable(A)?this._refs.delete(A):(this._values.delete(A),"string"==typeof A&&this._lowercase.delete(A.toLowerCase()))}has(A,e,t,r){return!!this.get(A,e,t,r)}get(A,e,t,r){if(!this.length)return!1;if(this._values.has(A))return{value:A};if("string"==typeof A&&A&&r){const e=this._lowercase.get(A.toLowerCase());if(e)return{value:e}}if(!this._refs.size&&"object"!=typeof A)return!1;if("object"==typeof A)for(const e of this._values)if(i(e,A))return{value:e};if(e)for(const n of this._refs){const o=n.resolve(A,e,t,null,{in:!0});if(void 0===o)continue;const s=n.in&&"object"==typeof o?Array.isArray(o)?o:Object.keys(o):[o];for(const e of s)if(typeof e==typeof A)if(r&&A&&"string"==typeof A){if(e.toLowerCase()===A.toLowerCase())return{value:e,ref:n}}else if(i(e,A))return{value:e,ref:n}}return!1}override(){this._override=!0}values(A){if(A&&A.display){const A=[];for(const e of[...this._values,...this._refs])void 0!==e&&A.push(e);return A}return Array.from([...this._values,...this._refs])}clone(){const A=new o.Values(this._values,this._refs);return A._override=this._override,A}concat(A){r(!A._override,"Cannot concat override set of values");const e=new o.Values([...this._values,...A._values],[...this._refs,...A._refs]);return e._override=this._override,e}describe(){const A=[];this._override&&A.push({override:!0});for(const e of this._values.values())A.push(e&&"object"==typeof e?{value:e}:e);for(const e of this._refs.values())A.push(e.describe());return A}},o.Values.prototype[n.symbols.values]=!0,o.Values.prototype.slice=o.Values.prototype.clone,o.lowercases=function(A){const e=new Map;if(A)for(const t of A)"string"==typeof t&&e.set(t.toLowerCase(),t);return e}},978:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(1687),o=t(9621),s={};A.exports=function(A,e,t={}){if(r(A&&"object"==typeof A,"Invalid defaults value: must be an object"),r(!e||!0===e||"object"==typeof e,"Invalid source value: must be true, falsy or an object"),r("object"==typeof t,"Invalid options: must be an object"),!e)return null;if(t.shallow)return s.applyToDefaultsWithShallow(A,e,t);const o=i(A);if(!0===e)return o;const a=void 0!==t.nullOverride&&t.nullOverride;return n(o,e,{nullOverride:a,mergeArrays:!1})},s.applyToDefaultsWithShallow=function(A,e,t){const a=t.shallow;r(Array.isArray(a),"Invalid keys");const l=new Map,c=!0===e?null:new Set;for(let t of a){t=Array.isArray(t)?t:t.split(".");const r=o(A,t);r&&"object"==typeof r?l.set(r,c&&o(e,t)||r):c&&c.add(t)}const g=i(A,{},l);if(!c)return g;for(const A of c)s.reachCopy(g,e,A);const u=void 0!==t.nullOverride&&t.nullOverride;return n(g,e,{nullOverride:u,mergeArrays:!1})},s.reachCopy=function(A,e,t){for(const A of t){if(!(A in e))return;const t=e[A];if("object"!=typeof t||null===t)return;e=t}const r=e;let i=A;for(let A=0;A<t.length-1;++A){const e=t[A];"object"!=typeof i[e]&&(i[e]={}),i=i[e]}i[t[t.length-1]]=r}},375:(A,e,t)=>{"use strict";const r=t(7916);A.exports=function(A,...e){if(!A){if(1===e.length&&e[0]instanceof Error)throw e[0];throw new r(e)}}},8571:(A,e,t)=>{"use strict";const r=t(9621),i=t(4277),n=t(7043),o={needsProtoHack:new Set([i.set,i.map,i.weakSet,i.weakMap])};A.exports=o.clone=function(A,e={},t=null){if("object"!=typeof A||null===A)return A;let r=o.clone,s=t;if(e.shallow){if(!0!==e.shallow)return o.cloneWithShallow(A,e);r=A=>A}else if(s){const e=s.get(A);if(e)return e}else s=new Map;const a=i.getInternalProto(A);if(a===i.buffer)return!1;if(a===i.date)return new Date(A.getTime());if(a===i.regex)return new RegExp(A);const l=o.base(A,a,e);if(l===A)return A;if(s&&s.set(A,l),a===i.set)for(const t of A)l.add(r(t,e,s));else if(a===i.map)for(const[t,i]of A)l.set(t,r(i,e,s));const c=n.keys(A,e);for(const t of c){if("__proto__"===t)continue;if(a===i.array&&"length"===t){l.length=A.length;continue}const n=Object.getOwnPropertyDescriptor(A,t);n?n.get||n.set?Object.defineProperty(l,t,n):n.enumerable?l[t]=r(A[t],e,s):Object.defineProperty(l,t,{enumerable:!1,writable:!0,configurable:!0,value:r(A[t],e,s)}):Object.defineProperty(l,t,{enumerable:!0,writable:!0,configurable:!0,value:r(A[t],e,s)})}return l},o.cloneWithShallow=function(A,e){const t=e.shallow;(e=Object.assign({},e)).shallow=!1;const i=new Map;for(const e of t){const t=r(A,e);"object"!=typeof t&&"function"!=typeof t||i.set(t,t)}return o.clone(A,e,i)},o.base=function(A,e,t){if(!1===t.prototype)return o.needsProtoHack.has(e)?new e.constructor:e===i.array?[]:{};const r=Object.getPrototypeOf(A);if(r&&r.isImmutable)return A;if(e===i.array){const A=[];return r!==e&&Object.setPrototypeOf(A,r),A}if(o.needsProtoHack.has(e)){const A=new r.constructor;return r!==e&&Object.setPrototypeOf(A,r),A}return Object.create(r)}},9474:(A,e,t)=>{"use strict";const r=t(4277),i={mismatched:null};A.exports=function(A,e,t){return t=Object.assign({prototype:!0},t),!!i.isDeepEqual(A,e,t,[])},i.isDeepEqual=function(A,e,t,n){if(A===e)return 0!==A||1/A==1/e;const o=typeof A;if(o!==typeof e)return!1;if(null===A||null===e)return!1;if("function"===o){if(!t.deepFunction||A.toString()!==e.toString())return!1}else if("object"!==o)return A!=A&&e!=e;const s=i.getSharedType(A,e,!!t.prototype);switch(s){case r.buffer:return!1;case r.promise:return A===e;case r.regex:return A.toString()===e.toString();case i.mismatched:return!1}for(let t=n.length-1;t>=0;--t)if(n[t].isSame(A,e))return!0;n.push(new i.SeenEntry(A,e));try{return!!i.isDeepEqualObj(s,A,e,t,n)}finally{n.pop()}},i.getSharedType=function(A,e,t){if(t)return Object.getPrototypeOf(A)!==Object.getPrototypeOf(e)?i.mismatched:r.getInternalProto(A);const n=r.getInternalProto(A);return n!==r.getInternalProto(e)?i.mismatched:n},i.valueOf=function(A){const e=A.valueOf;if(void 0===e)return A;try{return e.call(A)}catch(A){return A}},i.hasOwnEnumerableProperty=function(A,e){return Object.prototype.propertyIsEnumerable.call(A,e)},i.isSetSimpleEqual=function(A,e){for(const t of Set.prototype.values.call(A))if(!Set.prototype.has.call(e,t))return!1;return!0},i.isDeepEqualObj=function(A,e,t,n,o){const{isDeepEqual:s,valueOf:a,hasOwnEnumerableProperty:l}=i,{keys:c,getOwnPropertySymbols:g}=Object;if(A===r.array){if(!n.part){if(e.length!==t.length)return!1;for(let A=0;A<e.length;++A)if(!s(e[A],t[A],n,o))return!1;return!0}for(const A of e)for(const e of t)if(s(A,e,n,o))return!0}else if(A===r.set){if(e.size!==t.size)return!1;if(!i.isSetSimpleEqual(e,t)){const A=new Set(Set.prototype.values.call(t));for(const t of Set.prototype.values.call(e)){if(A.delete(t))continue;let e=!1;for(const r of A)if(s(t,r,n,o)){A.delete(r),e=!0;break}if(!e)return!1}}}else if(A===r.map){if(e.size!==t.size)return!1;for(const[A,r]of Map.prototype.entries.call(e)){if(void 0===r&&!Map.prototype.has.call(t,A))return!1;if(!s(r,Map.prototype.get.call(t,A),n,o))return!1}}else if(A===r.error&&(e.name!==t.name||e.message!==t.message))return!1;const u=a(e),h=a(t);if((e!==u||t!==h)&&!s(u,h,n,o))return!1;const E=c(e);if(!n.part&&E.length!==c(t).length&&!n.skip)return!1;let B=0;for(const A of E)if(n.skip&&n.skip.includes(A))void 0===t[A]&&++B;else{if(!l(t,A))return!1;if(!s(e[A],t[A],n,o))return!1}if(!n.part&&E.length-B!==c(t).length)return!1;if(!1!==n.symbols){const A=g(e),r=new Set(g(t));for(const i of A){if(!n.skip||!n.skip.includes(i))if(l(e,i)){if(!l(t,i))return!1;if(!s(e[i],t[i],n,o))return!1}else if(l(t,i))return!1;r.delete(i)}for(const A of r)if(l(t,A))return!1}return!0},i.SeenEntry=class{constructor(A,e){this.obj=A,this.ref=e}isSame(A,e){return this.obj===A&&this.ref===e}}},7916:(A,e,t)=>{"use strict";const r=t(8761);A.exports=class extends Error{constructor(A){super(A.filter((A=>""!==A)).map((A=>"string"==typeof A?A:A instanceof Error?A.message:r(A))).join(" ")||"Unknown error"),"function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,e.assert)}}},5277:A=>{"use strict";const e={};A.exports=function(A){if(!A)return"";let t="";for(let r=0;r<A.length;++r){const i=A.charCodeAt(r);e.isSafe(i)?t+=A[r]:t+=e.escapeHtmlChar(i)}return t},e.escapeHtmlChar=function(A){const t=e.namedHtml[A];if(void 0!==t)return t;if(A>=256)return"&#"+A+";";const r=A.toString(16).padStart(2,"0");return"&#x".concat(r,";")},e.isSafe=function(A){return void 0!==e.safeCharCodes[A]},e.namedHtml={38:"&amp;",60:"&lt;",62:"&gt;",34:"&quot;",160:"&nbsp;",162:"&cent;",163:"&pound;",164:"&curren;",169:"&copy;",174:"&reg;"},e.safeCharCodes=function(){const A={};for(let e=32;e<123;++e)(e>=97||e>=65&&e<=90||e>=48&&e<=57||32===e||46===e||44===e||45===e||58===e||95===e)&&(A[e]=null);return A}()},6064:A=>{"use strict";A.exports=function(A){return A.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g,"\\$&")}},738:A=>{"use strict";A.exports=function(){}},1687:(A,e,t)=>{"use strict";const r=t(375),i=t(8571),n=t(7043),o={};A.exports=o.merge=function(A,e,t){if(r(A&&"object"==typeof A,"Invalid target value: must be an object"),r(null==e||"object"==typeof e,"Invalid source value: must be null, undefined, or an object"),!e)return A;if(t=Object.assign({nullOverride:!0,mergeArrays:!0},t),Array.isArray(e)){r(Array.isArray(A),"Cannot merge array onto an object"),t.mergeArrays||(A.length=0);for(let r=0;r<e.length;++r)A.push(i(e[r],{symbols:t.symbols}));return A}const s=n.keys(e,t);for(let r=0;r<s.length;++r){const n=s[r];if("__proto__"===n||!Object.prototype.propertyIsEnumerable.call(e,n))continue;const a=e[n];if(a&&"object"==typeof a){if(A[n]===a)continue;!A[n]||"object"!=typeof A[n]||Array.isArray(A[n])!==Array.isArray(a)||a instanceof Date||a instanceof RegExp?A[n]=i(a,{symbols:t.symbols}):o.merge(A[n],a,t)}else(null!=a||t.nullOverride)&&(A[n]=a)}return A}},9621:(A,e,t)=>{"use strict";const r=t(375),i={};A.exports=function(A,e,t){if(!1===e||null==e)return A;"string"==typeof(t=t||{})&&(t={separator:t});const n=Array.isArray(e);r(!n||!t.separator,"Separator option no valid for array-based chain");const o=n?e:e.split(t.separator||".");let s=A;for(let A=0;A<o.length;++A){let n=o[A];const a=t.iterables&&i.iterables(s);if(Array.isArray(s)||"set"===a){const A=Number(n);Number.isInteger(A)&&(n=A<0?s.length+A:A)}if(!s||"function"==typeof s&&!1===t.functions||!a&&void 0===s[n]){r(!t.strict||A+1===o.length,"Missing segment",n,"in reach path ",e),r("object"==typeof s||!0===t.functions||"function"!=typeof s,"Invalid segment",n,"in reach path ",e),s=t.default;break}s=a?"set"===a?[...s][n]:s.get(n):s[n]}return s},i.iterables=function(A){return A instanceof Set?"set":A instanceof Map?"map":void 0}},8761:A=>{"use strict";A.exports=function(...A){try{return JSON.stringify.apply(null,A)}catch(A){return"[Cannot display object: "+A.message+"]"}}},4277:(A,e)=>{"use strict";const t={};e=A.exports={array:Array.prototype,buffer:!1,date:Date.prototype,error:Error.prototype,generic:Object.prototype,map:Map.prototype,promise:Promise.prototype,regex:RegExp.prototype,set:Set.prototype,weakMap:WeakMap.prototype,weakSet:WeakSet.prototype},t.typeMap=new Map([["[object Error]",e.error],["[object Map]",e.map],["[object Promise]",e.promise],["[object Set]",e.set],["[object WeakMap]",e.weakMap],["[object WeakSet]",e.weakSet]]),e.getInternalProto=function(A){if(Array.isArray(A))return e.array;if(A instanceof Date)return e.date;if(A instanceof RegExp)return e.regex;if(A instanceof Error)return e.error;const r=Object.prototype.toString.call(A);return t.typeMap.get(r)||e.generic}},7043:(A,e)=>{"use strict";e.keys=function(A,e={}){return!1!==e.symbols?Reflect.ownKeys(A):Object.getOwnPropertyNames(A)}},3652:(A,e,t)=>{"use strict";const r=t(375),i={};e.Sorter=class{constructor(){this._items=[],this.nodes=[]}add(A,e){const t=[].concat((e=e||{}).before||[]),i=[].concat(e.after||[]),n=e.group||"?",o=e.sort||0;r(!t.includes(n),"Item cannot come before itself: ".concat(n)),r(!t.includes("?"),"Item cannot come before unassociated items"),r(!i.includes(n),"Item cannot come after itself: ".concat(n)),r(!i.includes("?"),"Item cannot come after unassociated items"),Array.isArray(A)||(A=[A]);for(const e of A){const A={seq:this._items.length,sort:o,before:t,after:i,group:n,node:e};this._items.push(A)}if(!e.manual){const A=this._sort();r(A,"item","?"!==n?"added into group ".concat(n):"","created a dependencies error")}return this.nodes}merge(A){Array.isArray(A)||(A=[A]);for(const e of A)if(e)for(const A of e._items)this._items.push(Object.assign({},A));this._items.sort(i.mergeSort);for(let A=0;A<this._items.length;++A)this._items[A].seq=A;const e=this._sort();return r(e,"merge created a dependencies error"),this.nodes}sort(){const A=this._sort();return r(A,"sort created a dependencies error"),this.nodes}_sort(){const A={},e=Object.create(null),t=Object.create(null);for(const r of this._items){const i=r.seq,n=r.group;t[n]=t[n]||[],t[n].push(i),A[i]=r.before;for(const A of r.after)e[A]=e[A]||[],e[A].push(i)}for(const e in A){const r=[];for(const i in A[e]){const n=A[e][i];t[n]=t[n]||[],r.push(...t[n])}A[e]=r}for(const r in e)if(t[r])for(const i of t[r])A[i].push(...e[r]);const r={};for(const e in A){const t=A[e];for(const A of t)r[A]=r[A]||[],r[A].push(e)}const i={},n=[];for(let A=0;A<this._items.length;++A){let e=A;if(r[A]){e=null;for(let A=0;A<this._items.length;++A){if(!0===i[A])continue;r[A]||(r[A]=[]);const t=r[A].length;let n=0;for(let e=0;e<t;++e)i[r[A][e]]&&++n;if(n===t){e=A;break}}}null!==e&&(i[e]=!0,n.push(e))}if(n.length!==this._items.length)return!1;const o={};for(const A of this._items)o[A.seq]=A;this._items=[],this.nodes=[];for(const A of n){const e=o[A];this.nodes.push(e.node),this._items.push(e)}return!0}},i.mergeSort=(A,e)=>A.sort===e.sort?0:A.sort<e.sort?-1:1},5380:(A,e,t)=>{"use strict";const r=t(443),i=t(2178),n={minDomainSegments:2,nonAsciiRx:/[^\x00-\x7f]/,domainControlRx:/[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/,tldSegmentRx:/^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,domainSegmentRx:/^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,URL:r.URL||URL};e.analyze=function(A,e={}){if(!A)return i.code("DOMAIN_NON_EMPTY_STRING");if("string"!=typeof A)throw new Error("Invalid input: domain must be a string");if(A.length>256)return i.code("DOMAIN_TOO_LONG");if(n.nonAsciiRx.test(A)){if(!1===e.allowUnicode)return i.code("DOMAIN_INVALID_UNICODE_CHARS");A=A.normalize("NFC")}if(n.domainControlRx.test(A))return i.code("DOMAIN_INVALID_CHARS");A=n.punycode(A),e.allowFullyQualified&&"."===A[A.length-1]&&(A=A.slice(0,-1));const t=e.minDomainSegments||n.minDomainSegments,r=A.split(".");if(r.length<t)return i.code("DOMAIN_SEGMENTS_COUNT");if(e.maxDomainSegments&&r.length>e.maxDomainSegments)return i.code("DOMAIN_SEGMENTS_COUNT_MAX");const o=e.tlds;if(o){const A=r[r.length-1].toLowerCase();if(o.deny&&o.deny.has(A)||o.allow&&!o.allow.has(A))return i.code("DOMAIN_FORBIDDEN_TLDS")}for(let A=0;A<r.length;++A){const e=r[A];if(!e.length)return i.code("DOMAIN_EMPTY_SEGMENT");if(e.length>63)return i.code("DOMAIN_LONG_SEGMENT");if(A<r.length-1){if(!n.domainSegmentRx.test(e))return i.code("DOMAIN_INVALID_CHARS")}else if(!n.tldSegmentRx.test(e))return i.code("DOMAIN_INVALID_TLDS_CHARS")}return null},e.isValid=function(A,t){return!e.analyze(A,t)},n.punycode=function(A){A.includes("%")&&(A=A.replace(/%/g,"%25"));try{return new n.URL("http://".concat(A)).host}catch(e){return A}}},1745:(A,e,t)=>{"use strict";const r=t(9848),i=t(5380),n=t(2178),o={nonAsciiRx:/[^\x00-\x7f]/,encoder:new(r.TextEncoder||TextEncoder)};e.analyze=function(A,e){return o.email(A,e)},e.isValid=function(A,e){return!o.email(A,e)},o.email=function(A,e={}){if("string"!=typeof A)throw new Error("Invalid input: email must be a string");if(!A)return n.code("EMPTY_STRING");const t=!o.nonAsciiRx.test(A);if(!t){if(!1===e.allowUnicode)return n.code("FORBIDDEN_UNICODE");A=A.normalize("NFC")}const r=A.split("@");if(2!==r.length)return r.length>2?n.code("MULTIPLE_AT_CHAR"):n.code("MISSING_AT_CHAR");const[s,a]=r;if(!s)return n.code("EMPTY_LOCAL");if(!e.ignoreLength){if(A.length>254)return n.code("ADDRESS_TOO_LONG");if(o.encoder.encode(s).length>64)return n.code("LOCAL_TOO_LONG")}return o.local(s,t)||i.analyze(a,e)},o.local=function(A,e){const t=A.split(".");for(const A of t){if(!A.length)return n.code("EMPTY_LOCAL_SEGMENT");if(e){if(!o.atextRx.test(A))return n.code("INVALID_LOCAL_CHARS")}else for(const e of A){if(o.atextRx.test(e))continue;const A=o.binary(e);if(!o.atomRx.test(A))return n.code("INVALID_LOCAL_CHARS")}}},o.binary=function(A){return Array.from(o.encoder.encode(A)).map((A=>String.fromCharCode(A))).join("")},o.atextRx=/^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/,o.atomRx=new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])","(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})","(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"))},2178:(A,e)=>{"use strict";e.codes={EMPTY_STRING:"Address must be a non-empty string",FORBIDDEN_UNICODE:"Address contains forbidden Unicode characters",MULTIPLE_AT_CHAR:"Address cannot contain more than one @ character",MISSING_AT_CHAR:"Address must contain one @ character",EMPTY_LOCAL:"Address local part cannot be empty",ADDRESS_TOO_LONG:"Address too long",LOCAL_TOO_LONG:"Address local part too long",EMPTY_LOCAL_SEGMENT:"Address local part contains empty dot-separated segment",INVALID_LOCAL_CHARS:"Address local part contains invalid character",DOMAIN_NON_EMPTY_STRING:"Domain must be a non-empty string",DOMAIN_TOO_LONG:"Domain too long",DOMAIN_INVALID_UNICODE_CHARS:"Domain contains forbidden Unicode characters",DOMAIN_INVALID_CHARS:"Domain contains invalid character",DOMAIN_INVALID_TLDS_CHARS:"Domain contains invalid tld character",DOMAIN_SEGMENTS_COUNT:"Domain lacks the minimum required number of segments",DOMAIN_SEGMENTS_COUNT_MAX:"Domain contains too many segments",DOMAIN_FORBIDDEN_TLDS:"Domain uses forbidden TLD",DOMAIN_EMPTY_SEGMENT:"Domain contains empty dot-separated segment",DOMAIN_LONG_SEGMENT:"Domain contains dot-separated segment that is too long"},e.code=function(A){return{code:A,error:e.codes[A]}}},9959:(A,e,t)=>{"use strict";const r=t(375),i=t(5752);e.regex=function(A={}){r(void 0===A.cidr||"string"==typeof A.cidr,"options.cidr must be a string");const e=A.cidr?A.cidr.toLowerCase():"optional";r(["required","optional","forbidden"].includes(e),"options.cidr must be one of required, optional, forbidden"),r(void 0===A.version||"string"==typeof A.version||Array.isArray(A.version),"options.version must be a string or an array of string");let t=A.version||["ipv4","ipv6","ipvfuture"];Array.isArray(t)||(t=[t]),r(t.length>=1,"options.version must have at least 1 version specified");for(let A=0;A<t.length;++A)r("string"==typeof t[A],"options.version must only contain strings"),t[A]=t[A].toLowerCase(),r(["ipv4","ipv6","ipvfuture"].includes(t[A]),"options.version contains unknown version "+t[A]+" - must be one of ipv4, ipv6, ipvfuture");t=Array.from(new Set(t));const n=t.map((A=>{if("forbidden"===e)return i.ip[A];const t="\\/".concat("ipv4"===A?i.ip.v4Cidr:i.ip.v6Cidr);return"required"===e?"".concat(i.ip[A]).concat(t):"".concat(i.ip[A],"(?:").concat(t,")?")})),o="(?:".concat(n.join("|"),")"),s=new RegExp("^".concat(o,"$"));return{cidr:e,versions:t,regex:s,raw:o}}},5752:(A,e,t)=>{"use strict";const r=t(375),i=t(6064),n={generate:function(){const A={},e="!\\$&'\\(\\)\\*\\+,;=",t="\\w-\\.~%\\dA-Fa-f"+e+":@",r="["+t+"]",i="(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";A.ipv4address="(?:"+i+"\\.){3}"+i;const n="[\\dA-Fa-f]{1,4}",o="(?:"+n+":"+n+"|"+A.ipv4address+")",s="(?:"+n+":){6}"+o,a="::(?:"+n+":){5}"+o,l="(?:"+n+")?::(?:"+n+":){4}"+o,c="(?:(?:"+n+":){0,1}"+n+")?::(?:"+n+":){3}"+o,g="(?:(?:"+n+":){0,2}"+n+")?::(?:"+n+":){2}"+o,u="(?:(?:"+n+":){0,3}"+n+")?::"+n+":"+o,h="(?:(?:"+n+":){0,4}"+n+")?::"+o;A.ipv4Cidr="(?:\\d|[1-2]\\d|3[0-2])",A.ipv6Cidr="(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])",A.ipv6address="(?:"+s+"|"+a+"|"+l+"|"+c+"|"+g+"|"+u+"|"+h+"|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)",A.ipvFuture="v[\\dA-Fa-f]+\\.[\\w-\\.~"+e+":]+",A.scheme="[a-zA-Z][a-zA-Z\\d+-\\.]*",A.schemeRegex=new RegExp(A.scheme);const E="[\\w-\\.~%\\dA-Fa-f"+e+":]*",B="(?:\\[(?:"+A.ipv6address+"|"+A.ipvFuture+")\\]|"+A.ipv4address+"|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})",I="(?:"+E+"@)?"+B+"(?::\\d*)?",f="(?:"+E+"@)?("+B+")(?::\\d*)?",p=r+"+",d="(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*",w="\\/(?:"+p+d+")?",m=p+d,C="[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+"+d;return A.hierPart="(?:(?:\\/\\/"+I+d+")|"+w+"|"+m+"|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))",A.hierPartCapture="(?:(?:\\/\\/"+f+d+")|"+w+"|"+m+")",A.relativeRef="(?:(?:\\/\\/"+I+d+")|"+w+"|"+C+"|)",A.relativeRefCapture="(?:(?:\\/\\/"+f+d+")|"+w+"|"+C+"|)",A.query="["+t+"\\/\\?]*(?=#|$)",A.queryWithSquareBrackets="["+t+"\\[\\]\\/\\?]*(?=#|$)",A.fragment="["+t+"\\/\\?]*",A}};n.rfc3986=n.generate(),e.ip={v4Cidr:n.rfc3986.ipv4Cidr,v6Cidr:n.rfc3986.ipv6Cidr,ipv4:n.rfc3986.ipv4address,ipv6:n.rfc3986.ipv6address,ipvfuture:n.rfc3986.ipvFuture},n.createRegex=function(A){const e=n.rfc3986,t="(?:\\?"+(A.allowQuerySquareBrackets?e.queryWithSquareBrackets:e.query)+")?(?:#"+e.fragment+")?",o=A.domain?e.relativeRefCapture:e.relativeRef;if(A.relativeOnly)return n.wrap(o+t);let s="";if(A.scheme){r(A.scheme instanceof RegExp||"string"==typeof A.scheme||Array.isArray(A.scheme),"scheme must be a RegExp, String, or Array");const t=[].concat(A.scheme);r(t.length>=1,"scheme must have at least 1 scheme specified");const n=[];for(let A=0;A<t.length;++A){const o=t[A];r(o instanceof RegExp||"string"==typeof o,"scheme at position "+A+" must be a RegExp or String"),o instanceof RegExp?n.push(o.source.toString()):(r(e.schemeRegex.test(o),"scheme at position "+A+" must be a valid scheme"),n.push(i(o)))}s=n.join("|")}const a="(?:"+(s?"(?:"+s+")":e.scheme)+":"+(A.domain?e.hierPartCapture:e.hierPart)+")",l=A.allowRelative?"(?:"+a+"|"+o+")":a;return n.wrap(l+t,s)},n.wrap=function(A,e){return{raw:A="(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])".concat(A),regex:new RegExp("^".concat(A,"$")),scheme:e}},n.uriRegex=n.createRegex({}),e.regex=function(A={}){return A.scheme||A.allowRelative||A.relativeOnly||A.allowQuerySquareBrackets||A.domain?n.createRegex(A):n.uriRegex}},1447:(A,e)=>{"use strict";const t={operators:["!","^","*","/","%","+","-","<","<=",">",">=","==","!=","&&","||","??"],operatorCharacters:["!","^","*","/","%","+","-","<","=",">","&","|","?"],operatorsOrder:[["^"],["*","/","%"],["+","-"],["<","<=",">",">="],["==","!="],["&&"],["||","??"]],operatorsPrefix:["!","n"],literals:{'"':'"',"`":"`","'":"'","[":"]"},numberRx:/^(?:[0-9]*\.?[0-9]*){1}$/,tokenRx:/^[\w\$\#\.\@\:\{\}]+$/,symbol:Symbol("formula"),settings:Symbol("settings")};e.Parser=class{constructor(A,e={}){if(!e[t.settings]&&e.constants)for(const A in e.constants){const t=e.constants[A];if(null!==t&&!["boolean","number","string"].includes(typeof t))throw new Error("Formula constant ".concat(A," contains invalid ").concat(typeof t," value type"))}this.settings=e[t.settings]?e:Object.assign({[t.settings]:!0,constants:{},functions:{}},e),this.single=null,this._parts=null,this._parse(A)}_parse(A){let r=[],i="",n=0,o=!1;const s=A=>{if(n)throw new Error("Formula missing closing parenthesis");const s=r.length?r[r.length-1]:null;if(o||i||A){if(s&&"reference"===s.type&&")"===A)return s.type="function",s.value=this._subFormula(i,s.value),void(i="");if(")"===A){const A=new e.Parser(i,this.settings);r.push({type:"segment",value:A})}else if(o){if("]"===o)return r.push({type:"reference",value:i}),void(i="");r.push({type:"literal",value:i})}else if(t.operatorCharacters.includes(i))s&&"operator"===s.type&&t.operators.includes(s.value+i)?s.value+=i:r.push({type:"operator",value:i});else if(i.match(t.numberRx))r.push({type:"constant",value:parseFloat(i)});else if(void 0!==this.settings.constants[i])r.push({type:"constant",value:this.settings.constants[i]});else{if(!i.match(t.tokenRx))throw new Error("Formula contains invalid token: ".concat(i));r.push({type:"reference",value:i})}i=""}};for(const e of A)o?e===o?(s(),o=!1):i+=e:n?"("===e?(i+=e,++n):")"===e?(--n,n?i+=e:s(e)):i+=e:e in t.literals?o=t.literals[e]:"("===e?(s(),++n):t.operatorCharacters.includes(e)?(s(),i=e,s()):" "!==e?i+=e:s();s(),r=r.map(((A,e)=>"operator"!==A.type||"-"!==A.value||e&&"operator"!==r[e-1].type?A:{type:"operator",value:"n"}));let a=!1;for(const A of r){if("operator"===A.type){if(t.operatorsPrefix.includes(A.value))continue;if(!a)throw new Error("Formula contains an operator in invalid position");if(!t.operators.includes(A.value))throw new Error("Formula contains an unknown operator ".concat(A.value))}else if(a)throw new Error("Formula missing expected operator");a=!a}if(!a)throw new Error("Formula contains invalid trailing operator");1===r.length&&["reference","literal","constant"].includes(r[0].type)&&(this.single={type:"reference"===r[0].type?"reference":"value",value:r[0].value}),this._parts=r.map((A=>{if("operator"===A.type)return t.operatorsPrefix.includes(A.value)?A:A.value;if("reference"!==A.type)return A.value;if(this.settings.tokenRx&&!this.settings.tokenRx.test(A.value))throw new Error("Formula contains invalid reference ".concat(A.value));return this.settings.reference?this.settings.reference(A.value):t.reference(A.value)}))}_subFormula(A,r){const i=this.settings.functions[r];if("function"!=typeof i)throw new Error("Formula contains unknown function ".concat(r));let n=[];if(A){let e="",i=0,o=!1;const s=()=>{if(!e)throw new Error("Formula contains function ".concat(r," with invalid arguments ").concat(A));n.push(e),e=""};for(let r=0;r<A.length;++r){const n=A[r];o?(e+=n,n===o&&(o=!1)):n in t.literals&&!i?(e+=n,o=t.literals[n]):","!==n||i?(e+=n,"("===n?++i:")"===n&&--i):s()}s()}return n=n.map((A=>new e.Parser(A,this.settings))),function(A){const e=[];for(const t of n)e.push(t.evaluate(A));return i.call(A,...e)}}evaluate(A){const e=this._parts.slice();for(let r=e.length-2;r>=0;--r){const i=e[r];if(i&&"operator"===i.type){const n=e[r+1];e.splice(r+1,1);const o=t.evaluate(n,A);e[r]=t.single(i.value,o)}}return t.operatorsOrder.forEach((r=>{for(let i=1;i<e.length-1;)if(r.includes(e[i])){const r=e[i],n=t.evaluate(e[i-1],A),o=t.evaluate(e[i+1],A);e.splice(i,2);const s=t.calculate(r,n,o);e[i-1]=0===s?0:s}else i+=2})),t.evaluate(e[0],A)}},e.Parser.prototype[t.symbol]=!0,t.reference=function(A){return function(e){return e&&void 0!==e[A]?e[A]:null}},t.evaluate=function(A,e){return null===A?null:"function"==typeof A?A(e):A[t.symbol]?A.evaluate(e):A},t.single=function(A,e){if("!"===A)return!e;const t=-e;return 0===t?0:t},t.calculate=function(A,e,r){if("??"===A)return t.exists(e)?e:r;if("string"==typeof e||"string"==typeof r){if("+"===A)return(e=t.exists(e)?e:"")+(t.exists(r)?r:"")}else switch(A){case"^":return Math.pow(e,r);case"*":return e*r;case"/":return e/r;case"%":return e%r;case"+":return e+r;case"-":return e-r}switch(A){case"<":return e<r;case"<=":return e<=r;case">":return e>r;case">=":return e>=r;case"==":return e===r;case"!=":return e!==r;case"&&":return e&&r;case"||":return e||r}return null},t.exists=function(A){return null!=A}},9926:()=>{},5688:()=>{},9708:()=>{},1152:()=>{},443:()=>{},9848:()=>{}},t={},function A(r){var i=t[r];if(void 0!==i)return i.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,A),n.exports}(5107))},27808:A=>{A.exports=t;var e=null;try{e=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(A){}function t(A,e,t){this.low=0|A,this.high=0|e,this.unsigned=!!t}function r(A){return!0===(A&&A.__isLong__)}t.prototype.__isLong__,Object.defineProperty(t.prototype,"__isLong__",{value:!0}),t.isLong=r;var i={},n={};function o(A,e){var t,r,o;return e?(o=0<=(A>>>=0)&&A<256)&&(r=n[A])?r:(t=a(A,(0|A)<0?-1:0,!0),o&&(n[A]=t),t):(o=-128<=(A|=0)&&A<128)&&(r=i[A])?r:(t=a(A,A<0?-1:0,!1),o&&(i[A]=t),t)}function s(A,e){if(isNaN(A))return e?f:I;if(e){if(A<0)return f;if(A>=h)return C}else{if(A<=-E)return Q;if(A+1>=E)return m}return A<0?s(-A,e).neg():a(A%u|0,A/u|0,e)}function a(A,e,r){return new t(A,e,r)}t.fromInt=o,t.fromNumber=s,t.fromBits=a;var l=Math.pow;function c(A,e,t){if(0===A.length)throw Error("empty string");if("NaN"===A||"Infinity"===A||"+Infinity"===A||"-Infinity"===A)return I;if("number"==typeof e?(t=e,e=!1):e=!!e,(t=t||10)<2||36<t)throw RangeError("radix");var r;if((r=A.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(A.substring(1),e,t).neg();for(var i=s(l(t,8)),n=I,o=0;o<A.length;o+=8){var a=Math.min(8,A.length-o),g=parseInt(A.substring(o,o+a),t);if(a<8){var u=s(l(t,a));n=n.mul(u).add(s(g))}else n=(n=n.mul(i)).add(s(g))}return n.unsigned=e,n}function g(A,e){return"number"==typeof A?s(A,e):"string"==typeof A?c(A,e):a(A.low,A.high,"boolean"==typeof e?e:A.unsigned)}t.fromString=c,t.fromValue=g;var u=4294967296,h=u*u,E=h/2,B=o(1<<24),I=o(0);t.ZERO=I;var f=o(0,!0);t.UZERO=f;var p=o(1);t.ONE=p;var d=o(1,!0);t.UONE=d;var w=o(-1);t.NEG_ONE=w;var m=a(-1,2147483647,!1);t.MAX_VALUE=m;var C=a(-1,-1,!0);t.MAX_UNSIGNED_VALUE=C;var Q=a(0,-2147483648,!1);t.MIN_VALUE=Q;var R=t.prototype;R.toInt=function(){return this.unsigned?this.low>>>0:this.low},R.toNumber=function(){return this.unsigned?(this.high>>>0)*u+(this.low>>>0):this.high*u+(this.low>>>0)},R.toString=function(A){if((A=A||10)<2||36<A)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Q)){var e=s(A),t=this.div(e),r=t.mul(e).sub(this);return t.toString(A)+r.toInt().toString(A)}return"-"+this.neg().toString(A)}for(var i=s(l(A,6),this.unsigned),n=this,o="";;){var a=n.div(i),c=(n.sub(a.mul(i)).toInt()>>>0).toString(A);if((n=a).isZero())return c+o;for(;c.length<6;)c="0"+c;o=""+c+o}},R.getHighBits=function(){return this.high},R.getHighBitsUnsigned=function(){return this.high>>>0},R.getLowBits=function(){return this.low},R.getLowBitsUnsigned=function(){return this.low>>>0},R.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Q)?64:this.neg().getNumBitsAbs();for(var A=0!=this.high?this.high:this.low,e=31;e>0&&0==(A&1<<e);e--);return 0!=this.high?e+33:e+1},R.isZero=function(){return 0===this.high&&0===this.low},R.eqz=R.isZero,R.isNegative=function(){return!this.unsigned&&this.high<0},R.isPositive=function(){return this.unsigned||this.high>=0},R.isOdd=function(){return 1==(1&this.low)},R.isEven=function(){return 0==(1&this.low)},R.equals=function(A){return r(A)||(A=g(A)),(this.unsigned===A.unsigned||this.high>>>31!=1||A.high>>>31!=1)&&this.high===A.high&&this.low===A.low},R.eq=R.equals,R.notEquals=function(A){return!this.eq(A)},R.neq=R.notEquals,R.ne=R.notEquals,R.lessThan=function(A){return this.comp(A)<0},R.lt=R.lessThan,R.lessThanOrEqual=function(A){return this.comp(A)<=0},R.lte=R.lessThanOrEqual,R.le=R.lessThanOrEqual,R.greaterThan=function(A){return this.comp(A)>0},R.gt=R.greaterThan,R.greaterThanOrEqual=function(A){return this.comp(A)>=0},R.gte=R.greaterThanOrEqual,R.ge=R.greaterThanOrEqual,R.compare=function(A){if(r(A)||(A=g(A)),this.eq(A))return 0;var e=this.isNegative(),t=A.isNegative();return e&&!t?-1:!e&&t?1:this.unsigned?A.high>>>0>this.high>>>0||A.high===this.high&&A.low>>>0>this.low>>>0?-1:1:this.sub(A).isNegative()?-1:1},R.comp=R.compare,R.negate=function(){return!this.unsigned&&this.eq(Q)?Q:this.not().add(p)},R.neg=R.negate,R.add=function(A){r(A)||(A=g(A));var e=this.high>>>16,t=65535&this.high,i=this.low>>>16,n=65535&this.low,o=A.high>>>16,s=65535&A.high,l=A.low>>>16,c=0,u=0,h=0,E=0;return h+=(E+=n+(65535&A.low))>>>16,u+=(h+=i+l)>>>16,c+=(u+=t+s)>>>16,c+=e+o,a((h&=65535)<<16|(E&=65535),(c&=65535)<<16|(u&=65535),this.unsigned)},R.subtract=function(A){return r(A)||(A=g(A)),this.add(A.neg())},R.sub=R.subtract,R.multiply=function(A){if(this.isZero())return I;if(r(A)||(A=g(A)),e)return a(e.mul(this.low,this.high,A.low,A.high),e.get_high(),this.unsigned);if(A.isZero())return I;if(this.eq(Q))return A.isOdd()?Q:I;if(A.eq(Q))return this.isOdd()?Q:I;if(this.isNegative())return A.isNegative()?this.neg().mul(A.neg()):this.neg().mul(A).neg();if(A.isNegative())return this.mul(A.neg()).neg();if(this.lt(B)&&A.lt(B))return s(this.toNumber()*A.toNumber(),this.unsigned);var t=this.high>>>16,i=65535&this.high,n=this.low>>>16,o=65535&this.low,l=A.high>>>16,c=65535&A.high,u=A.low>>>16,h=65535&A.low,E=0,f=0,p=0,d=0;return p+=(d+=o*h)>>>16,f+=(p+=n*h)>>>16,p&=65535,f+=(p+=o*u)>>>16,E+=(f+=i*h)>>>16,f&=65535,E+=(f+=n*u)>>>16,f&=65535,E+=(f+=o*c)>>>16,E+=t*h+i*u+n*c+o*l,a((p&=65535)<<16|(d&=65535),(E&=65535)<<16|(f&=65535),this.unsigned)},R.mul=R.multiply,R.divide=function(A){if(r(A)||(A=g(A)),A.isZero())throw Error("division by zero");var t,i,n;if(e)return this.unsigned||-2147483648!==this.high||-1!==A.low||-1!==A.high?a((this.unsigned?e.div_u:e.div_s)(this.low,this.high,A.low,A.high),e.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?f:I;if(this.unsigned){if(A.unsigned||(A=A.toUnsigned()),A.gt(this))return f;if(A.gt(this.shru(1)))return d;n=f}else{if(this.eq(Q))return A.eq(p)||A.eq(w)?Q:A.eq(Q)?p:(t=this.shr(1).div(A).shl(1)).eq(I)?A.isNegative()?p:w:(i=this.sub(A.mul(t)),n=t.add(i.div(A)));if(A.eq(Q))return this.unsigned?f:I;if(this.isNegative())return A.isNegative()?this.neg().div(A.neg()):this.neg().div(A).neg();if(A.isNegative())return this.div(A.neg()).neg();n=I}for(i=this;i.gte(A);){t=Math.max(1,Math.floor(i.toNumber()/A.toNumber()));for(var o=Math.ceil(Math.log(t)/Math.LN2),c=o<=48?1:l(2,o-48),u=s(t),h=u.mul(A);h.isNegative()||h.gt(i);)h=(u=s(t-=c,this.unsigned)).mul(A);u.isZero()&&(u=p),n=n.add(u),i=i.sub(h)}return n},R.div=R.divide,R.modulo=function(A){return r(A)||(A=g(A)),e?a((this.unsigned?e.rem_u:e.rem_s)(this.low,this.high,A.low,A.high),e.get_high(),this.unsigned):this.sub(this.div(A).mul(A))},R.mod=R.modulo,R.rem=R.modulo,R.not=function(){return a(~this.low,~this.high,this.unsigned)},R.and=function(A){return r(A)||(A=g(A)),a(this.low&A.low,this.high&A.high,this.unsigned)},R.or=function(A){return r(A)||(A=g(A)),a(this.low|A.low,this.high|A.high,this.unsigned)},R.xor=function(A){return r(A)||(A=g(A)),a(this.low^A.low,this.high^A.high,this.unsigned)},R.shiftLeft=function(A){return r(A)&&(A=A.toInt()),0==(A&=63)?this:A<32?a(this.low<<A,this.high<<A|this.low>>>32-A,this.unsigned):a(0,this.low<<A-32,this.unsigned)},R.shl=R.shiftLeft,R.shiftRight=function(A){return r(A)&&(A=A.toInt()),0==(A&=63)?this:A<32?a(this.low>>>A|this.high<<32-A,this.high>>A,this.unsigned):a(this.high>>A-32,this.high>=0?0:-1,this.unsigned)},R.shr=R.shiftRight,R.shiftRightUnsigned=function(A){if(r(A)&&(A=A.toInt()),0==(A&=63))return this;var e=this.high;return A<32?a(this.low>>>A|e<<32-A,e>>>A,this.unsigned):a(32===A?e:e>>>A-32,0,this.unsigned)},R.shru=R.shiftRightUnsigned,R.shr_u=R.shiftRightUnsigned,R.toSigned=function(){return this.unsigned?a(this.low,this.high,!1):this},R.toUnsigned=function(){return this.unsigned?this:a(this.low,this.high,!0)},R.toBytes=function(A){return A?this.toBytesLE():this.toBytesBE()},R.toBytesLE=function(){var A=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&A,A>>>8&255,A>>>16&255,A>>>24]},R.toBytesBE=function(){var A=this.high,e=this.low;return[A>>>24,A>>>16&255,A>>>8&255,255&A,e>>>24,e>>>16&255,e>>>8&255,255&e]},t.fromBytes=function(A,e,r){return r?t.fromBytesLE(A,e):t.fromBytesBE(A,e)},t.fromBytesLE=function(A,e){return new t(A[0]|A[1]<<8|A[2]<<16|A[3]<<24,A[4]|A[5]<<8|A[6]<<16|A[7]<<24,e)},t.fromBytesBE=function(A,e){return new t(A[4]<<24|A[5]<<16|A[6]<<8|A[7],A[0]<<24|A[1]<<16|A[2]<<8|A[3],e)}},31235:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(22550),n=t(55764);class o{static importKey(A,e,t=new i.WebCryptoProvider){return r(this,void 0,void 0,(function*(){return new o(yield n.SIV.importKey(A,e,t))}))}constructor(A){this._siv=A}seal(A,e,t=new Uint8Array(0)){return r(this,void 0,void 0,(function*(){return this._siv.seal(A,[t,e])}))}open(A,e,t=new Uint8Array(0)){return r(this,void 0,void 0,(function*(){return this._siv.open(A,[t,e])}))}clear(){return this._siv.clear(),this}}e.AEAD=o},97623:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});class t extends Error{constructor(A){super(A),Object.setPrototypeOf(this,t.prototype)}}e.IntegrityError=t;class r extends Error{constructor(A){super(A),Object.setPrototypeOf(this,r.prototype)}}e.NotImplementedError=r},27849:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(A){for(var t in A)e.hasOwnProperty(t)||(e[t]=A[t])}(t(97623));var r=t(31235);e.AEAD=r.AEAD;var i=t(55764);e.SIV=i.SIV;var n=t(9397);e.StreamEncryptor=n.StreamEncryptor,e.StreamDecryptor=n.StreamDecryptor;var o=t(73609);e.CMAC=o.CMAC;var s=t(90614);e.PMAC=s.PMAC;var a=t(63017);e.PolyfillCryptoProvider=a.PolyfillCryptoProvider;var l=t(22550);e.WebCryptoProvider=l.WebCryptoProvider},3472:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=t(66752),i=t(54587);class n{constructor(){this.data=new Uint8Array(n.SIZE)}clear(){i.wipe(this.data)}clone(){const A=new n;return A.copy(this),A}copy(A){this.data.set(A.data)}dbl(){let A=0;for(let e=n.SIZE-1;e>=0;e--){const t=this.data[e]>>>7&255;this.data[e]=this.data[e]<<1|A,A=t}this.data[n.SIZE-1]^=r.select(A,n.R,0),A=0}}n.SIZE=16,n.R=135,e.default=n},66752:(A,e)=>{"use strict";function t(A,e){if(A.length!==e.length)return 0;let t=0;for(let r=0;r<A.length;r++)t|=A[r]^e[r];return 1&t-1>>>8}Object.defineProperty(e,"__esModule",{value:!0}),e.select=function(A,e,t){return~(A-1)&e|A-1&t},e.compare=t,e.equal=function(A,e){return 0!==A.length&&0!==e.length&&0!==t(A,e)}},54162:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const t=new Uint8Array([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0]);e.ctz=function(A){return t[A]}},54587:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.wipe=function(A){for(let e=0;e<A.length;e++)A[e]=0;return A}},32366:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.xor=function(A,e){for(let t=0;t<e.length;t++)A[t]^=e[t]}},73609:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(3472),n=t(32366);class o{constructor(A,e,t){this._cipher=A,this._subkey1=e,this._subkey2=t,this._bufferPos=0,this._finished=!1,this._buffer=new i.default}static importKey(A,e){return r(this,void 0,void 0,(function*(){const t=yield A.importBlockCipherKey(e),r=new i.default;yield t.encryptBlock(r),r.dbl();const n=r.clone();return n.dbl(),new o(t,r,n)}))}reset(){return this._buffer.clear(),this._bufferPos=0,this._finished=!1,this}clear(){this.reset(),this._subkey1.clear(),this._subkey2.clear()}update(A){return r(this,void 0,void 0,(function*(){const e=i.default.SIZE-this._bufferPos;let t=0,r=A.length;if(r>e){for(let t=0;t<e;t++)this._buffer.data[this._bufferPos+t]^=A[t];r-=e,t+=e,yield this._cipher.encryptBlock(this._buffer),this._bufferPos=0}for(;r>i.default.SIZE;){for(let e=0;e<i.default.SIZE;e++)this._buffer.data[e]^=A[t+e];r-=i.default.SIZE,t+=i.default.SIZE,yield this._cipher.encryptBlock(this._buffer)}for(let e=0;e<r;e++)this._buffer.data[this._bufferPos++]^=A[t+e];return this}))}finish(){return r(this,void 0,void 0,(function*(){if(!this._finished){const A=this._bufferPos<i.default.SIZE?this._subkey2:this._subkey1;n.xor(this._buffer.data,A.data),this._bufferPos<i.default.SIZE&&(this._buffer.data[this._bufferPos]^=128),yield this._cipher.encryptBlock(this._buffer),this._finished=!0}return this._buffer.clone().data}))}}e.CMAC=o},90614:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(3472),n=t(66752),o=t(54162),s=t(32366);class a{constructor(A,e,t){this._finished=!1,this._cipher=A,this._L=e,this._LInv=t,this._buffer=new i.default,this._bufferPos=0,this._counter=0,this._offset=new i.default,this._tag=new i.default}static importKey(A,e){return r(this,void 0,void 0,(function*(){const t=yield A.importBlockCipherKey(e),r=new i.default;yield t.encryptBlock(r);const o=new Array(31);for(let A=0;A<31;A++)o[A]=r.clone(),r.dbl();const s=o[0].clone(),l=1&s.data[i.default.SIZE-1];for(let A=i.default.SIZE-1;A>0;A--){const e=n.select(1&s.data[A-1],128,0);s.data[A]=s.data[A]>>>1|e}return s.data[0]>>>=1,s.data[0]^=n.select(l,128,0),s.data[i.default.SIZE-1]^=n.select(l,i.default.R>>>1,0),new a(t,o,s)}))}reset(){return this._buffer.clear(),this._bufferPos=0,this._counter=0,this._offset.clear(),this._tag.clear(),this._finished=!1,this}clear(){this.reset(),this._cipher.clear()}update(A){return r(this,void 0,void 0,(function*(){if(this._finished)throw new Error("pmac: already finished");const e=i.default.SIZE-this._bufferPos;let t=0,r=A.length;for(r>e&&(this._buffer.data.set(A.slice(0,e),this._bufferPos),t+=e,r-=e,yield this._processBuffer());r>i.default.SIZE;)this._buffer.data.set(A.slice(t,t+i.default.SIZE)),t+=i.default.SIZE,r-=i.default.SIZE,yield this._processBuffer();return r>0&&(this._buffer.data.set(A.slice(t,t+r),this._bufferPos),this._bufferPos+=r),this}))}finish(){return r(this,void 0,void 0,(function*(){if(this._finished)throw new Error("pmac: already finished");return this._bufferPos===i.default.SIZE?(s.xor(this._tag.data,this._buffer.data),s.xor(this._tag.data,this._LInv.data)):(s.xor(this._tag.data,this._buffer.data.slice(0,this._bufferPos)),this._tag.data[this._bufferPos]^=128),yield this._cipher.encryptBlock(this._tag),this._finished=!0,this._tag.clone().data}))}_processBuffer(){return r(this,void 0,void 0,(function*(){s.xor(this._offset.data,this._L[o.ctz(this._counter+1)].data),s.xor(this._buffer.data,this._offset.data),this._counter++,yield this._cipher.encryptBlock(this._buffer),s.xor(this._tag.data,this._buffer.data),this._bufferPos=0}))}}e.PMAC=a},63017:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(61129),n=t(14787);e.PolyfillCryptoProvider=class{constructor(){}importBlockCipherKey(A){return r(this,void 0,void 0,(function*(){return new i.default(A)}))}importCTRKey(A){return r(this,void 0,void 0,(function*(){return new n.default(new i.default(A))}))}}},61129:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=t(54587),i=new Uint8Array([1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47]),n=new Uint8Array([99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22]),o=new Uint8Array([82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125]);let s,a,l,c,g,u,h,E,B=!1;function I(A,e=0){return(A[e]<<24|A[e+1]<<16|A[e+2]<<8|A[e+3])>>>0}function f(A,e=new Uint8Array(4),t=0){return e[t+0]=A>>>24,e[t+1]=A>>>16,e[t+2]=A>>>8,e[t+3]=A>>>0,e}function p(A){return n[A>>>24&255]<<24|n[A>>>16&255]<<16|n[A>>>8&255]<<8|n[255&A]}e.default=class{constructor(A){if(B||function(){function A(A,e){let t=A,r=e,i=0;for(let A=1;A<256&&0!==r;A<<=1)0!=(r&A)&&(i^=t,r^=A),t<<=1,0!=(256&t)&&(t^=283);return i}const e=A=>A<<24|A>>>8;s=new Uint32Array(256),a=new Uint32Array(256),l=new Uint32Array(256),c=new Uint32Array(256);for(let t=0;t<256;t++){const r=n[t];let i=A(r,2)<<24|r<<16|r<<8|A(r,3);s[t]=i,i=e(i),a[t]=i,i=e(i),l[t]=i,i=e(i),c[t]=i,i=e(i)}g=new Uint32Array(256),u=new Uint32Array(256),h=new Uint32Array(256),E=new Uint32Array(256);for(let t=0;t<256;t++){const r=o[t];let i=A(r,14)<<24|A(r,9)<<16|A(r,13)<<8|A(r,11);g[t]=i,i=e(i),u[t]=i,i=e(i),h[t]=i,i=e(i),E[t]=i,i=e(i)}B=!0}(),16!==A.length&&32!==A.length)throw new Error(`Miscreant: invalid key length: ${A.length} (expected 16 or 32 bytes)`);this._encKey=function(A){const e=new Uint32Array(A.length+28),t=A.length/4|0,r=e.length;for(let r=0;r<t;r++)e[r]=I(A,4*r);for(let A=t;A<r;A++){let r=e[A-1];A%t==0?r=p((n=r)<<8|n>>>24)^i[A/t-1]<<24:t>6&&A%t==4&&(r=p(r)),e[A]=e[A-t]^r}var n;return e}(A),this._emptyPromise=Promise.resolve(this)}clear(){return this._encKey&&r.wipe(this._encKey),this}encryptBlock(A){const e=A.data,t=A.data;let r=I(e,0),i=I(e,4),o=I(e,8),g=I(e,12);r^=this._encKey[0],i^=this._encKey[1],o^=this._encKey[2],g^=this._encKey[3];let u=0,h=0,E=0,B=0;const p=this._encKey.length/4-2;let d=4;for(let A=0;A<p;A++)u=this._encKey[d+0]^s[r>>>24&255]^a[i>>>16&255]^l[o>>>8&255]^c[255&g],h=this._encKey[d+1]^s[i>>>24&255]^a[o>>>16&255]^l[g>>>8&255]^c[255&r],E=this._encKey[d+2]^s[o>>>24&255]^a[g>>>16&255]^l[r>>>8&255]^c[255&i],B=this._encKey[d+3]^s[g>>>24&255]^a[r>>>16&255]^l[i>>>8&255]^c[255&o],d+=4,r=u,i=h,o=E,g=B;return r=n[u>>>24]<<24|n[h>>>16&255]<<16|n[E>>>8&255]<<8|n[255&B],i=n[h>>>24]<<24|n[E>>>16&255]<<16|n[B>>>8&255]<<8|n[255&u],o=n[E>>>24]<<24|n[B>>>16&255]<<16|n[u>>>8&255]<<8|n[255&h],g=n[B>>>24]<<24|n[u>>>16&255]<<16|n[h>>>8&255]<<8|n[255&E],r^=this._encKey[d+0],i^=this._encKey[d+1],o^=this._encKey[d+2],g^=this._encKey[d+3],f(r,t,0),f(i,t,4),f(o,t,8),f(g,t,12),this._emptyPromise}}},14787:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(3472);function n(A){let e=1;for(let t=i.default.SIZE-1;t>=0;t--)e+=255&A.data[t]|0,A.data[t]=255&e,e>>>=8}e.default=class{constructor(A){this._cipher=A,this._counter=new i.default,this._buffer=new i.default}clear(){return this._buffer.clear(),this._counter.clear(),this._cipher.clear(),this}encryptCtr(A,e){return r(this,void 0,void 0,(function*(){if(A.length!==i.default.SIZE)throw new Error("CTR: iv length must be equal to cipher block size");this._counter.data.set(A);let t=i.default.SIZE;const r=new Uint8Array(e.length);for(let A=0;A<e.length;A++)t===i.default.SIZE&&(this._buffer.copy(this._counter),this._cipher.encryptBlock(this._buffer),t=0,n(this._counter)),r[A]=e[A]^this._buffer.data[t++];return r}))}}},22550:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(97623),n=t(25894),o=t(36857);e.WebCryptoProvider=class{constructor(A=window.crypto){this.crypto=A}importBlockCipherKey(A){return r(this,void 0,void 0,(function*(){return n.default.importKey(this.crypto,A)}))}importCTRKey(A){return r(this,void 0,void 0,(function*(){try{return yield o.default.importKey(this.crypto,A)}catch(A){throw A.message.includes("unsupported")?new i.NotImplementedError("WebCryptoProvider: AES-CTR unsupported. Use PolyfillCryptoProvider."):A}}))}}},25894:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(3472);class n{constructor(A,e){this._crypto=A,this._key=e,this._iv=new i.default,this._emptyPromise=Promise.resolve(this)}static importKey(A,e){return r(this,void 0,void 0,(function*(){if(16!==e.length&&32!==e.length)throw new Error(`Miscreant: invalid key length: ${e.length} (expected 16 or 32 bytes)`);const t=yield A.subtle.importKey("raw",e,"AES-CBC",!1,["encrypt"]);return new n(A,t)}))}clear(){return this}encryptBlock(A){return r(this,void 0,void 0,(function*(){const e={name:"AES-CBC",iv:this._iv.data},t=yield this._crypto.subtle.encrypt(e,this._key,A.data);return A.data.set(new Uint8Array(t,0,i.default.SIZE)),this._emptyPromise}))}}e.default=n},36857:function(A,e){"use strict";var t=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(A,e){this.key=A,this.crypto=e}static importKey(A,e){return t(this,void 0,void 0,(function*(){if(16!==e.length&&32!==e.length)throw new Error(`Miscreant: invalid key length: ${e.length} (expected 16 or 32 bytes)`);const t=yield A.subtle.importKey("raw",e,"AES-CTR",!1,["encrypt"]);return new r(t,A)}))}encryptCtr(A,e){return t(this,void 0,void 0,(function*(){const t=yield this.crypto.subtle.encrypt({name:"AES-CTR",counter:A,length:16},this.key,e);return new Uint8Array(t)}))}clear(){return this}}e.default=r},55764:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(66752),n=t(54587),o=t(32366),s=t(97623),a=t(3472),l=t(73609),c=t(90614),g=t(22550);e.MAX_ASSOCIATED_DATA=126;class u{static importKey(A,e,t=new g.WebCryptoProvider){return r(this,void 0,void 0,(function*(){if(32!==A.length&&64!==A.length)throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${A.length}`);const r=A.subarray(0,A.length/2|0),i=A.subarray(A.length/2|0);let n;switch(e){case"AES-SIV":case"AES-CMAC-SIV":n=yield l.CMAC.importKey(t,r);break;case"AES-PMAC-SIV":n=yield c.PMAC.importKey(t,r);break;default:throw new s.NotImplementedError(`Miscreant: algorithm not supported: ${e}`)}const o=yield t.importCTRKey(i);return new u(n,o)}))}constructor(A,e){this._mac=A,this._ctr=e,this._tmp1=new a.default,this._tmp2=new a.default}seal(A,t){return r(this,void 0,void 0,(function*(){if(t.length>e.MAX_ASSOCIATED_DATA)throw new Error("AES-SIV: too many associated data items");const r=a.default.SIZE+A.length,i=new Uint8Array(r),n=yield this._s2v(t,A);return i.set(n),h(n),i.set(yield this._ctr.encryptCtr(n,A),n.length),i}))}open(A,t){return r(this,void 0,void 0,(function*(){if(t.length>e.MAX_ASSOCIATED_DATA)throw new Error("AES-SIV: too many associated data items");if(A.length<a.default.SIZE)throw new s.IntegrityError("AES-SIV: ciphertext is truncated");const r=A.subarray(0,a.default.SIZE),o=this._tmp1.data;o.set(r),h(o);const l=yield this._ctr.encryptCtr(o,A.subarray(a.default.SIZE)),c=yield this._s2v(t,l);if(!i.equal(c,r))throw n.wipe(l),new s.IntegrityError("AES-SIV: ciphertext verification failure!");return l}))}clear(){return this._tmp1.clear(),this._tmp2.clear(),this._ctr.clear(),this._mac.clear(),this}_s2v(A,e){return r(this,void 0,void 0,(function*(){this._mac.reset(),this._tmp1.clear(),yield this._mac.update(this._tmp1.data),this._tmp2.clear(),this._tmp2.data.set(yield this._mac.finish()),this._mac.reset();for(const e of A)yield this._mac.update(e),this._tmp1.clear(),this._tmp1.data.set(yield this._mac.finish()),this._mac.reset(),this._tmp2.dbl(),o.xor(this._tmp2.data,this._tmp1.data);if(this._tmp1.clear(),e.length>=a.default.SIZE){const A=e.length-a.default.SIZE;this._tmp1.data.set(e.subarray(A)),yield this._mac.update(e.subarray(0,A))}else this._tmp1.data.set(e),this._tmp1.data[e.length]=128,this._tmp2.dbl();return o.xor(this._tmp1.data,this._tmp2.data),yield this._mac.update(this._tmp1.data),this._mac.finish()}))}}function h(A){A[A.length-8]&=127,A[A.length-4]&=127}e.SIV=u},9397:function(A,e,t){"use strict";var r=this&&this.__awaiter||function(A,e,t,r){return new(t||(t=Promise))((function(i,n){function o(A){try{a(r.next(A))}catch(A){n(A)}}function s(A){try{a(r.throw(A))}catch(A){n(A)}}function a(A){A.done?i(A.value):new t((function(e){e(A.value)})).then(o,s)}a((r=r.apply(A,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=t(31235),n=t(22550);e.NONCE_SIZE=8,e.LAST_BLOCK_FLAG=1,e.COUNTER_MAX=4294967295;class o{static importKey(A,e,t,s=new n.WebCryptoProvider){return r(this,void 0,void 0,(function*(){return new o(yield i.AEAD.importKey(A,t,s),e)}))}constructor(A,e){this._aead=A,this._nonce_encoder=new a(e)}seal(A,e=!1,t=new Uint8Array(0)){return r(this,void 0,void 0,(function*(){return this._aead.seal(A,this._nonce_encoder.next(e),t)}))}clear(){return this._aead.clear(),this}}e.StreamEncryptor=o;class s{static importKey(A,e,t,o=new n.WebCryptoProvider){return r(this,void 0,void 0,(function*(){return new s(yield i.AEAD.importKey(A,t,o),e)}))}constructor(A,e){this._aead=A,this._nonce_encoder=new a(e)}open(A,e=!1,t=new Uint8Array(0)){return r(this,void 0,void 0,(function*(){return this._aead.open(A,this._nonce_encoder.next(e),t)}))}clear(){return this._aead.clear(),this}}e.StreamDecryptor=s;class a{constructor(A){if(A.length!==e.NONCE_SIZE)throw new Error(`STREAM: nonce must be 8-bits (got ${A.length}`);this.buffer=new ArrayBuffer(e.NONCE_SIZE+4+1),this.view=new DataView(this.buffer),this.array=new Uint8Array(this.buffer),this.array.set(A),this.counter=0,this.finished=!1}next(A){if(this.finished)throw new Error("STREAM: already finished");if(this.view.setInt32(8,this.counter,!1),A)this.view.setInt8(12,e.LAST_BLOCK_FLAG),this.finished=!0;else if(this.counter+=1,this.counter>e.COUNTER_MAX)throw new Error("STREAM counter overflowed");return this.array}}},98095:(A,e,t)=>{"use strict";t.d(e,{Pi:()=>m});var r=t(80075),i=t(2784);if(!i.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!r.makeObservable)throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");var n=t(28316);var o=function(A,e){var t="function"==typeof Symbol&&A[Symbol.iterator];if(!t)return A;var r,i,n=t.call(A),o=[];try{for(;(void 0===e||e-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(A){i={error:A}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(i)throw i.error}}return o},s=[];function a(A){return(0,r.getDependencyTree)(A)}var l="undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry;function c(A){return{reaction:A,mounted:!1,changedBeforeMount:!1,cleanAt:Date.now()+g}}var g=1e4,u=l?function(A){var e=new Map,t=1,r=new A((function(A){var t=e.get(A);t&&(t.reaction.dispose(),e.delete(A))}));return{addReactionToTrack:function(A,i,n){var o=t++;return r.register(n,o,A),A.current=c(i),A.current.finalizationRegistryCleanupToken=o,e.set(o,A.current),A.current},recordReactionAsCommitted:function(A){r.unregister(A),A.current&&A.current.finalizationRegistryCleanupToken&&e.delete(A.current.finalizationRegistryCleanupToken)},forceCleanupTimerToRunNowForTests:function(){},resetCleanupScheduleForTests:function(){}}}(l):function(){var A,e=new Set;function t(){void 0===A&&(A=setTimeout(r,1e4))}function r(){A=void 0;var r=Date.now();e.forEach((function(A){var t=A.current;t&&r>=t.cleanAt&&(t.reaction.dispose(),A.current=null,e.delete(A))})),e.size>0&&t()}return{addReactionToTrack:function(A,r,i){var n;return A.current=c(r),n=A,e.add(n),t(),A.current},recordReactionAsCommitted:function(A){e.delete(A)},forceCleanupTimerToRunNowForTests:function(){A&&(clearTimeout(A),r())},resetCleanupScheduleForTests:function(){var t,r;if(e.size>0){try{for(var i=function(A){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&A[e],r=0;if(t)return t.call(A);if(A&&"number"==typeof A.length)return{next:function(){return A&&r>=A.length&&(A=void 0),{value:A&&A[r++],done:!A}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),n=i.next();!n.done;n=i.next()){var o=n.value,s=o.current;s&&(s.reaction.dispose(),o.current=null)}}catch(A){t={error:A}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}e.clear()}A&&(clearTimeout(A),A=void 0)}}}(),h=u.addReactionToTrack,E=u.recordReactionAsCommitted,B=(u.resetCleanupScheduleForTests,u.forceCleanupTimerToRunNowForTests,!1);function I(){return B}var f=function(A,e){var t="function"==typeof Symbol&&A[Symbol.iterator];if(!t)return A;var r,i,n=t.call(A),o=[];try{for(;(void 0===e||e-- >0)&&!(r=n.next()).done;)o.push(r.value)}catch(A){i={error:A}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(i)throw i.error}}return o};function p(A){return"observer"+A}var d=function(){};var w=function(){return w=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},w.apply(this,arguments)};function m(A,e){if(I())return A;var t,n,l,c=w({forwardRef:!1},e),g=A.displayName||A.name,u=function(e,t){return function(A,e){if(void 0===e&&(e="observed"),I())return A();var t,n=f(i.useState(new d),1)[0],l=(t=o((0,i.useState)(0),2)[1],(0,i.useCallback)((function(){t((function(A){return A+1}))}),s)),c=i.useRef(null);if(!c.current)var g=new r.Reaction(p(e),(function(){u.mounted?l():u.changedBeforeMount=!0})),u=h(c,g,n);var B,w,m=c.current.reaction;if(i.useDebugValue(m,a),i.useEffect((function(){return E(c),c.current?(c.current.mounted=!0,c.current.changedBeforeMount&&(c.current.changedBeforeMount=!1,l())):(c.current={reaction:new r.Reaction(p(e),(function(){l()})),mounted:!0,changedBeforeMount:!1,cleanAt:1/0},l()),function(){c.current.reaction.dispose(),c.current=null}}),[]),m.track((function(){try{B=A()}catch(A){w=A}})),w)throw w;return B}((function(){return A(e,t)}),g)};return u.displayName=g,t=c.forwardRef?(0,i.memo)((0,i.forwardRef)(u)):(0,i.memo)(u),n=A,l=t,Object.keys(n).forEach((function(A){Q[A]||Object.defineProperty(l,A,Object.getOwnPropertyDescriptor(n,A))})),t.displayName=g,t}var C,Q={$$typeof:!0,render:!0,compare:!0,type:!0};(C=n.unstable_batchedUpdates)||(C=function(A){A()}),(0,r.configure)({reactionScheduler:C})},58242:(A,e,t)=>{"use strict";t.r(e),t.d(e,{FULFILLED:()=>u,IDENTITY:()=>n,NOOP:()=>i,ObservableGroupMap:()=>L,PENDING:()=>g,REJECTED:()=>h,ViewModel:()=>T,addHiddenProp:()=>a,chunkProcessor:()=>D,computedFn:()=>K,createTransformer:()=>x,createViewModel:()=>b,deepObserve:()=>P,expr:()=>V,fail:()=>o,fromPromise:()=>B,fromResource:()=>m,fromStream:()=>y,getAllMethodsAndProperties:()=>c,invariant:()=>s,isPromiseBasedObservable:()=>I,keepAlive:()=>S,lazyObservable:()=>w,moveItem:()=>p,now:()=>G,queueProcessor:()=>F,toStream:()=>Q});var r=t(80075),i=function(){},n=function(A){return A};function o(A){throw new Error("[mobx-utils] "+A)}function s(A,e){void 0===e&&(e="Illegal state"),A||o(e)}function a(A,e,t){Object.defineProperty(A,e,{enumerable:!1,writable:!0,configurable:!0,value:t})}var l=function(A){return A&&A!==Object.prototype&&Object.getOwnPropertyNames(A).concat(l(Object.getPrototypeOf(A))||[])},c=function(A){return function(A){var e=l(A);return e.filter((function(A,t){return e.indexOf(A)===t}))}(A).filter((function(A){return"constructor"!==A&&!~A.indexOf("__")}))},g="pending",u="fulfilled",h="rejected";function E(A){switch(this.state){case g:return A.pending&&A.pending(this.value);case h:return A.rejected&&A.rejected(this.value);case u:return A.fulfilled?A.fulfilled(this.value):this.value}}function B(A,e){if(s(arguments.length<=2,"fromPromise expects up to two arguments"),s("function"==typeof A||"object"==typeof A&&A&&"function"==typeof A.then,"Please pass a promise or function to fromPromise"),!0===A.isPromiseBasedObservable)return A;"function"==typeof A&&(A=new Promise(A));var t=A;A.then((0,r.action)("observableFromPromise-resolve",(function(A){t.value=A,t.state=u})),(0,r.action)("observableFromPromise-reject",(function(A){t.value=A,t.state=h}))),t.isPromiseBasedObservable=!0,t.case=E;var i=e&&e.state===u?e.value:void 0;return(0,r.extendObservable)(t,{value:i,state:g},{},{deep:!1}),t}function I(A){return A&&!0===A.isPromiseBasedObservable}!function(A){A.reject=(0,r.action)("fromPromise.reject",(function(e){var t=A(Promise.reject(e));return t.state=h,t.value=e,t})),A.resolve=(0,r.action)("fromPromise.resolve",(function(e){void 0===e&&(e=void 0);var t=A(Promise.resolve(e));return t.state=u,t.value=e,t}))}(B||(B={}));var f=function(){for(var A=0,e=0,t=arguments.length;e<t;e++)A+=arguments[e].length;var r=Array(A),i=0;for(e=0;e<t;e++)for(var n=arguments[e],o=0,s=n.length;o<s;o++,i++)r[i]=n[o];return r};function p(A,e,t){if(d(A,e),d(A,t),e!==t){var r,i=A.slice();return r=e<t?f(i.slice(0,e),i.slice(e+1,t+1),[i[e]],i.slice(t+1)):f(i.slice(0,t),[i[e]],i.slice(t,e),i.slice(e+1)),A.replace(r),A}}function d(A,e){if(e<0)throw new Error("[mobx.array] Index out of bounds: "+e+" is negative");var t=A.length;if(e>=t)throw new Error("[mobx.array] Index out of bounds: "+e+" is not smaller than "+t)}function w(A,e){void 0===e&&(e=void 0);var t=!1,i=r.observable.box(e,{deep:!1}),n=r.observable.box(!1),o=function(){return t||(t=!0,(0,r._allowStateChanges)(!0,(function(){n.set(!0)})),A((function(A){(0,r._allowStateChanges)(!0,(function(){i.set(A),n.set(!1)}))}))),i.get()},s=(0,r.action)("lazyObservable-reset",(function(){return t=!1,i.set(e),i.get()}));return{current:o,refresh:function(){return t?(t=!1,o()):i.get()},reset:function(){return s()},get pending(){return n.get()}}}function m(A,e,t){void 0===e&&(e=i),void 0===t&&(t=void 0);var n=!1,o=!1,a=t,l=function(){n&&(n=!1,e())},c=(0,r.createAtom)("ResourceBasedObservable",(function(){s(!n&&!o),n=!0,A((function(A){(0,r._allowStateChanges)(!0,(function(){a=A,c.reportChanged()}))}))}),l);return{current:function(){return s(!o,"subscribingObservable has already been disposed"),c.reportObserved()||n||console.warn("Called `get` of a subscribingObservable outside a reaction. Current value will be returned but no new subscription has started"),a},dispose:function(){o=!0,l()},isAlive:function(){return n}}}var C=function(A,e,t,r){var i,n=arguments.length,o=n<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(A,e,t,r);else for(var s=A.length-1;s>=0;s--)(i=A[s])&&(o=(n<3?i(o):n>3?i(e,t,o):i(e,t))||o);return n>3&&o&&Object.defineProperty(e,t,o),o};function Q(A,e){var t;void 0===e&&(e=!1);var i=(0,r.computed)(A);return(t={subscribe:function(A){return"function"==typeof A?{unsubscribe:(0,r.observe)(i,(function(e){var t=e.newValue;return A(t)}),e)}:A&&"object"==typeof A&&A.next?{unsubscribe:(0,r.observe)(i,(function(e){var t=e.newValue;return A.next(t)}),e)}:{unsubscribe:function(){}}}})["function"==typeof Symbol&&Symbol.observable||"@@observable"]=function(){return this},t}var R=function(){function A(A,e){var t=this;Object.defineProperty(this,"current",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"subscription",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),(0,r.makeObservable)(this),(0,r.runInAction)((function(){t.current=e,t.subscription=A.subscribe(t)}))}return Object.defineProperty(A.prototype,"dispose",{enumerable:!1,configurable:!0,writable:!0,value:function(){this.subscription&&this.subscription.unsubscribe()}}),Object.defineProperty(A.prototype,"next",{enumerable:!1,configurable:!0,writable:!0,value:function(A){this.current=A}}),Object.defineProperty(A.prototype,"complete",{enumerable:!1,configurable:!0,writable:!0,value:function(){this.dispose()}}),Object.defineProperty(A.prototype,"error",{enumerable:!1,configurable:!0,writable:!0,value:function(A){this.current=A,this.dispose()}}),C([r.observable.ref],A.prototype,"current",void 0),C([r.action.bound],A.prototype,"next",null),C([r.action.bound],A.prototype,"complete",null),C([r.action.bound],A.prototype,"error",null),A}();function y(A,e){return void 0===e&&(e=void 0),new R(A,e)}var U=function(){return U=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},U.apply(this,arguments)},v=function(A,e,t,r){var i,n=arguments.length,o=n<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,t):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(A,e,t,r);else for(var s=A.length-1;s>=0;s--)(i=A[s])&&(o=(n<3?i(o):n>3?i(e,t,o):i(e,t))||o);return n>3&&o&&Object.defineProperty(e,t,o),o},M=["model","reset","submit","isDirty","isPropertyDirty","resetProperty"],T=function(){function A(A){var e=this;Object.defineProperty(this,"model",{enumerable:!0,configurable:!0,writable:!0,value:A}),Object.defineProperty(this,"localValues",{enumerable:!0,configurable:!0,writable:!0,value:r.observable.map({})}),Object.defineProperty(this,"localComputedValues",{enumerable:!0,configurable:!0,writable:!0,value:r.observable.map({})}),Object.defineProperty(this,"isPropertyDirty",{enumerable:!0,configurable:!0,writable:!0,value:function(A){return e.localValues.has(A)}}),(0,r.makeObservable)(this),s((0,r.isObservableObject)(A),"createViewModel expects an observable object"),c(A).forEach((function(t){var i;if(t!==r.$mobx&&"__mobxDidRunLazyInitializers"!==t){if(s(-1===M.indexOf(t),"The propertyname "+t+" is reserved and cannot be used with viewModels"),(0,r.isComputedProp)(A,t)){var n=(0,r._getAdministration)(A,t),o=n.derivation.bind(e),a=null===(i=n.setter_)||void 0===i?void 0:i.bind(e);e.localComputedValues.set(t,(0,r.computed)(o,{set:a}))}var l=Object.getOwnPropertyDescriptor(A,t),c=l?{enumerable:l.enumerable}:{};Object.defineProperty(e,t,U(U({},c),{configurable:!0,get:function(){return(0,r.isComputedProp)(A,t)?e.localComputedValues.get(t).get():e.isPropertyDirty(t)?e.localValues.get(t):e.model[t]},set:(0,r.action)((function(i){(0,r.isComputedProp)(A,t)?e.localComputedValues.get(t).set(i):i!==e.model[t]?e.localValues.set(t,i):e.localValues.delete(t)}))}))}}))}return Object.defineProperty(A.prototype,"isDirty",{get:function(){return this.localValues.size>0},enumerable:!1,configurable:!0}),Object.defineProperty(A.prototype,"changedValues",{get:function(){return new Map(this.localValues)},enumerable:!1,configurable:!0}),Object.defineProperty(A.prototype,"submit",{enumerable:!1,configurable:!0,writable:!0,value:function(){var A=this;(0,r.keys)(this.localValues).forEach((function(e){var t=A.localValues.get(e),i=A.model[e];(0,r.isObservableArray)(i)?i.replace(t):(0,r.isObservableMap)(i)?(i.clear(),i.merge(t)):(0,r.isComputed)(t)||(A.model[e]=t)})),this.localValues.clear()}}),Object.defineProperty(A.prototype,"reset",{enumerable:!1,configurable:!0,writable:!0,value:function(){this.localValues.clear()}}),Object.defineProperty(A.prototype,"resetProperty",{enumerable:!1,configurable:!0,writable:!0,value:function(A){this.localValues.delete(A)}}),v([r.computed],A.prototype,"isDirty",null),v([r.computed],A.prototype,"changedValues",null),v([r.action.bound],A.prototype,"submit",null),v([r.action.bound],A.prototype,"reset",null),v([r.action.bound],A.prototype,"resetProperty",null),A}();function b(A){return new T(A)}function S(A,e){var t=(0,r.getAtom)(A,e);if(!t)throw new Error("No computed provided, please provide an object created with `computed(() => expr)` or an object + property name");return(0,r.observe)(t,(function(){}))}function F(A,e,t){if(void 0===t&&(t=0),!(0,r.isObservableArray)(A))throw new Error("Expected observable array as first argument");(0,r.isAction)(e)||(e=(0,r.action)("queueProcessor",e));var i=function(){var t=A.slice(0);(0,r.runInAction)((function(){return A.splice(0)})),t.forEach(e)};return t>0?(0,r.autorun)(i,{delay:t}):(0,r.autorun)(i)}function D(A,e,t,i){if(void 0===t&&(t=0),void 0===i&&(i=0),!(0,r.isObservableArray)(A))throw new Error("Expected observable array as first argument");(0,r.isAction)(e)||(e=(0,r.action)("chunkProcessor",e));var n=function(){for(var t=function(){var t=0===i?A.length:Math.min(A.length,i),n=A.slice(0,t);(0,r.runInAction)((function(){return A.splice(0,t)})),e(n)};A.length>0;)t()};return t>0?(0,r.autorun)(n,{delay:t}):(0,r.autorun)(n)}var N={};function G(A){return void 0===A&&(A=1e3),(0,r._isComputingDerivation)()?(N[A]||(N[A]="number"==typeof A?function(A){var e;return m((function(t){t(Date.now()),e=setInterval((function(){return t(Date.now())}),A)}),(function(){clearInterval(e)}),Date.now())}(A):e=m((function(A){A(Date.now()),function t(){window.requestAnimationFrame((function(){A(Date.now()),e.isAlive()&&t()}))}()}),(function(){}),Date.now())),N[A].current()):Date.now();var e}function V(A){return(0,r._isComputingDerivation)()||console.warn("'expr' should only be used inside other reactive functions."),(0,r.computed)(A).get()}var k=function(){return k=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},k.apply(this,arguments)},O=0;function x(A,e){s("function"==typeof A&&A.length<2,"createTransformer expects a function that accepts one argument");var t={},i=void 0,n=!1,o=void 0;"object"==typeof e?(i=e.onCleanup,n=void 0!==e.keepAlive&&e.keepAlive,o=e.debugNameGenerator):"function"==typeof e&&(i=e);var l=!1;return function(s){var c=function(A){var e=typeof A;if("string"===e)return"string:"+A;if("number"===e)return"number:"+A;if(null===A||"object"!==e&&"function"!==e)throw new Error("[mobx-utils] transform expected an object, function, string or number, got: "+String(A));var t=A.$transformId;return void 0===t&&a(A,"$transformId",t="memoizationId:"+ ++O),t}(s),g=t[c];if(g)return g.get();if(!n&&!(0,r._isComputingDerivation)()){l||(console.warn("invoking a transformer from outside a reactive context won't memorized and is cleaned up immediately, unless keepAlive is set"),l=!0);var u=A(s);return i&&i(u,s),u}return g=t[c]=function(s,a){var l,c={};"object"==typeof e?(i=e.onCleanup,o=e.debugNameGenerator,c=e):"function"==typeof e?i=e:(i=void 0,o=void 0);var g=o?o(a):"Transformer-"+A.name+"-"+s,u=(0,r.computed)((function(){return l=A(a)}),k(k({},c),{name:g}));if(!n)var h=(0,r.onBecomeUnobserved)(u,(function(){delete t[s],h(),i&&i(l,a)}));return u}(c,s),g.get()}}function Z(A){if(!A)return"ROOT";for(var e=[];A.parent;)e.push(A.path),A=A.parent;return e.reverse().join("/")}function J(A){return(0,r.isObservableObject)(A)||(0,r.isObservableArray)(A)||(0,r.isObservableMap)(A)}function P(A,e){var t=new WeakMap;function i(r){var i=t.get(r.object);!function(A,e){switch(A.type){case"add":n(A.newValue,e,A.name);break;case"update":o(A.oldValue),n(A.newValue,e,A.name||""+A.index);break;case"remove":case"delete":o(A.oldValue);break;case"splice":A.removed.map(o),A.added.forEach((function(t,r){return n(t,e,""+(A.index+r))}));for(var r=A.index+A.addedCount;r<A.object.length;r++)if(J(A.object[r])){var i=t.get(A.object[r]);i&&(i.path=""+r)}}}(r,i),e(r,Z(i),A)}function n(A,e,o){if(J(A)){var s=t.get(A);if(s){if(s.parent!==e||s.path!==o)throw new Error("The same observable object cannot appear twice in the same tree, trying to assign it to '"+Z(e)+"/"+o+"', but it already exists at '"+Z(s.parent)+"/"+s.path+"'")}else{var a={parent:e,path:o,dispose:(0,r.observe)(A,i)};t.set(A,a),(0,r.entries)(A).forEach((function(A){var e=A[0];return n(A[1],a,e)}))}}}function o(A){if(J(A)){var e=t.get(A);if(!e)return;t.delete(A),e.dispose(),(0,r.values)(A).forEach(o)}}return n(A,void 0,""),function(){o(A)}}var Y,H=(Y=function(A,e){return Y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(A,e){A.__proto__=e}||function(A,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(A[t]=e[t])},Y(A,e)},function(A,e){function t(){this.constructor=A}Y(A,e),A.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}),L=function(A){function e(e,t,i){var n=void 0===i?{}:i,o=n.name,s=void 0===o?"ogm"+(1e3*Math.random()|0):o,a=n.keyToName,l=void 0===a?function(A){return""+A}:a,c=A.call(this)||this;Object.defineProperty(c,"_base",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(c,"_ogmInfoKey",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(c,"_groupBy",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(c,"_keyToName",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(c,"_disposeBaseObserver",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),c._keyToName=l,c._groupBy=t,c._ogmInfoKey=Symbol("ogmInfo"+s),c._base=e;for(var g=0;g<e.length;g++)c._addItem(e[g]);return c._disposeBaseObserver=(0,r.observe)(c._base,(function(A){if("splice"===A.type)(0,r.transaction)((function(){for(var e=0,t=A.removed;e<t.length;e++){var r=t[e];c._removeItem(r)}for(var i=0,n=A.added;i<n.length;i++){var o=n[i];c._addItem(o)}}));else{if("update"!==A.type)throw new Error("illegal state");(0,r.transaction)((function(){c._removeItem(A.oldValue),c._addItem(A.newValue)}))}})),c}return H(e,A),Object.defineProperty(e.prototype,"clear",{enumerable:!1,configurable:!0,writable:!0,value:function(){throw new Error("not supported")}}),Object.defineProperty(e.prototype,"delete",{enumerable:!1,configurable:!0,writable:!0,value:function(A){throw new Error("not supported")}}),Object.defineProperty(e.prototype,"set",{enumerable:!1,configurable:!0,writable:!0,value:function(A,e){throw new Error("not supported")}}),Object.defineProperty(e.prototype,"dispose",{enumerable:!1,configurable:!0,writable:!0,value:function(){this._disposeBaseObserver();for(var A=0;A<this._base.length;A++){var e=this._base[A];e[this._ogmInfoKey].reaction(),delete e[this._ogmInfoKey]}}}),Object.defineProperty(e.prototype,"_getGroupArr",{enumerable:!1,configurable:!0,writable:!0,value:function(e){var t=A.prototype.get.call(this,e);return void 0===t&&(t=(0,r.observable)([],{name:"GroupArray["+this._keyToName(e)+"]",deep:!1}),A.prototype.set.call(this,e,t)),t}}),Object.defineProperty(e.prototype,"_removeFromGroupArr",{enumerable:!1,configurable:!0,writable:!0,value:function(e,t){var r=A.prototype.get.call(this,e);1===r.length?A.prototype.delete.call(this,e):(t===r.length-1||(r[t]=r[r.length-1],r[t][this._ogmInfoKey].groupArrIndex=t),r.length--)}}),Object.defineProperty(e.prototype,"_addItem",{enumerable:!1,configurable:!0,writable:!0,value:function(A){var e=this,t=this._groupBy(A),i=this._getGroupArr(t),n={groupByValue:t,groupArrIndex:i.length,reaction:(0,r.reaction)((function(){return e._groupBy(A)}),(function(t,r){console.log("new group by value ",t);var i=A[e._ogmInfoKey];e._removeFromGroupArr(i.groupByValue,i.groupArrIndex);var n=e._getGroupArr(t),o=n.length;n.push(A),i.groupByValue=t,i.groupArrIndex=o}))};Object.defineProperty(A,this._ogmInfoKey,{configurable:!0,enumerable:!1,value:n}),i.push(A)}}),Object.defineProperty(e.prototype,"_removeItem",{enumerable:!1,configurable:!0,writable:!0,value:function(A){var e=A[this._ogmInfoKey];this._removeFromGroupArr(e.groupByValue,e.groupArrIndex),e.reaction(),delete A[this._ogmInfoKey]}}),e}(r.ObservableMap),j=function(){function A(A,e){Object.defineProperty(this,"base",{enumerable:!0,configurable:!0,writable:!0,value:A}),Object.defineProperty(this,"args",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,"root",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"closest",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"closestIdx",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"isDisposed",{enumerable:!0,configurable:!0,writable:!0,value:!1});for(var t=this.closest=this.root=A,r=0;r<this.args.length-1&&(t=t.get(e[r]));r++)this.closest=t;this.closestIdx=r}return Object.defineProperty(A.prototype,"exists",{enumerable:!1,configurable:!0,writable:!0,value:function(){this.assertNotDisposed();var A=this.args.length;return this.closestIdx>=A-1&&this.closest.has(this.args[A-1])}}),Object.defineProperty(A.prototype,"get",{enumerable:!1,configurable:!0,writable:!0,value:function(){if(this.assertNotDisposed(),!this.exists())throw new Error("Entry doesn't exist");return this.closest.get(this.args[this.args.length-1])}}),Object.defineProperty(A.prototype,"set",{enumerable:!1,configurable:!0,writable:!0,value:function(A){this.assertNotDisposed();for(var e=this.args.length,t=this.closest,r=this.closestIdx;r<e-1;r++){var i=new Map;t.set(this.args[r],i),t=i}this.closestIdx=e-1,this.closest=t,t.set(this.args[e-1],A)}}),Object.defineProperty(A.prototype,"delete",{enumerable:!1,configurable:!0,writable:!0,value:function(){if(this.assertNotDisposed(),!this.exists())throw new Error("Entry doesn't exist");var A=this.args.length;this.closest.delete(this.args[A-1]);for(var e=this.root,t=[e],r=0;r<A-1;r++)e=e.get(this.args[r]),t.push(e);for(r=t.length-1;r>0;r--)0===t[r].size&&t[r-1].delete(this.args[r-1]);this.isDisposed=!0}}),Object.defineProperty(A.prototype,"assertNotDisposed",{enumerable:!1,configurable:!0,writable:!0,value:function(){if(this.isDisposed)throw new Error("Concurrent modification exception")}}),A}(),W=function(){function A(){Object.defineProperty(this,"store",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"argsLength",{enumerable:!0,configurable:!0,writable:!0,value:-1}),Object.defineProperty(this,"last",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}return Object.defineProperty(A.prototype,"entry",{enumerable:!1,configurable:!0,writable:!0,value:function(A){if(-1===this.argsLength)this.argsLength=A.length;else if(this.argsLength!==A.length)throw new Error("DeepMap should be used with functions with a consistent length, expected: "+this.argsLength+", got: "+A.length);return this.last&&(this.last.isDisposed=!0),this.last=new j(this.store,A)}}),A}(),z=function(){return z=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},z.apply(this,arguments)};function K(A,e){if(void 0===e&&(e=!1),(0,r.isAction)(A))throw new Error("computedFn shouldn't be used on actions");var t=!1,i=0,n="boolean"==typeof e?{keepAlive:e}:e,o=new W;return function(){for(var e=this,s=[],a=0;a<arguments.length;a++)s[a]=arguments[a];var l=o.entry(s);if(l.exists())return l.get().get();if(!n.keepAlive&&!(0,r._isComputingDerivation)())return t||(console.warn("invoking a computedFn from outside an reactive context won't be memoized, unless keepAlive is set"),t=!0),A.apply(this,s);var c=(0,r.computed)((function(){return A.apply(e,s)}),z(z({},n),{name:"computedFn("+(n.name||A.name)+"#"+ ++i+")"}));return l.set(c),n.keepAlive||(0,r.onBecomeUnobserved)(c,(function(){o.entry(s).delete()})),c.get()}}},47866:A=>{"use strict";A.exports=(A,e)=>(e=e||(()=>{}),A.then((A=>new Promise((A=>{A(e())})).then((()=>A))),(A=>new Promise((A=>{A(e())})).then((()=>{throw A})))))},10978:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=t(10161),i=t(72113),n=t(10267),o=()=>{},s=new i.TimeoutError;e.default=class extends r{constructor(A){var e,t,r,i;if(super(),this._intervalCount=0,this._intervalEnd=0,this._pendingCount=0,this._resolveEmpty=o,this._resolveIdle=o,!("number"==typeof(A=Object.assign({carryoverConcurrencyCount:!1,intervalCap:1/0,interval:0,concurrency:1/0,autoStart:!0,queueClass:n.default},A)).intervalCap&&A.intervalCap>=1))throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${null!==(t=null===(e=A.intervalCap)||void 0===e?void 0:e.toString())&&void 0!==t?t:""}\` (${typeof A.intervalCap})`);if(void 0===A.interval||!(Number.isFinite(A.interval)&&A.interval>=0))throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${null!==(i=null===(r=A.interval)||void 0===r?void 0:r.toString())&&void 0!==i?i:""}\` (${typeof A.interval})`);this._carryoverConcurrencyCount=A.carryoverConcurrencyCount,this._isIntervalIgnored=A.intervalCap===1/0||0===A.interval,this._intervalCap=A.intervalCap,this._interval=A.interval,this._queue=new A.queueClass,this._queueClass=A.queueClass,this.concurrency=A.concurrency,this._timeout=A.timeout,this._throwOnTimeout=!0===A.throwOnTimeout,this._isPaused=!1===A.autoStart}get _doesIntervalAllowAnother(){return this._isIntervalIgnored||this._intervalCount<this._intervalCap}get _doesConcurrentAllowAnother(){return this._pendingCount<this._concurrency}_next(){this._pendingCount--,this._tryToStartAnother(),this.emit("next")}_resolvePromises(){this._resolveEmpty(),this._resolveEmpty=o,0===this._pendingCount&&(this._resolveIdle(),this._resolveIdle=o,this.emit("idle"))}_onResumeInterval(){this._onInterval(),this._initializeIntervalIfNeeded(),this._timeoutId=void 0}_isIntervalPaused(){const A=Date.now();if(void 0===this._intervalId){const e=this._intervalEnd-A;if(!(e<0))return void 0===this._timeoutId&&(this._timeoutId=setTimeout((()=>{this._onResumeInterval()}),e)),!0;this._intervalCount=this._carryoverConcurrencyCount?this._pendingCount:0}return!1}_tryToStartAnother(){if(0===this._queue.size)return this._intervalId&&clearInterval(this._intervalId),this._intervalId=void 0,this._resolvePromises(),!1;if(!this._isPaused){const A=!this._isIntervalPaused();if(this._doesIntervalAllowAnother&&this._doesConcurrentAllowAnother){const e=this._queue.dequeue();return!!e&&(this.emit("active"),e(),A&&this._initializeIntervalIfNeeded(),!0)}}return!1}_initializeIntervalIfNeeded(){this._isIntervalIgnored||void 0!==this._intervalId||(this._intervalId=setInterval((()=>{this._onInterval()}),this._interval),this._intervalEnd=Date.now()+this._interval)}_onInterval(){0===this._intervalCount&&0===this._pendingCount&&this._intervalId&&(clearInterval(this._intervalId),this._intervalId=void 0),this._intervalCount=this._carryoverConcurrencyCount?this._pendingCount:0,this._processQueue()}_processQueue(){for(;this._tryToStartAnother(););}get concurrency(){return this._concurrency}set concurrency(A){if(!("number"==typeof A&&A>=1))throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${A}\` (${typeof A})`);this._concurrency=A,this._processQueue()}async add(A,e={}){return new Promise(((t,r)=>{this._queue.enqueue((async()=>{this._pendingCount++,this._intervalCount++;try{const n=void 0===this._timeout&&void 0===e.timeout?A():i.default(Promise.resolve(A()),void 0===e.timeout?this._timeout:e.timeout,(()=>{(void 0===e.throwOnTimeout?this._throwOnTimeout:e.throwOnTimeout)&&r(s)}));t(await n)}catch(A){r(A)}this._next()}),e),this._tryToStartAnother(),this.emit("add")}))}async addAll(A,e){return Promise.all(A.map((async A=>this.add(A,e))))}start(){return this._isPaused?(this._isPaused=!1,this._processQueue(),this):this}pause(){this._isPaused=!0}clear(){this._queue=new this._queueClass}async onEmpty(){if(0!==this._queue.size)return new Promise((A=>{const e=this._resolveEmpty;this._resolveEmpty=()=>{e(),A()}}))}async onIdle(){if(0!==this._pendingCount||0!==this._queue.size)return new Promise((A=>{const e=this._resolveIdle;this._resolveIdle=()=>{e(),A()}}))}get size(){return this._queue.size}sizeBy(A){return this._queue.filter(A).length}get pending(){return this._pendingCount}get isPaused(){return this._isPaused}get timeout(){return this._timeout}set timeout(A){this._timeout=A}}},47269:(A,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(A,e,t){let r=0,i=A.length;for(;i>0;){const n=i/2|0;let o=r+n;t(A[o],e)<=0?(r=++o,i-=n+1):i=n}return r}},10267:(A,e,t)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=t(47269);e.default=class{constructor(){this._queue=[]}enqueue(A,e){const t={priority:(e=Object.assign({priority:0},e)).priority,run:A};if(this.size&&this._queue[this.size-1].priority>=e.priority)return void this._queue.push(t);const i=r.default(this._queue,t,((A,e)=>e.priority-A.priority));this._queue.splice(i,0,t)}dequeue(){const A=this._queue.shift();return null==A?void 0:A.run}filter(A){return this._queue.filter((e=>e.priority===A.priority)).map((A=>A.run))}get size(){return this._queue.length}}},72113:(A,e,t)=>{"use strict";const r=t(47866);class i extends Error{constructor(A){super(A),this.name="TimeoutError"}}const n=(A,e,t)=>new Promise(((n,o)=>{if("number"!=typeof e||e<0)throw new TypeError("Expected `milliseconds` to be a positive number");if(e===1/0)return void n(A);const s=setTimeout((()=>{if("function"==typeof t){try{n(t())}catch(A){o(A)}return}const r=t instanceof Error?t:new i("string"==typeof t?t:`Promise timed out after ${e} milliseconds`);"function"==typeof A.cancel&&A.cancel(),o(r)}),e);r(A.then(n,o),(()=>{clearTimeout(s)}))}));A.exports=n,A.exports.default=n,A.exports.TimeoutError=i},30499:(A,e,t)=>{e.pbkdf2=t(14874),e.pbkdf2Sync=t(88840)},14874:(A,e,t)=>{var r,i,n=t(77834).Buffer,o=t(87351),s=t(25214),a=t(88840),l=t(97232),c=t.g.crypto&&t.g.crypto.subtle,g={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},u=[];function h(){return i||(i=t.g.process&&t.g.process.nextTick?t.g.process.nextTick:t.g.queueMicrotask?t.g.queueMicrotask:t.g.setImmediate?t.g.setImmediate:t.g.setTimeout)}function E(A,e,t,r,i){return c.importKey("raw",A,{name:"PBKDF2"},!1,["deriveBits"]).then((function(A){return c.deriveBits({name:"PBKDF2",salt:e,iterations:t,hash:{name:i}},A,r<<3)})).then((function(A){return n.from(A)}))}A.exports=function(A,e,i,B,I,f){"function"==typeof I&&(f=I,I=void 0);var p=g[(I=I||"sha1").toLowerCase()];if(p&&"function"==typeof t.g.Promise){if(o(i,B),A=l(A,s,"Password"),e=l(e,s,"Salt"),"function"!=typeof f)throw new Error("No callback provided to pbkdf2");!function(A,e){A.then((function(A){h()((function(){e(null,A)}))}),(function(A){h()((function(){e(A)}))}))}(function(A){if(t.g.process&&!t.g.process.browser)return Promise.resolve(!1);if(!c||!c.importKey||!c.deriveBits)return Promise.resolve(!1);if(void 0!==u[A])return u[A];var e=E(r=r||n.alloc(8),r,10,128,A).then((function(){return!0})).catch((function(){return!1}));return u[A]=e,e}(p).then((function(t){return t?E(A,e,i,B,p):a(A,e,i,B,I)})),f)}else h()((function(){var t;try{t=a(A,e,i,B,I)}catch(A){return f(A)}f(null,t)}))}},25214:(A,e,t)=>{var r,i=t(34406);r=t.g.process&&t.g.process.browser?"utf-8":t.g.process&&t.g.process.version?parseInt(i.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary":"utf-8",A.exports=r},87351:A=>{var e=Math.pow(2,30)-1;A.exports=function(A,t){if("number"!=typeof A)throw new TypeError("Iterations not a number");if(A<0)throw new TypeError("Bad iterations");if("number"!=typeof t)throw new TypeError("Key length not a number");if(t<0||t>e||t!=t)throw new TypeError("Bad key length")}},88840:(A,e,t)=>{var r=t(22511),i=t(51445),n=t(9065),o=t(77834).Buffer,s=t(87351),a=t(25214),l=t(97232),c=o.alloc(128),g={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function u(A,e,t){var s=function(A){return"rmd160"===A||"ripemd160"===A?function(A){return(new i).update(A).digest()}:"md5"===A?r:function(e){return n(A).update(e).digest()}}(A),a="sha512"===A||"sha384"===A?128:64;e.length>a?e=s(e):e.length<a&&(e=o.concat([e,c],a));for(var l=o.allocUnsafe(a+g[A]),u=o.allocUnsafe(a+g[A]),h=0;h<a;h++)l[h]=54^e[h],u[h]=92^e[h];var E=o.allocUnsafe(a+t+4);l.copy(E,0,0,a),this.ipad1=E,this.ipad2=l,this.opad=u,this.alg=A,this.blocksize=a,this.hash=s,this.size=g[A]}u.prototype.run=function(A,e){return A.copy(e,this.blocksize),this.hash(e).copy(this.opad,this.blocksize),this.hash(this.opad)},A.exports=function(A,e,t,r,i){s(t,r);var n=new u(i=i||"sha1",A=l(A,a,"Password"),(e=l(e,a,"Salt")).length),c=o.allocUnsafe(r),h=o.allocUnsafe(e.length+4);e.copy(h,0,0,e.length);for(var E=0,B=g[i],I=Math.ceil(r/B),f=1;f<=I;f++){h.writeUInt32BE(f,e.length);for(var p=n.run(h,n.ipad1),d=p,w=1;w<t;w++){d=n.run(d,n.ipad2);for(var m=0;m<B;m++)p[m]^=d[m]}p.copy(c,E),E+=B}return c}},97232:(A,e,t)=>{var r=t(77834).Buffer;A.exports=function(A,e,t){if(r.isBuffer(A))return A;if("string"==typeof A)return r.from(A,e);if(ArrayBuffer.isView(A))return r.from(A.buffer);throw new TypeError(t+" must be a string, a Buffer, a typed array or a DataView")}},73737:(A,e,t)=>{"use strict";A.exports=t(50536)},50536:(A,e,t)=>{"use strict";var r=e;function i(){r.util._configure(),r.Writer._configure(r.BufferWriter),r.Reader._configure(r.BufferReader)}r.build="minimal",r.Writer=t(60123),r.BufferWriter=t(76673),r.Reader=t(39799),r.BufferReader=t(87038),r.util=t(34165),r.rpc=t(34963),r.roots=t(29009),r.configure=i,i()},39799:(A,e,t)=>{"use strict";A.exports=a;var r,i=t(34165),n=i.LongBits,o=i.utf8;function s(A,e){return RangeError("index out of range: "+A.pos+" + "+(e||1)+" > "+A.len)}function a(A){this.buf=A,this.pos=0,this.len=A.length}var l,c="undefined"!=typeof Uint8Array?function(A){if(A instanceof Uint8Array||Array.isArray(A))return new a(A);throw Error("illegal buffer")}:function(A){if(Array.isArray(A))return new a(A);throw Error("illegal buffer")},g=function(){return i.Buffer?function(A){return(a.create=function(A){return i.Buffer.isBuffer(A)?new r(A):c(A)})(A)}:c};function u(){var A=new n(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw s(this);if(A.lo=(A.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return A}return A.lo=(A.lo|(127&this.buf[this.pos++])<<7*e)>>>0,A}for(;e<4;++e)if(A.lo=(A.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return A;if(A.lo=(A.lo|(127&this.buf[this.pos])<<28)>>>0,A.hi=(A.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return A;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(A.hi=(A.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return A}else for(;e<5;++e){if(this.pos>=this.len)throw s(this);if(A.hi=(A.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return A}throw Error("invalid varint encoding")}function h(A,e){return(A[e-4]|A[e-3]<<8|A[e-2]<<16|A[e-1]<<24)>>>0}function E(){if(this.pos+8>this.len)throw s(this,8);return new n(h(this.buf,this.pos+=4),h(this.buf,this.pos+=4))}a.create=g(),a.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,a.prototype.uint32=(l=4294967295,function(){if(l=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return l;if(l=(l|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return l;if((this.pos+=5)>this.len)throw this.pos=this.len,s(this,10);return l}),a.prototype.int32=function(){return 0|this.uint32()},a.prototype.sint32=function(){var A=this.uint32();return A>>>1^-(1&A)|0},a.prototype.bool=function(){return 0!==this.uint32()},a.prototype.fixed32=function(){if(this.pos+4>this.len)throw s(this,4);return h(this.buf,this.pos+=4)},a.prototype.sfixed32=function(){if(this.pos+4>this.len)throw s(this,4);return 0|h(this.buf,this.pos+=4)},a.prototype.float=function(){if(this.pos+4>this.len)throw s(this,4);var A=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,A},a.prototype.double=function(){if(this.pos+8>this.len)throw s(this,4);var A=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,A},a.prototype.bytes=function(){var A=this.uint32(),e=this.pos,t=this.pos+A;if(t>this.len)throw s(this,A);return this.pos+=A,Array.isArray(this.buf)?this.buf.slice(e,t):e===t?new this.buf.constructor(0):this._slice.call(this.buf,e,t)},a.prototype.string=function(){var A=this.bytes();return o.read(A,0,A.length)},a.prototype.skip=function(A){if("number"==typeof A){if(this.pos+A>this.len)throw s(this,A);this.pos+=A}else do{if(this.pos>=this.len)throw s(this)}while(128&this.buf[this.pos++]);return this},a.prototype.skipType=function(A){switch(A){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(A=7&this.uint32());)this.skipType(A);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+A+" at offset "+this.pos)}return this},a._configure=function(A){r=A,a.create=g(),r._configure();var e=i.Long?"toLong":"toNumber";i.merge(a.prototype,{int64:function(){return u.call(this)[e](!1)},uint64:function(){return u.call(this)[e](!0)},sint64:function(){return u.call(this).zzDecode()[e](!1)},fixed64:function(){return E.call(this)[e](!0)},sfixed64:function(){return E.call(this)[e](!1)}})}},87038:(A,e,t)=>{"use strict";A.exports=n;var r=t(39799);(n.prototype=Object.create(r.prototype)).constructor=n;var i=t(34165);function n(A){r.call(this,A)}n._configure=function(){i.Buffer&&(n.prototype._slice=i.Buffer.prototype.slice)},n.prototype.string=function(){var A=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+A,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+A,this.len))},n._configure()},29009:A=>{"use strict";A.exports={}},34963:(A,e,t)=>{"use strict";e.Service=t(29548)},29548:(A,e,t)=>{"use strict";A.exports=i;var r=t(34165);function i(A,e,t){if("function"!=typeof A)throw TypeError("rpcImpl must be a function");r.EventEmitter.call(this),this.rpcImpl=A,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(t)}(i.prototype=Object.create(r.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function A(e,t,i,n,o){if(!n)throw TypeError("request must be specified");var s=this;if(!o)return r.asPromise(A,s,e,t,i,n);if(s.rpcImpl)try{return s.rpcImpl(e,t[s.requestDelimited?"encodeDelimited":"encode"](n).finish(),(function(A,t){if(A)return s.emit("error",A,e),o(A);if(null!==t){if(!(t instanceof i))try{t=i[s.responseDelimited?"decodeDelimited":"decode"](t)}catch(A){return s.emit("error",A,e),o(A)}return s.emit("data",t,e),o(null,t)}s.end(!0)}))}catch(A){return s.emit("error",A,e),void setTimeout((function(){o(A)}),0)}else setTimeout((function(){o(Error("already ended"))}),0)},i.prototype.end=function(A){return this.rpcImpl&&(A||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},61697:(A,e,t)=>{"use strict";A.exports=i;var r=t(34165);function i(A,e){this.lo=A>>>0,this.hi=e>>>0}var n=i.zero=new i(0,0);n.toNumber=function(){return 0},n.zzEncode=n.zzDecode=function(){return this},n.length=function(){return 1};var o=i.zeroHash="\0\0\0\0\0\0\0\0";i.fromNumber=function(A){if(0===A)return n;var e=A<0;e&&(A=-A);var t=A>>>0,r=(A-t)/4294967296>>>0;return e&&(r=~r>>>0,t=~t>>>0,++t>4294967295&&(t=0,++r>4294967295&&(r=0))),new i(t,r)},i.from=function(A){if("number"==typeof A)return i.fromNumber(A);if(r.isString(A)){if(!r.Long)return i.fromNumber(parseInt(A,10));A=r.Long.fromString(A)}return A.low||A.high?new i(A.low>>>0,A.high>>>0):n},i.prototype.toNumber=function(A){if(!A&&this.hi>>>31){var e=1+~this.lo>>>0,t=~this.hi>>>0;return e||(t=t+1>>>0),-(e+4294967296*t)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(A){return r.Long?new r.Long(0|this.lo,0|this.hi,Boolean(A)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(A)}};var s=String.prototype.charCodeAt;i.fromHash=function(A){return A===o?n:new i((s.call(A,0)|s.call(A,1)<<8|s.call(A,2)<<16|s.call(A,3)<<24)>>>0,(s.call(A,4)|s.call(A,5)<<8|s.call(A,6)<<16|s.call(A,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var A=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^A)>>>0,this.lo=(this.lo<<1^A)>>>0,this},i.prototype.zzDecode=function(){var A=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^A)>>>0,this.hi=(this.hi>>>1^A)>>>0,this},i.prototype.length=function(){var A=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,t=this.hi>>>24;return 0===t?0===e?A<16384?A<128?1:2:A<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:t<128?9:10}},34165:function(A,e,t){"use strict";var r=e;function i(A,e,t){for(var r=Object.keys(e),i=0;i<r.length;++i)void 0!==A[r[i]]&&t||(A[r[i]]=e[r[i]]);return A}function n(A){function e(A,t){if(!(this instanceof e))return new e(A,t);Object.defineProperty(this,"message",{get:function(){return A}}),Error.captureStackTrace?Error.captureStackTrace(this,e):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),t&&i(this,t)}return(e.prototype=Object.create(Error.prototype)).constructor=e,Object.defineProperty(e.prototype,"name",{get:function(){return A}}),e.prototype.toString=function(){return this.name+": "+this.message},e}r.asPromise=t(46781),r.base64=t(87026),r.EventEmitter=t(15570),r.float=t(5298),r.inquire=t(36116),r.utf8=t(57958),r.pool=t(90804),r.LongBits=t(61697),r.isNode=Boolean(void 0!==t.g&&t.g&&t.g.process&&t.g.process.versions&&t.g.process.versions.node),r.global=r.isNode&&t.g||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||this,r.emptyArray=Object.freeze?Object.freeze([]):[],r.emptyObject=Object.freeze?Object.freeze({}):{},r.isInteger=Number.isInteger||function(A){return"number"==typeof A&&isFinite(A)&&Math.floor(A)===A},r.isString=function(A){return"string"==typeof A||A instanceof String},r.isObject=function(A){return A&&"object"==typeof A},r.isset=r.isSet=function(A,e){var t=A[e];return!(null==t||!A.hasOwnProperty(e))&&("object"!=typeof t||(Array.isArray(t)?t.length:Object.keys(t).length)>0)},r.Buffer=function(){try{var A=r.inquire("buffer").Buffer;return A.prototype.utf8Write?A:null}catch(A){return null}}(),r._Buffer_from=null,r._Buffer_allocUnsafe=null,r.newBuffer=function(A){return"number"==typeof A?r.Buffer?r._Buffer_allocUnsafe(A):new r.Array(A):r.Buffer?r._Buffer_from(A):"undefined"==typeof Uint8Array?A:new Uint8Array(A)},r.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,r.Long=r.global.dcodeIO&&r.global.dcodeIO.Long||r.global.Long||r.inquire("long"),r.key2Re=/^true|false|0|1$/,r.key32Re=/^-?(?:0|[1-9][0-9]*)$/,r.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,r.longToHash=function(A){return A?r.LongBits.from(A).toHash():r.LongBits.zeroHash},r.longFromHash=function(A,e){var t=r.LongBits.fromHash(A);return r.Long?r.Long.fromBits(t.lo,t.hi,e):t.toNumber(Boolean(e))},r.merge=i,r.lcFirst=function(A){return A.charAt(0).toLowerCase()+A.substring(1)},r.newError=n,r.ProtocolError=n("ProtocolError"),r.oneOfGetter=function(A){for(var e={},t=0;t<A.length;++t)e[A[t]]=1;return function(){for(var A=Object.keys(this),t=A.length-1;t>-1;--t)if(1===e[A[t]]&&void 0!==this[A[t]]&&null!==this[A[t]])return A[t]}},r.oneOfSetter=function(A){return function(e){for(var t=0;t<A.length;++t)A[t]!==e&&delete this[A[t]]}},r.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},r._configure=function(){var A=r.Buffer;A?(r._Buffer_from=A.from!==Uint8Array.from&&A.from||function(e,t){return new A(e,t)},r._Buffer_allocUnsafe=A.allocUnsafe||function(e){return new A(e)}):r._Buffer_from=r._Buffer_allocUnsafe=null}},60123:(A,e,t)=>{"use strict";A.exports=g;var r,i=t(34165),n=i.LongBits,o=i.base64,s=i.utf8;function a(A,e,t){this.fn=A,this.len=e,this.next=void 0,this.val=t}function l(){}function c(A){this.head=A.head,this.tail=A.tail,this.len=A.len,this.next=A.states}function g(){this.len=0,this.head=new a(l,0,0),this.tail=this.head,this.states=null}var u=function(){return i.Buffer?function(){return(g.create=function(){return new r})()}:function(){return new g}};function h(A,e,t){e[t]=255&A}function E(A,e){this.len=A,this.next=void 0,this.val=e}function B(A,e,t){for(;A.hi;)e[t++]=127&A.lo|128,A.lo=(A.lo>>>7|A.hi<<25)>>>0,A.hi>>>=7;for(;A.lo>127;)e[t++]=127&A.lo|128,A.lo=A.lo>>>7;e[t++]=A.lo}function I(A,e,t){e[t]=255&A,e[t+1]=A>>>8&255,e[t+2]=A>>>16&255,e[t+3]=A>>>24}g.create=u(),g.alloc=function(A){return new i.Array(A)},i.Array!==Array&&(g.alloc=i.pool(g.alloc,i.Array.prototype.subarray)),g.prototype._push=function(A,e,t){return this.tail=this.tail.next=new a(A,e,t),this.len+=e,this},E.prototype=Object.create(a.prototype),E.prototype.fn=function(A,e,t){for(;A>127;)e[t++]=127&A|128,A>>>=7;e[t]=A},g.prototype.uint32=function(A){return this.len+=(this.tail=this.tail.next=new E((A>>>=0)<128?1:A<16384?2:A<2097152?3:A<268435456?4:5,A)).len,this},g.prototype.int32=function(A){return A<0?this._push(B,10,n.fromNumber(A)):this.uint32(A)},g.prototype.sint32=function(A){return this.uint32((A<<1^A>>31)>>>0)},g.prototype.uint64=function(A){var e=n.from(A);return this._push(B,e.length(),e)},g.prototype.int64=g.prototype.uint64,g.prototype.sint64=function(A){var e=n.from(A).zzEncode();return this._push(B,e.length(),e)},g.prototype.bool=function(A){return this._push(h,1,A?1:0)},g.prototype.fixed32=function(A){return this._push(I,4,A>>>0)},g.prototype.sfixed32=g.prototype.fixed32,g.prototype.fixed64=function(A){var e=n.from(A);return this._push(I,4,e.lo)._push(I,4,e.hi)},g.prototype.sfixed64=g.prototype.fixed64,g.prototype.float=function(A){return this._push(i.float.writeFloatLE,4,A)},g.prototype.double=function(A){return this._push(i.float.writeDoubleLE,8,A)};var f=i.Array.prototype.set?function(A,e,t){e.set(A,t)}:function(A,e,t){for(var r=0;r<A.length;++r)e[t+r]=A[r]};g.prototype.bytes=function(A){var e=A.length>>>0;if(!e)return this._push(h,1,0);if(i.isString(A)){var t=g.alloc(e=o.length(A));o.decode(A,t,0),A=t}return this.uint32(e)._push(f,e,A)},g.prototype.string=function(A){var e=s.length(A);return e?this.uint32(e)._push(s.write,e,A):this._push(h,1,0)},g.prototype.fork=function(){return this.states=new c(this),this.head=this.tail=new a(l,0,0),this.len=0,this},g.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new a(l,0,0),this.len=0),this},g.prototype.ldelim=function(){var A=this.head,e=this.tail,t=this.len;return this.reset().uint32(t),t&&(this.tail.next=A.next,this.tail=e,this.len+=t),this},g.prototype.finish=function(){for(var A=this.head.next,e=this.constructor.alloc(this.len),t=0;A;)A.fn(A.val,e,t),t+=A.len,A=A.next;return e},g._configure=function(A){r=A,g.create=u(),r._configure()}},76673:(A,e,t)=>{"use strict";A.exports=n;var r=t(60123);(n.prototype=Object.create(r.prototype)).constructor=n;var i=t(34165);function n(){r.call(this)}function o(A,e,t){A.length<40?i.utf8.write(A,e,t):e.utf8Write?e.utf8Write(A,t):e.write(A,t)}n._configure=function(){n.alloc=i._Buffer_allocUnsafe,n.writeBytesBuffer=i.Buffer&&i.Buffer.prototype instanceof Uint8Array&&"set"===i.Buffer.prototype.set.name?function(A,e,t){e.set(A,t)}:function(A,e,t){if(A.copy)A.copy(e,t,0,A.length);else for(var r=0;r<A.length;)e[t++]=A[r++]}},n.prototype.bytes=function(A){i.isString(A)&&(A=i._Buffer_from(A,"base64"));var e=A.length>>>0;return this.uint32(e),e&&this._push(n.writeBytesBuffer,e,A),this},n.prototype.string=function(A){var e=i.Buffer.byteLength(A);return this.uint32(e),e&&this._push(o,e,A),this},n._configure()},89274:(A,e,t)=>{"use strict";t.d(e,{_y:()=>o,zt:()=>n});var r=t(2784);t(73463);var i=r.createContext(null),n=(i.Consumer,i.Provider),o=i},37940:(A,e,t)=>{"use strict";t.d(e,{Z:()=>H});var r=t(27221),i=t(2784),n=t(89274),o=t(87576),s=t(12452),a=t(73731),l=t(77481),c=t(40283),g=t(53753);function u(A,e){return Object.keys(A).reduce((function(t,r){return t[r]=(0,s.pi)({timeZone:e},A[r]),t}),{})}function h(A,e){return Object.keys((0,s.pi)((0,s.pi)({},A),e)).reduce((function(t,r){return t[r]=(0,s.pi)((0,s.pi)({},A[r]||{}),e[r]||{}),t}),{})}function E(A,e){if(!e)return A;var t=l.C.formats;return(0,s.pi)((0,s.pi)((0,s.pi)({},t),A),{date:h(u(t.date,e),u(A.date||{},e)),time:h(u(t.time,e),u(A.time||{},e))})}var B=function(A,e,t,r,i){var n=A.locale,o=A.formats,l=A.messages,u=A.defaultLocale,h=A.defaultFormats,B=A.fallbackOnEmptyString,I=A.onError,f=A.timeZone,p=A.defaultRichTextElements;void 0===t&&(t={id:""});var d=t.id,w=t.defaultMessage;(0,a.kG)(!!d,"[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");var m=String(d),C=l&&Object.prototype.hasOwnProperty.call(l,m)&&l[m];if(Array.isArray(C)&&1===C.length&&C[0].type===g.wD.literal)return C[0].value;if(!r&&C&&"string"==typeof C&&!p)return C.replace(/'\{(.*?)\}'/gi,"{$1}");if(r=(0,s.pi)((0,s.pi)({},p),r||{}),o=E(o,f),h=E(h,f),!C){if(!1===B&&""===C)return C;if((!w||n&&n.toLowerCase()!==u.toLowerCase())&&I(new c.$6(t,n)),w)try{return e.getMessageFormat(w,u,h,i).format(r)}catch(A){return I(new c.X9('Error formatting default message for: "'.concat(m,'", rendering default message verbatim'),n,t,A)),"string"==typeof w?w:m}return m}try{return e.getMessageFormat(C,n,o,(0,s.pi)({formatters:e},i||{})).format(r)}catch(A){I(new c.X9('Error formatting message: "'.concat(m,'", using ').concat(w?"default message":"id"," as fallback."),n,t,A))}if(w)try{return e.getMessageFormat(w,u,h,i).format(r)}catch(A){I(new c.X9('Error formatting the default message for: "'.concat(m,'", rendering message verbatim'),n,t,A))}return"string"==typeof C?C:"string"==typeof w?w:m},I=t(32428),f=["style","currency","currencyDisplay","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","currencyDisplay","currencySign","notation","signDisplay","unit","unitDisplay","numberingSystem"];function p(A,e,t){var r=A.locale,i=A.formats,n=A.onError;void 0===t&&(t={});var o=t.format,s=o&&(0,I.TB)(i,"number",o,n)||{};return e(r,(0,I.L6)(t,f,s))}function d(A,e,t,r){void 0===r&&(r={});try{return p(A,e,r).format(t)}catch(e){A.onError(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting number.",e))}return String(t)}function w(A,e,t,r){void 0===r&&(r={});try{return p(A,e,r).formatToParts(t)}catch(e){A.onError(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting number.",e))}return[]}var m=t(56313),C=["numeric","style"];function Q(A,e,t,r,i){void 0===i&&(i={}),r||(r="second"),Intl.RelativeTimeFormat||A.onError(new m.u_('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n',m.jK.MISSING_INTL_API));try{return function(A,e,t){var r=A.locale,i=A.formats,n=A.onError;void 0===t&&(t={});var o=t.format,s=!!o&&(0,I.TB)(i,"relative",o,n)||{};return e(r,(0,I.L6)(t,C,s))}(A,e,i).format(t,r)}catch(e){A.onError(new c.Qe("Error formatting relative time.",A.locale,e))}return String(t)}var R=["formatMatcher","timeZone","hour12","weekday","era","year","month","day","hour","minute","second","timeZoneName","hourCycle","dateStyle","timeStyle","calendar","numberingSystem","fractionalSecondDigits"];function y(A,e,t,r){var i=A.locale,n=A.formats,o=A.onError,a=A.timeZone;void 0===r&&(r={});var l=r.format,c=(0,s.pi)((0,s.pi)({},a&&{timeZone:a}),l&&(0,I.TB)(n,e,l,o)),g=(0,I.L6)(r,R,c);return"time"!==e||g.hour||g.minute||g.second||g.timeStyle||g.dateStyle||(g=(0,s.pi)((0,s.pi)({},g),{hour:"numeric",minute:"numeric"})),t(i,g)}function U(A,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i=t[0],n=t[1],o=void 0===n?{}:n,s="string"==typeof i?new Date(i||0):i;try{return y(A,"date",e,o).format(s)}catch(e){A.onError(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting date.",e))}return String(s)}function v(A,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i=t[0],n=t[1],o=void 0===n?{}:n,s="string"==typeof i?new Date(i||0):i;try{return y(A,"time",e,o).format(s)}catch(e){A.onError(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting time.",e))}return String(s)}function M(A,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i=t[0],n=t[1],o=t[2],s=void 0===o?{}:o,a=A.timeZone,l=A.locale,g=A.onError,u=(0,I.L6)(s,R,a?{timeZone:a}:{});try{return e(l,u).formatRange(i,n)}catch(A){g(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting date time range.",A))}return String(i)}function T(A,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i=t[0],n=t[1],o=void 0===n?{}:n,s="string"==typeof i?new Date(i||0):i;try{return y(A,"date",e,o).formatToParts(s)}catch(e){A.onError(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting date.",e))}return[]}function b(A,e){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i=t[0],n=t[1],o=void 0===n?{}:n,s="string"==typeof i?new Date(i||0):i;try{return y(A,"time",e,o).formatToParts(s)}catch(e){A.onError(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting time.",e))}return[]}var S=["type"];function F(A,e,t,r){var i=A.locale,n=A.onError;void 0===r&&(r={}),Intl.PluralRules||n(new m.u_('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',m.jK.MISSING_INTL_API));var o=(0,I.L6)(r,S);try{return e(i,o).select(t)}catch(A){n(new c.Qe("Error formatting plural.",i,A))}return"other"}var D=["type","style"],N=Date.now();function G(A,e,t,r){void 0===r&&(r={});var i=V(A,e,t,r).reduce((function(A,e){var t=e.value;return"string"!=typeof t?A.push(t):"string"==typeof A[A.length-1]?A[A.length-1]+=t:A.push(t),A}),[]);return 1===i.length?i[0]:0===i.length?"":i}function V(A,e,t,r){var i=A.locale,n=A.onError;void 0===r&&(r={}),Intl.ListFormat||n(new m.u_('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n',m.jK.MISSING_INTL_API));var o=(0,I.L6)(r,D);try{var a={},l=t.map((function(A,e){if("object"==typeof A){var t=function(A){return"".concat(N,"_").concat(A,"_").concat(N)}(e);return a[t]=A,t}return String(A)}));return e(i,o).formatToParts(l).map((function(A){return"literal"===A.type?A:(0,s.pi)((0,s.pi)({},A),{value:a[A.value]||A.value})}))}catch(A){n(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting list.",A))}return t}var k=["style","type","fallback","languageDisplay"];function O(A,e,t,r){var i=A.locale,n=A.onError;Intl.DisplayNames||n(new m.u_('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n',m.jK.MISSING_INTL_API));var o=(0,I.L6)(r,k);try{return e(i,o).of(t)}catch(A){n(new c.Rw(c.bc.FORMAT_ERROR,"Error formatting display name.",A))}}var x=t(30087);function Z(A){return{locale:A.locale,timeZone:A.timeZone,fallbackOnEmptyString:A.fallbackOnEmptyString,formats:A.formats,textComponent:A.textComponent,messages:A.messages,defaultLocale:A.defaultLocale,defaultFormats:A.defaultFormats,onError:A.onError,onWarn:A.onWarn,wrapRichTextChunksInFragment:A.wrapRichTextChunksInFragment,defaultRichTextElements:A.defaultRichTextElements}}function J(A){return A?Object.keys(A).reduce((function(e,t){var r=A[t];return e[t]=(0,x.Gt)(r)?(0,o.dt)(r):r,e}),{}):A}var P=function(A,e,t,n){for(var o=[],s=4;s<arguments.length;s++)o[s-4]=arguments[s];var a=J(n),l=B.apply(void 0,(0,r.ev)([A,e,t,a],o,!1));return Array.isArray(l)?i.Children.toArray(l):l},Y=function(A,e){var t=A.defaultRichTextElements,i=(0,r._T)(A,["defaultRichTextElements"]),n=J(t),a=function(A,e){var t=(0,I.ax)(e),r=(0,s.pi)((0,s.pi)({},I.Z0),A),i=r.locale,n=r.defaultLocale,o=r.onError;return i?!Intl.NumberFormat.supportedLocalesOf(i).length&&o?o(new c.gb('Missing locale data for locale: "'.concat(i,'" in Intl.NumberFormat. Using default locale: "').concat(n,'" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details'))):!Intl.DateTimeFormat.supportedLocalesOf(i).length&&o&&o(new c.gb('Missing locale data for locale: "'.concat(i,'" in Intl.DateTimeFormat. Using default locale: "').concat(n,'" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details'))):(o&&o(new c.OV('"locale" was not configured, using "'.concat(n,'" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details'))),r.locale=r.defaultLocale||"en"),function(A){var e;A.onWarn&&A.defaultRichTextElements&&"string"==typeof((e=A.messages||{})?e[Object.keys(e)[0]]:void 0)&&A.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution')}(r),(0,s.pi)((0,s.pi)({},r),{formatters:t,formatNumber:d.bind(null,r,t.getNumberFormat),formatNumberToParts:w.bind(null,r,t.getNumberFormat),formatRelativeTime:Q.bind(null,r,t.getRelativeTimeFormat),formatDate:U.bind(null,r,t.getDateTimeFormat),formatDateToParts:T.bind(null,r,t.getDateTimeFormat),formatTime:v.bind(null,r,t.getDateTimeFormat),formatDateTimeRange:M.bind(null,r,t.getDateTimeFormat),formatTimeToParts:b.bind(null,r,t.getDateTimeFormat),formatPlural:F.bind(null,r,t.getPluralRules),formatMessage:B.bind(null,r,t),$t:B.bind(null,r,t),formatList:G.bind(null,r,t.getListFormat),formatListToParts:V.bind(null,r,t.getListFormat),formatDisplayName:O.bind(null,r,t.getDisplayNames)})}((0,r.pi)((0,r.pi)((0,r.pi)({},o.Z0),i),{defaultRichTextElements:n}),e),l={locale:a.locale,timeZone:a.timeZone,fallbackOnEmptyString:a.fallbackOnEmptyString,formats:a.formats,defaultLocale:a.defaultLocale,defaultFormats:a.defaultFormats,messages:a.messages,onError:a.onError,defaultRichTextElements:n};return(0,r.pi)((0,r.pi)({},a),{formatMessage:P.bind(null,l,a.formatters),$t:P.bind(null,l,a.formatters)})};const H=function(A){function e(){var e=null!==A&&A.apply(this,arguments)||this;return e.cache=(0,I.Sn)(),e.state={cache:e.cache,intl:Y(Z(e.props),e.cache),prevConfig:Z(e.props)},e}return(0,r.ZT)(e,A),e.getDerivedStateFromProps=function(A,e){var t=e.prevConfig,r=e.cache,i=Z(A);return(0,o.wU)(t,i)?null:{intl:Y(i,r),prevConfig:i}},e.prototype.render=function(){return(0,o.lq)(this.state.intl),i.createElement(n.zt,{value:this.state.intl},this.props.children)},e.displayName="IntlProvider",e.defaultProps=o.Z0,e}(i.PureComponent)},87576:(A,e,t)=>{"use strict";t.d(e,{Z0:()=>a,dt:()=>l,lq:()=>s,wU:()=>c});var r=t(27221),i=t(2784),n=t(73731),o=t(32428);function s(A){(0,n.kG)(A,"[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry.")}var a=(0,r.pi)((0,r.pi)({},o.Z0),{textComponent:i.Fragment});function l(A){return function(e){return A(i.Children.toArray(e))}}function c(A,e){if(A===e)return!0;if(!A||!e)return!1;var t=Object.keys(A),r=Object.keys(e),i=t.length;if(r.length!==i)return!1;for(var n=0;n<i;n++){var o=t[n];if(A[o]!==e[o]||!Object.prototype.hasOwnProperty.call(e,o))return!1}return!0}},27221:(A,e,t)=>{"use strict";t.d(e,{ZT:()=>i,_T:()=>o,ev:()=>s,pi:()=>n});var r=function(A,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(A,e){A.__proto__=e}||function(A,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(A[t]=e[t])},r(A,e)};function i(A,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function t(){this.constructor=A}r(A,e),A.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}var n=function(){return n=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},n.apply(this,arguments)};function o(A,e){var t={};for(var r in A)Object.prototype.hasOwnProperty.call(A,r)&&e.indexOf(r)<0&&(t[r]=A[r]);if(null!=A&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(A);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(A,r[i])&&(t[r[i]]=A[r[i]])}return t}function s(A,e,t){if(t||2===arguments.length)for(var r,i=0,n=e.length;i<n;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return A.concat(r||Array.prototype.slice.call(e))}Object.create,Object.create},66985:function(A,e,t){var r=t(34406);!function(A,e){"use strict";if(!A.setImmediate){var t,i,n,o,s,a=1,l={},c=!1,g=A.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(A);u=u&&u.setTimeout?u:A,"[object process]"==={}.toString.call(A.process)?t=function(A){r.nextTick((function(){E(A)}))}:function(){if(A.postMessage&&!A.importScripts){var e=!0,t=A.onmessage;return A.onmessage=function(){e=!1},A.postMessage("","*"),A.onmessage=t,e}}()?(o="setImmediate$"+Math.random()+"$",s=function(e){e.source===A&&"string"==typeof e.data&&0===e.data.indexOf(o)&&E(+e.data.slice(o.length))},A.addEventListener?A.addEventListener("message",s,!1):A.attachEvent("onmessage",s),t=function(e){A.postMessage(o+e,"*")}):A.MessageChannel?((n=new MessageChannel).port1.onmessage=function(A){E(A.data)},t=function(A){n.port2.postMessage(A)}):g&&"onreadystatechange"in g.createElement("script")?(i=g.documentElement,t=function(A){var e=g.createElement("script");e.onreadystatechange=function(){E(A),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):t=function(A){setTimeout(E,0,A)},u.setImmediate=function(A){"function"!=typeof A&&(A=new Function(""+A));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var i={callback:A,args:e};return l[a]=i,t(a),a++},u.clearImmediate=h}function h(A){delete l[A]}function E(A){if(c)setTimeout(E,0,A);else{var e=l[A];if(e){c=!0;try{!function(A){var e=A.callback,t=A.args;switch(t.length){case 0:e();break;case 1:e(t[0]);break;case 2:e(t[0],t[1]);break;case 3:e(t[0],t[1],t[2]);break;default:e.apply(undefined,t)}}(e)}finally{h(A),c=!1}}}}}("undefined"==typeof self?void 0===t.g?this:t.g:self)},26047:(A,e,t)=>{"use strict";var r=t(30905),i=Array.prototype.concat,n=Array.prototype.slice,o=A.exports=function(A){for(var e=[],t=0,o=A.length;t<o;t++){var s=A[t];r(s)?e=i.call(e,n.call(s)):e.push(s)}return e};o.wrap=function(A){return function(){return A(o(arguments))}}},30905:A=>{A.exports=function(A){return!(!A||"string"==typeof A)&&(A instanceof Array||Array.isArray(A)||A.length>=0&&(A.splice instanceof Function||Object.getOwnPropertyDescriptor(A,A.length-1)&&"String"!==A.constructor.name))}},7632:(A,e,t)=>{"use strict";var r=t(46062),i=t.n(r),n=t(44036),o=t.n(n),s=t(43678),a=t.n(s),l=t(17892),c=t.n(l),g=t(11173),u=t.n(g),h=t(42464),E=t.n(h),B=t(27303),I={};I.styleTagTransform=E(),I.setAttributes=c(),I.insert=a().bind(null,"head"),I.domAPI=o(),I.insertStyleElement=u(),i()(B.Z,I),B.Z&&B.Z.locals&&B.Z.locals},46062:A=>{"use strict";var e=[];function t(A){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===A){t=r;break}return t}function r(A,r){for(var n={},o=[],s=0;s<A.length;s++){var a=A[s],l=r.base?a[0]+r.base:a[0],c=n[l]||0,g="".concat(l," ").concat(c);n[l]=c+1;var u=t(g),h={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==u)e[u].references++,e[u].updater(h);else{var E=i(h,r);r.byIndex=s,e.splice(s,0,{identifier:g,updater:E,references:1})}o.push(g)}return o}function i(A,e){var t=e.domAPI(e);return t.update(A),function(e){if(e){if(e.css===A.css&&e.media===A.media&&e.sourceMap===A.sourceMap&&e.supports===A.supports&&e.layer===A.layer)return;t.update(A=e)}else t.remove()}}A.exports=function(A,i){var n=r(A=A||[],i=i||{});return function(A){A=A||[];for(var o=0;o<n.length;o++){var s=t(n[o]);e[s].references--}for(var a=r(A,i),l=0;l<n.length;l++){var c=t(n[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}n=a}}},43678:A=>{"use strict";var e={};A.exports=function(A,t){var r=function(A){if(void 0===e[A]){var t=document.querySelector(A);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(A){t=null}e[A]=t}return e[A]}(A);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},11173:A=>{"use strict";A.exports=function(A){var e=document.createElement("style");return A.setAttributes(e,A.attributes),A.insert(e,A.options),e}},17892:(A,e,t)=>{"use strict";A.exports=function(A){var e=t.nc;e&&A.setAttribute("nonce",e)}},44036:A=>{"use strict";A.exports=function(A){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=A.insertStyleElement(A);return{update:function(t){!function(A,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var n=t.sourceMap;n&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),e.styleTagTransform(r,A,e.options)}(e,A,t)},remove:function(){!function(A){if(null===A.parentNode)return!1;A.parentNode.removeChild(A)}(e)}}}},42464:A=>{"use strict";A.exports=function(A,e){if(e.styleSheet)e.styleSheet.cssText=A;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(A))}}},42705:A=>{window,A.exports=function(A){var e={};function t(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return A[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=A,t.c=e,t.d=function(A,e,r){t.o(A,e)||Object.defineProperty(A,e,{enumerable:!0,get:r})},t.r=function(A){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},t.t=function(A,e){if(1&e&&(A=t(A)),8&e)return A;if(4&e&&"object"==typeof A&&A&&A.__esModule)return A;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:A}),2&e&&"string"!=typeof A)for(var i in A)t.d(r,i,function(e){return A[e]}.bind(null,i));return r},t.n=function(A){var e=A&&A.__esModule?function(){return A.default}:function(){return A};return t.d(e,"a",e),e},t.o=function(A,e){return Object.prototype.hasOwnProperty.call(A,e)},t.p="",t(t.s=11)}([function(A,e,t){"use strict";const r=t(12);A.exports=function(A,...e){if(!A){if(1===e.length&&e[0]instanceof Error)throw e[0];throw new r(e)}}},function(A,e,t){"use strict";const r=t(0),i=t(12),n=t(29);let o,s;const a={isoDate:/^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/};e.version=n.version,e.defaults={abortEarly:!0,allowUnknown:!1,artifacts:!1,cache:!0,context:null,convert:!0,dateFormat:"iso",errors:{escapeHtml:!1,label:"path",language:null,render:!0,stack:!1,wrap:{label:'"',array:"[]"}},externals:!0,messages:{},nonEnumerables:!1,noDefaults:!1,presence:"optional",skipFunctions:!1,stripUnknown:!1,warnings:!1},e.symbols={any:Symbol.for("@hapi/joi/schema"),arraySingle:Symbol("arraySingle"),deepDefault:Symbol("deepDefault"),errors:Symbol("errors"),literal:Symbol("literal"),override:Symbol("override"),parent:Symbol("parent"),prefs:Symbol("prefs"),ref:Symbol("ref"),template:Symbol("template"),values:Symbol("values")},e.assertOptions=function(A,e,t="Options"){r(A&&"object"==typeof A&&!Array.isArray(A),"Options must be of type object");const i=Object.keys(A).filter((A=>!e.includes(A)));r(0===i.length,"".concat(t," contain unknown keys: ").concat(i))},e.checkPreferences=function(A){s=s||t(16);const e=s.preferences.validate(A);if(e.error)throw new i([e.error.details[0].message])},e.compare=function(A,e,t){switch(t){case"=":return A===e;case">":return A>e;case"<":return A<e;case">=":return A>=e;case"<=":return A<=e}},e.default=function(A,e){return void 0===A?e:A},e.isIsoDate=function(A){return a.isoDate.test(A)},e.isNumber=function(A){return"number"==typeof A&&!isNaN(A)},e.isResolvable=function(A){return!!A&&(A[e.symbols.ref]||A[e.symbols.template])},e.isSchema=function(A,t={}){const i=A&&A[e.symbols.any];return!!i&&(r(t.legacy||i.version===e.version,"Cannot mix different versions of joi schemas"),!0)},e.isValues=function(A){return A[e.symbols.values]},e.limit=function(A){return Number.isSafeInteger(A)&&A>=0},e.preferences=function(A,r){o=o||t(9),A=A||{},r=r||{};const i=Object.assign({},A,r);return r.errors&&A.errors&&(i.errors=Object.assign({},A.errors,r.errors),i.errors.wrap=Object.assign({},A.errors.wrap,r.errors.wrap)),r.messages&&(i.messages=o.compile(r.messages,A.messages)),delete i[e.symbols.prefs],i},e.tryWithPath=function(A,e,t={}){try{return A()}catch(A){throw void 0!==A.path?A.path=e+"."+A.path:A.path=e,t.append&&(A.message="".concat(A.message," (").concat(A.path,")")),A}},e.validateArg=function(A,t,{assert:r,message:i}){if(e.isSchema(r)){const e=r.validate(A);if(!e.error)return;return e.error.message}if(!r(A))return t?"".concat(t," ").concat(i):i},e.verifyFlat=function(A,e){for(const t of A)r(!Array.isArray(t),"Method no longer accepts array arguments:",e)}},function(A,e,t){"use strict";const r=t(6),i=t(13),n=t(14),o={needsProtoHack:new Set([i.set,i.map,i.weakSet,i.weakMap])};A.exports=o.clone=function(A,e={},t=null){if("object"!=typeof A||null===A)return A;let r=o.clone,s=t;if(e.shallow){if(!0!==e.shallow)return o.cloneWithShallow(A,e);r=A=>A}else if(s){const e=s.get(A);if(e)return e}else s=new Map;const a=i.getInternalProto(A);if(a===i.buffer)return!1;if(a===i.date)return new Date(A.getTime());if(a===i.regex)return new RegExp(A);const l=o.base(A,a,e);if(l===A)return A;if(s&&s.set(A,l),a===i.set)for(const t of A)l.add(r(t,e,s));else if(a===i.map)for(const[t,i]of A)l.set(t,r(i,e,s));const c=n.keys(A,e);for(const t of c){if("__proto__"===t)continue;if(a===i.array&&"length"===t){l.length=A.length;continue}const n=Object.getOwnPropertyDescriptor(A,t);n?n.get||n.set?Object.defineProperty(l,t,n):n.enumerable?l[t]=r(A[t],e,s):Object.defineProperty(l,t,{enumerable:!1,writable:!0,configurable:!0,value:r(A[t],e,s)}):Object.defineProperty(l,t,{enumerable:!0,writable:!0,configurable:!0,value:r(A[t],e,s)})}return l},o.cloneWithShallow=function(A,e){const t=e.shallow;(e=Object.assign({},e)).shallow=!1;const i=new Map;for(const e of t){const t=r(A,e);"object"!=typeof t&&"function"!=typeof t||i.set(t,t)}return o.clone(A,e,i)},o.base=function(A,e,t){if(!1===t.prototype)return o.needsProtoHack.has(e)?new e.constructor:e===i.array?[]:{};const r=Object.getPrototypeOf(A);if(r&&r.isImmutable)return A;if(e===i.array){const A=[];return r!==e&&Object.setPrototypeOf(A,r),A}if(o.needsProtoHack.has(e)){const A=new r.constructor;return r!==e&&Object.setPrototypeOf(A,r),A}return Object.create(r)}},function(A,e,t){"use strict";const r=t(0),i=t(34),n=t(1),o=t(9);A.exports=i.extend({type:"any",flags:{only:{default:!1}},terms:{alterations:{init:null},examples:{init:null},externals:{init:null},metas:{init:[]},notes:{init:[]},shared:{init:null},tags:{init:[]},whens:{init:null}},rules:{custom:{method(A,e){return r("function"==typeof A,"Method must be a function"),r(void 0===e||e&&"string"==typeof e,"Description must be a non-empty string"),this.$_addRule({name:"custom",args:{method:A,description:e}})},validate(A,e,{method:t}){try{return t(A,e)}catch(A){return e.error("any.custom",{error:A})}},args:["method","description"],multi:!0},messages:{method(A){return this.prefs({messages:A})}},shared:{method(A){r(n.isSchema(A)&&A._flags.id,"Schema must be a schema with an id");const e=this.clone();return e.$_terms.shared=e.$_terms.shared||[],e.$_terms.shared.push(A),e.$_mutateRegister(A),e}},warning:{method(A,e){return r(A&&"string"==typeof A,"Invalid warning code"),this.$_addRule({name:"warning",args:{code:A,local:e},warn:!0})},validate:(A,e,{code:t,local:r})=>e.error(t,r),args:["code","local"],multi:!0}},modifiers:{keep(A,e=!0){A.keep=e},message(A,e){A.message=o.compile(e)},warn(A,e=!0){A.warn=e}},manifest:{build(A,e){for(const t in e){const r=e[t];if(["examples","externals","metas","notes","tags"].includes(t))for(const e of r)A=A[t.slice(0,-1)](e);else if("alterations"!==t)if("whens"!==t){if("shared"===t)for(const e of r)A=A.shared(e)}else for(const e of r){const{ref:t,is:r,not:i,then:n,otherwise:o,concat:s}=e;A=s?A.concat(s):t?A.when(t,{is:r,not:i,then:n,otherwise:o,switch:e.switch,break:e.break}):A.when(r,{then:n,otherwise:o,break:e.break})}else{const e={};for(const{target:A,adjuster:t}of r)e[A]=t;A=A.alter(e)}}return A}},messages:{"any.custom":"{{#label}} failed custom validation because {{#error.message}}","any.default":"{{#label}} threw an error when running default method","any.failover":"{{#label}} threw an error when running failover method","any.invalid":"{{#label}} contains an invalid value","any.only":'{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',"any.ref":"{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}","any.required":"{{#label}} is required","any.unknown":"{{#label}} is not allowed"}})},function(A,e,t){"use strict";const r=t(32),i=t(1),n=t(7);e.Report=class{constructor(A,t,r,i,n,o,s){if(this.code=A,this.flags=i,this.messages=n,this.path=o.path,this.prefs=s,this.state=o,this.value=t,this.message=null,this.template=null,this.local=r||{},this.local.label=e.label(this.flags,this.state,this.prefs,this.messages),void 0===this.value||this.local.hasOwnProperty("value")||(this.local.value=this.value),this.path.length){const A=this.path[this.path.length-1];"object"!=typeof A&&(this.local.key=A)}}_setTemplate(A){if(this.template=A,!this.flags.label&&0===this.path.length){const A=this._template(this.template,"root");A&&(this.local.label=A)}}toString(){if(this.message)return this.message;const A=this.code;if(!this.prefs.errors.render)return this.code;const e=this._template(this.template)||this._template(this.prefs.messages)||this._template(this.messages);return void 0===e?'Error code "'.concat(A,'" is not defined, your custom type is missing the correct messages definition'):(this.message=e.render(this.value,this.state,this.prefs,this.local,{errors:this.prefs.errors,messages:[this.prefs.messages,this.messages]}),this.prefs.errors.label||(this.message=this.message.replace(/^"" /,"").trim()),this.message)}_template(A,t){return e.template(this.value,A,t||this.code,this.state,this.prefs)}},e.path=function(A){let e="";for(const t of A)"object"!=typeof t&&("string"==typeof t?(e&&(e+="."),e+=t):e+="[".concat(t,"]"));return e},e.template=function(A,e,t,r,o){if(!e)return;if(n.isTemplate(e))return"root"!==t?e:null;let s=o.errors.language;return i.isResolvable(s)&&(s=s.resolve(A,r,o)),s&&e[s]&&void 0!==e[s][t]?e[s][t]:e[t]},e.label=function(A,t,r,i){if(A.label)return A.label;if(!r.errors.label)return"";let n=t.path;return"key"===r.errors.label&&t.path.length>1&&(n=t.path.slice(-1)),e.path(n)||e.template(null,r.messages,"root",t,r)||i&&e.template(null,i,"root",t,r)||"value"},e.process=function(A,t,r){if(!A)return null;const{override:i,message:n,details:o}=e.details(A);if(i)return i;if(r.errors.stack)return new e.ValidationError(n,o,t);const s=Error.stackTraceLimit;Error.stackTraceLimit=0;const a=new e.ValidationError(n,o,t);return Error.stackTraceLimit=s,a},e.details=function(A,e={}){let t=[];const r=[];for(const i of A){if(i instanceof Error){if(!1!==e.override)return{override:i};const A=i.toString();t.push(A),r.push({message:A,type:"override",context:{error:i}});continue}const A=i.toString();t.push(A),r.push({message:A,path:i.path.filter((A=>"object"!=typeof A)),type:i.code,context:i.local})}return t.length>1&&(t=[...new Set(t)]),{message:t.join(". "),details:r}},e.ValidationError=class extends Error{constructor(A,e,t){super(A),this._original=t,this.details=e}static isError(A){return A instanceof e.ValidationError}},e.ValidationError.prototype.isJoi=!0,e.ValidationError.prototype.name="ValidationError",e.ValidationError.prototype.annotate=r.error},function(A,e,t){"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(0),s=t(2),a=t(6),l=t(1);let c;const g={symbol:Symbol("ref"),defaults:{adjust:null,in:!1,iterables:null,map:null,separator:".",type:"value"}};e.create=function(A,e={}){o("string"==typeof A,"Invalid reference key:",A),l.assertOptions(e,["adjust","ancestor","in","iterables","map","prefix","render","separator"]),o(!e.prefix||"object"==typeof e.prefix,"options.prefix must be of type object");const t=Object.assign({},g.defaults,e);delete t.prefix;const r=t.separator,i=g.context(A,r,e.prefix);if(t.type=i.type,A=i.key,"value"===t.type)if(i.root&&(o(!r||A[0]!==r,"Cannot specify relative path with root prefix"),t.ancestor="root",A||(A=null)),r&&r===A)A=null,t.ancestor=0;else if(void 0!==t.ancestor)o(!r||!A||A[0]!==r,"Cannot combine prefix with ancestor option");else{const[e,i]=g.ancestor(A,r);i&&""===(A=A.slice(i))&&(A=null),t.ancestor=e}return t.path=r?null===A?[]:A.split(r):[A],new g.Ref(t)},e.in=function(A,t={}){return e.create(A,i(i({},t),{},{in:!0}))},e.isRef=function(A){return!!A&&!!A[l.symbols.ref]},g.Ref=class{constructor(A){o("object"==typeof A,"Invalid reference construction"),l.assertOptions(A,["adjust","ancestor","in","iterables","map","path","render","separator","type","depth","key","root","display"]),o([!1,void 0].includes(A.separator)||"string"==typeof A.separator&&1===A.separator.length,"Invalid separator"),o(!A.adjust||"function"==typeof A.adjust,"options.adjust must be a function"),o(!A.map||Array.isArray(A.map),"options.map must be an array"),o(!A.map||!A.adjust,"Cannot set both map and adjust options"),Object.assign(this,g.defaults,A),o("value"===this.type||void 0===this.ancestor,"Non-value references cannot reference ancestors"),Array.isArray(this.map)&&(this.map=new Map(this.map)),this.depth=this.path.length,this.key=this.path.length?this.path.join(this.separator):null,this.root=this.path[0],this.updateDisplay()}resolve(A,e,t,r,i={}){return o(!this.in||i.in,"Invalid in() reference usage"),"global"===this.type?this._resolve(t.context,e,i):"local"===this.type?this._resolve(r,e,i):this.ancestor?"root"===this.ancestor?this._resolve(e.ancestors[e.ancestors.length-1],e,i):(o(this.ancestor<=e.ancestors.length,"Invalid reference exceeds the schema root:",this.display),this._resolve(e.ancestors[this.ancestor-1],e,i)):this._resolve(A,e,i)}_resolve(A,e,t){let r;if("value"===this.type&&e.mainstay.shadow&&!1!==t.shadow&&(r=e.mainstay.shadow.get(this.absolute(e))),void 0===r&&(r=a(A,this.path,{iterables:this.iterables,functions:!0})),this.adjust&&(r=this.adjust(r)),this.map){const A=this.map.get(r);void 0!==A&&(r=A)}return e.mainstay&&e.mainstay.tracer.resolve(e,this,r),r}toString(){return this.display}absolute(A){return[...A.path.slice(0,-this.ancestor),...this.path]}clone(){return new g.Ref(this)}describe(){const A={path:this.path};"value"!==this.type&&(A.type=this.type),"."!==this.separator&&(A.separator=this.separator),"value"===this.type&&1!==this.ancestor&&(A.ancestor=this.ancestor),this.map&&(A.map=[...this.map]);for(const e of["adjust","iterables","render"])null!==this[e]&&void 0!==this[e]&&(A[e]=this[e]);return!1!==this.in&&(A.in=!0),{ref:A}}updateDisplay(){const A=null!==this.key?this.key:"";if("value"!==this.type)return void(this.display="ref:".concat(this.type,":").concat(A));if(!this.separator)return void(this.display="ref:".concat(A));if(!this.ancestor)return void(this.display="ref:".concat(this.separator).concat(A));if("root"===this.ancestor)return void(this.display="ref:root:".concat(A));if(1===this.ancestor)return void(this.display="ref:".concat(A||".."));const e=new Array(this.ancestor+1).fill(this.separator).join("");this.display="ref:".concat(e).concat(A||"")}},g.Ref.prototype[l.symbols.ref]=!0,e.build=function(A){return"value"===(A=Object.assign({},g.defaults,A)).type&&void 0===A.ancestor&&(A.ancestor=1),new g.Ref(A)},g.context=function(A,e,t={}){if(A=A.trim(),t){const r=void 0===t.global?"$":t.global;if(r!==e&&A.startsWith(r))return{key:A.slice(r.length),type:"global"};const i=void 0===t.local?"#":t.local;if(i!==e&&A.startsWith(i))return{key:A.slice(i.length),type:"local"};const n=void 0===t.root?"/":t.root;if(n!==e&&A.startsWith(n))return{key:A.slice(n.length),type:"value",root:!0}}return{key:A,type:"value"}},g.ancestor=function(A,e){if(!e)return[1,0];if(A[0]!==e)return[1,0];if(A[1]!==e)return[0,1];let t=2;for(;A[t]===e;)++t;return[t-1,t]},e.toSibling=0,e.toParent=1,e.Manager=class{constructor(){this.refs=[]}register(A,r){if(A)if(r=void 0===r?e.toParent:r,Array.isArray(A))for(const e of A)this.register(e,r);else if(l.isSchema(A))for(const e of A._refs.refs)e.ancestor-r>=0&&this.refs.push({ancestor:e.ancestor-r,root:e.root});else e.isRef(A)&&"value"===A.type&&A.ancestor-r>=0&&this.refs.push({ancestor:A.ancestor-r,root:A.root}),c=c||t(7),c.isTemplate(A)&&this.register(A.refs(),r)}get length(){return this.refs.length}clone(){const A=new e.Manager;return A.refs=s(this.refs),A}reset(){this.refs=[]}roots(){return this.refs.filter((A=>!A.ancestor)).map((A=>A.root))}}},function(A,e,t){"use strict";const r=t(0),i={};A.exports=function(A,e,t){if(!1===e||null==e)return A;"string"==typeof(t=t||{})&&(t={separator:t});const n=Array.isArray(e);r(!n||!t.separator,"Separator option no valid for array-based chain");const o=n?e:e.split(t.separator||".");let s=A;for(let A=0;A<o.length;++A){let n=o[A];const a=t.iterables&&i.iterables(s);if(Array.isArray(s)||"set"===a){const A=Number(n);Number.isInteger(A)&&(n=A<0?s.length+A:A)}if(!s||"function"==typeof s&&!1===t.functions||!a&&void 0===s[n]){r(!t.strict||A+1===o.length,"Missing segment",n,"in reach path ",e),r("object"==typeof s||!0===t.functions||"function"!=typeof s,"Invalid segment",n,"in reach path ",e),s=t.default;break}s=a?"set"===a?[...s][n]:s.get(n):s[n]}return s},i.iterables=function(A){return A instanceof Set?"set":A instanceof Map?"map":void 0}},function(A,e,t){"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const n=t(0),o=t(2),s=t(30),a=t(31),l=t(1),c=t(4),g=t(5),u={symbol:Symbol("template"),opens:new Array(1e3).join("\0"),closes:new Array(1e3).join(""),dateFormat:{date:Date.prototype.toDateString,iso:Date.prototype.toISOString,string:Date.prototype.toString,time:Date.prototype.toTimeString,utc:Date.prototype.toUTCString}};A.exports=u.Template=class{constructor(A,e){n("string"==typeof A,"Template source must be a string"),n(!A.includes("\0")&&!A.includes(""),"Template source cannot contain reserved control characters"),this.source=A,this.rendered=A,this._template=null,this._settings=o(e),this._parse()}_parse(){if(!this.source.includes("{"))return;const A=u.encode(this.source),e=u.split(A);let t=!1;const r=[],i=e.shift();i&&r.push(i);for(const A of e){const e="{"!==A[0],i=e?"}":"}}",n=A.indexOf(i);if(-1===n||"{"===A[1]){r.push("{".concat(u.decode(A)));continue}let o=A.slice(e?0:1,n);const s=":"===o[0];s&&(o=o.slice(1));const a=this._ref(u.decode(o),{raw:e,wrapped:s});r.push(a),"string"!=typeof a&&(t=!0);const l=A.slice(n+i.length);l&&r.push(u.decode(l))}t?this._template=r:this.rendered=r.join("")}static date(A,e){return u.dateFormat[e.dateFormat].call(A)}describe(A={}){if(!this._settings&&A.compact)return this.source;const e={template:this.source};return this._settings&&(e.options=this._settings),e}static build(A){return new u.Template(A.template,A.options)}isDynamic(){return!!this._template}static isTemplate(A){return!!A&&!!A[l.symbols.template]}refs(){if(!this._template)return;const A=[];for(const e of this._template)"string"!=typeof e&&A.push(...e.refs);return A}resolve(A,e,t,r){return this._template&&1===this._template.length?this._part(this._template[0],A,e,t,r,{}):this.render(A,e,t,r)}_part(A,...e){return A.ref?A.ref.resolve(...e):A.formula.evaluate(e)}render(A,e,t,r,i={}){if(!this.isDynamic())return this.rendered;const n=[];for(const o of this._template)if("string"==typeof o)n.push(o);else{const a=this._part(o,A,e,t,r,i),l=u.stringify(a,A,e,t,r,i);if(void 0!==l){const A=o.raw||!1===(i.errors&&i.errors.escapeHtml)?l:s(l);n.push(u.wrap(A,o.wrapped&&t.errors.wrap.label))}}return n.join("")}_ref(A,{raw:e,wrapped:t}){const r=[],i=A=>{const e=g.create(A,this._settings);return r.push(e),A=>e.resolve(...A)};try{var n=new a.Parser(A,{reference:i,functions:u.functions,constants:u.constants})}catch(e){throw e.message='Invalid template variable "'.concat(A,'" fails due to: ').concat(e.message),e}if(n.single){if("reference"===n.single.type){const A=r[0];return{ref:A,raw:e,refs:r,wrapped:t||"local"===A.type&&"label"===A.key}}return u.stringify(n.single.value)}return{formula:n,raw:e,refs:r}}toString(){return this.source}},u.Template.prototype[l.symbols.template]=!0,u.Template.prototype.isImmutable=!0,u.encode=function(A){return A.replace(/\\(\{+)/g,((A,e)=>u.opens.slice(0,e.length))).replace(/\\(\}+)/g,((A,e)=>u.closes.slice(0,e.length)))},u.decode=function(A){return A.replace(/\u0000/g,"{").replace(/\u0001/g,"}")},u.split=function(A){const e=[];let t="";for(let r=0;r<A.length;++r){const i=A[r];if("{"===i){let i="";for(;r+1<A.length&&"{"===A[r+1];)i+="{",++r;e.push(t),t=i}else t+=i}return e.push(t),e},u.wrap=function(A,e){return e?1===e.length?"".concat(e).concat(A).concat(e):"".concat(e[0]).concat(A).concat(e[1]):A},u.stringify=function(A,e,t,n,o,s){const a=typeof A;let l=!1;if(g.isRef(A)&&A.render&&(l=A.in,A=A.resolve(e,t,n,o,function(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}({in:A.in},s))),null===A)return"null";if("string"===a)return A;if("number"===a||"function"===a||"symbol"===a)return A.toString();if("object"!==a)return JSON.stringify(A);if(A instanceof Date)return u.Template.date(A,n);if(A instanceof Map){const e=[];for(const[t,r]of A.entries())e.push("".concat(t.toString()," -> ").concat(r.toString()));A=e}if(!Array.isArray(A))return A.toString();let c="";for(const r of A)c=c+(c.length?", ":"")+u.stringify(r,e,t,n,o,s);return l?c:u.wrap(c,n.errors.wrap.array)},u.constants={true:!0,false:!1,null:null,second:1e3,minute:6e4,hour:36e5,day:864e5},u.functions={if:(A,e,t)=>A?e:t,msg(A){const[e,t,r,i,n]=this,o=n.messages;if(!o)return"";const s=c.template(e,o[0],A,t,r)||c.template(e,o[1],A,t,r);return s?s.render(e,t,r,i,n):""},number:A=>"number"==typeof A?A:"string"==typeof A?parseFloat(A):"boolean"==typeof A?A?1:0:A instanceof Date?A.getTime():null}},function(A,e,t){"use strict";const r=t(0),i=t(1),n=t(5),o={};e.schema=function(A,e,t={}){i.assertOptions(t,["appendPath","override"]);try{return o.schema(A,e,t)}catch(A){throw t.appendPath&&void 0!==A.path&&(A.message="".concat(A.message," (").concat(A.path,")")),A}},o.schema=function(A,e,t){r(void 0!==e,"Invalid undefined schema"),Array.isArray(e)&&(r(e.length,"Invalid empty array schema"),1===e.length&&(e=e[0]));const n=(e,...r)=>!1!==t.override?e.valid(A.override,...r):e.valid(...r);if(o.simple(e))return n(A,e);if("function"==typeof e)return A.custom(e);if(r("object"==typeof e,"Invalid schema content:",typeof e),i.isResolvable(e))return n(A,e);if(i.isSchema(e))return e;if(Array.isArray(e)){for(const t of e)if(!o.simple(t))return A.alternatives().try(...e);return n(A,...e)}return e instanceof RegExp?A.string().regex(e):e instanceof Date?n(A.date(),e):(r(Object.getPrototypeOf(e)===Object.getPrototypeOf({}),"Schema can only contain plain objects"),A.object().keys(e))},e.ref=function(A,e){return n.isRef(A)?A:n.create(A,e)},e.compile=function(A,t,n={}){i.assertOptions(n,["legacy"]);const s=t&&t[i.symbols.any];if(s)return r(n.legacy||s.version===i.version,"Cannot mix different versions of joi schemas:",s.version,i.version),t;if("object"!=typeof t||!n.legacy)return e.schema(A,t,{appendPath:!0});const a=o.walk(t);return a?a.compile(a.root,t):e.schema(A,t,{appendPath:!0})},o.walk=function(A){if("object"!=typeof A)return null;if(Array.isArray(A)){for(const e of A){const A=o.walk(e);if(A)return A}return null}const e=A[i.symbols.any];if(e)return{root:A[e.root],compile:e.compile};r(Object.getPrototypeOf(A)===Object.getPrototypeOf({}),"Schema can only contain plain objects");for(const e in A){const t=o.walk(A[e]);if(t)return t}return null},o.simple=function(A){return null===A||["boolean","string","number"].includes(typeof A)},e.when=function(A,t,s){if(void 0===s&&(r(t&&"object"==typeof t,"Missing options"),s=t,t=n.create(".")),Array.isArray(s)&&(s={switch:s}),i.assertOptions(s,["is","not","then","otherwise","switch","break"]),i.isSchema(t))return r(void 0===s.is,'"is" can not be used with a schema condition'),r(void 0===s.not,'"not" can not be used with a schema condition'),r(void 0===s.switch,'"switch" can not be used with a schema condition'),o.condition(A,{is:t,then:s.then,otherwise:s.otherwise,break:s.break});if(r(n.isRef(t)||"string"==typeof t,"Invalid condition:",t),r(void 0===s.not||void 0===s.is,'Cannot combine "is" with "not"'),void 0===s.switch){let a=s;void 0!==s.not&&(a={is:s.not,then:s.otherwise,otherwise:s.then,break:s.break});let l=void 0!==a.is?A.$_compile(a.is):A.$_root.invalid(null,!1,0,"").required();return r(void 0!==a.then||void 0!==a.otherwise,'options must have at least one of "then", "otherwise", or "switch"'),r(void 0===a.break||void 0===a.then||void 0===a.otherwise,"Cannot specify then, otherwise, and break all together"),void 0===s.is||n.isRef(s.is)||i.isSchema(s.is)||(l=l.required()),o.condition(A,{ref:e.ref(t),is:l,then:a.then,otherwise:a.otherwise,break:a.break})}r(Array.isArray(s.switch),'"switch" must be an array'),r(void 0===s.is,'Cannot combine "switch" with "is"'),r(void 0===s.not,'Cannot combine "switch" with "not"'),r(void 0===s.then,'Cannot combine "switch" with "then"');const a={ref:e.ref(t),switch:[],break:s.break};for(let e=0;e<s.switch.length;++e){const t=s.switch[e],o=e===s.switch.length-1;i.assertOptions(t,o?["is","then","otherwise"]:["is","then"]),r(void 0!==t.is,'Switch statement missing "is"'),r(void 0!==t.then,'Switch statement missing "then"');const l={is:A.$_compile(t.is),then:A.$_compile(t.then)};if(n.isRef(t.is)||i.isSchema(t.is)||(l.is=l.is.required()),o){r(void 0===s.otherwise||void 0===t.otherwise,'Cannot specify "otherwise" inside and outside a "switch"');const e=void 0!==s.otherwise?s.otherwise:t.otherwise;void 0!==e&&(r(void 0===a.break,"Cannot specify both otherwise and break"),l.otherwise=A.$_compile(e))}a.switch.push(l)}return a},o.condition=function(A,e){for(const t of["then","otherwise"])void 0===e[t]?delete e[t]:e[t]=A.$_compile(e[t]);return e}},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(7);e.compile=function(A,e){if("string"==typeof A)return r(!e,"Cannot set single message string"),new n(A);if(n.isTemplate(A))return r(!e,"Cannot set single message template"),A;r("object"==typeof A&&!Array.isArray(A),"Invalid message options"),e=e?i(e):{};for(let t in A){const i=A[t];if("root"===t||n.isTemplate(i)){e[t]=i;continue}if("string"==typeof i){e[t]=new n(i);continue}r("object"==typeof i&&!Array.isArray(i),"Invalid message for",t);const o=t;for(t in e[o]=e[o]||{},i){const A=i[t];"root"===t||n.isTemplate(A)?e[o][t]=A:(r("string"==typeof A,"Invalid message for",t,"in",o),e[o][t]=new n(A))}}return e},e.decompile=function(A){const e={};for(let t in A){const r=A[t];if("root"===t){e[t]=r;continue}if(n.isTemplate(r)){e[t]=r.describe({compact:!0});continue}const i=t;for(t in e[i]={},r){const A=r[t];e[i][t]="root"!==t?A.describe({compact:!0}):A}}return e},e.merge=function(A,t){if(!A)return e.compile(t);if(!t)return A;if("string"==typeof t)return new n(t);if(n.isTemplate(t))return t;const o=i(A);for(let A in t){const e=t[A];if("root"===A||n.isTemplate(e)){o[A]=e;continue}if("string"==typeof e){o[A]=new n(e);continue}r("object"==typeof e&&!Array.isArray(e),"Invalid message for",A);const i=A;for(A in o[i]=o[i]||{},e){const t=e[A];"root"===A||n.isTemplate(t)?o[i][A]=t:(r("string"==typeof t,"Invalid message for",A,"in",i),o[i][A]=new n(t))}}return o}},function(A,e,t){"use strict";const r=t(13),i={mismatched:null};A.exports=function(A,e,t){return t=Object.assign({prototype:!0},t),!!i.isDeepEqual(A,e,t,[])},i.isDeepEqual=function(A,e,t,n){if(A===e)return 0!==A||1/A==1/e;const o=typeof A;if(o!==typeof e)return!1;if(null===A||null===e)return!1;if("function"===o){if(!t.deepFunction||A.toString()!==e.toString())return!1}else if("object"!==o)return A!=A&&e!=e;const s=i.getSharedType(A,e,!!t.prototype);switch(s){case r.buffer:return!1;case r.promise:return A===e;case r.regex:return A.toString()===e.toString();case i.mismatched:return!1}for(let t=n.length-1;t>=0;--t)if(n[t].isSame(A,e))return!0;n.push(new i.SeenEntry(A,e));try{return!!i.isDeepEqualObj(s,A,e,t,n)}finally{n.pop()}},i.getSharedType=function(A,e,t){if(t)return Object.getPrototypeOf(A)!==Object.getPrototypeOf(e)?i.mismatched:r.getInternalProto(A);const n=r.getInternalProto(A);return n!==r.getInternalProto(e)?i.mismatched:n},i.valueOf=function(A){const e=A.valueOf;if(void 0===e)return A;try{return e.call(A)}catch(A){return A}},i.hasOwnEnumerableProperty=function(A,e){return Object.prototype.propertyIsEnumerable.call(A,e)},i.isSetSimpleEqual=function(A,e){for(const t of Set.prototype.values.call(A))if(!Set.prototype.has.call(e,t))return!1;return!0},i.isDeepEqualObj=function(A,e,t,n,o){const{isDeepEqual:s,valueOf:a,hasOwnEnumerableProperty:l}=i,{keys:c,getOwnPropertySymbols:g}=Object;if(A===r.array){if(!n.part){if(e.length!==t.length)return!1;for(let A=0;A<e.length;++A)if(!s(e[A],t[A],n,o))return!1;return!0}for(const A of e)for(const e of t)if(s(A,e,n,o))return!0}else if(A===r.set){if(e.size!==t.size)return!1;if(!i.isSetSimpleEqual(e,t)){const A=new Set(Set.prototype.values.call(t));for(const t of Set.prototype.values.call(e)){if(A.delete(t))continue;let e=!1;for(const r of A)if(s(t,r,n,o)){A.delete(r),e=!0;break}if(!e)return!1}}}else if(A===r.map){if(e.size!==t.size)return!1;for(const[A,r]of Map.prototype.entries.call(e)){if(void 0===r&&!Map.prototype.has.call(t,A))return!1;if(!s(r,Map.prototype.get.call(t,A),n,o))return!1}}else if(A===r.error&&(e.name!==t.name||e.message!==t.message))return!1;const u=a(e),h=a(t);if((e!==u||t!==h)&&!s(u,h,n,o))return!1;const E=c(e);if(!n.part&&E.length!==c(t).length&&!n.skip)return!1;let B=0;for(const A of E)if(n.skip&&n.skip.includes(A))void 0===t[A]&&++B;else{if(!l(t,A))return!1;if(!s(e[A],t[A],n,o))return!1}if(!n.part&&E.length-B!==c(t).length)return!1;if(!1!==n.symbols){const A=g(e),r=new Set(g(t));for(const i of A){if(!n.skip||!n.skip.includes(i))if(l(e,i)){if(!l(t,i))return!1;if(!s(e[i],t[i],n,o))return!1}else if(l(t,i))return!1;r.delete(i)}for(const A of r)if(l(t,A))return!1}return!0},i.SeenEntry=class{constructor(A,e){this.obj=A,this.ref=e}isSame(A,e){return this.obj===A&&this.ref===e}}},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(15),o=t(1),s=t(8),a=t(4),l=t(17),c=t(18),g=t(5),u=t(7),h=t(19);let E;const B={types:{alternatives:t(33),any:t(3),array:t(39),boolean:t(40),date:t(41),function:t(42),link:t(45),number:t(46),object:t(47),string:t(48),symbol:t(52)},aliases:{alt:"alternatives",bool:"boolean",func:"function"},root:function(){const A={_types:new Set(Object.keys(B.types))};for(const e of A._types)A[e]=function(...A){return r(!A.length||["alternatives","link","object"].includes(e),"The",e,"type does not allow arguments"),B.generate(this,B.types[e],A)};for(const e of["allow","custom","disallow","equal","exist","forbidden","invalid","not","only","optional","options","prefs","preferences","required","strip","valid","when"])A[e]=function(...A){return this.any()[e](...A)};Object.assign(A,B.methods);for(const e in B.aliases){const t=B.aliases[e];A[e]=A[t]}return A.x=A.expression,h.setup&&h.setup(A),A}};B.methods={ValidationError:a.ValidationError,version:o.version,cache:n.provider,assert(A,e,...t){B.assert(A,e,!0,t)},attempt:(A,e,...t)=>B.assert(A,e,!1,t),build(A){return r("function"==typeof c.build,"Manifest functionality disabled"),c.build(this,A)},checkPreferences(A){o.checkPreferences(A)},compile(A,e){return s.compile(this,A,e)},defaults(A){r("function"==typeof A,"modifier must be a function");const e=Object.assign({},this);for(const t of e._types){const i=A(e[t]());r(o.isSchema(i),"modifier must return a valid schema object"),e[t]=function(...A){return B.generate(this,i,A)}}return e},expression:(...A)=>new u(...A),extend(...A){o.verifyFlat(A,"extend"),E=E||t(16),r(A.length,"You need to provide at least one extension"),this.assert(A,E.extensions);const e=Object.assign({},this);e._types=new Set(e._types);for(let t of A){"function"==typeof t&&(t=t(e)),this.assert(t,E.extension);const A=B.expandExtension(t,e);for(const t of A){r(void 0===e[t.type]||e._types.has(t.type),"Cannot override name",t.type);const A=t.base||this.any(),i=l.type(A,t);e._types.add(t.type),e[t.type]=function(...A){return B.generate(this,i,A)}}}return e},isError:a.ValidationError.isError,isExpression:u.isTemplate,isRef:g.isRef,isSchema:o.isSchema,in:(...A)=>g.in(...A),override:o.symbols.override,ref:(...A)=>g.create(...A),types(){const A={};for(const e of this._types)A[e]=this[e]();for(const e in B.aliases)A[e]=this[e]();return A}},B.assert=function(A,e,t,r){const n=r[0]instanceof Error||"string"==typeof r[0]?r[0]:null,s=n?r[1]:r[0],l=e.validate(A,o.preferences({errors:{stack:!0}},s||{}));let c=l.error;if(!c)return l.value;if(n instanceof Error)throw n;const g=t&&"function"==typeof c.annotate?c.annotate():c.message;throw c instanceof a.ValidationError==0&&(c=i(c)),c.message=n?"".concat(n," ").concat(g):g,c},B.generate=function(A,e,t){return r(A,"Must be invoked on a Joi instance."),e.$_root=A,e._definition.args&&t.length?e._definition.args(e,...t):e},B.expandExtension=function(A,e){if("string"==typeof A.type)return[A];const t=[];for(const r of e._types)if(A.type.test(r)){const i=Object.assign({},A);i.type=r,i.base=e[r](),t.push(i)}return t},A.exports=B.root()},function(A,e,t){"use strict";const r=t(28);A.exports=class extends Error{constructor(A){super(A.filter((A=>""!==A)).map((A=>"string"==typeof A?A:A instanceof Error?A.message:r(A))).join(" ")||"Unknown error"),"function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,e.assert)}}},function(A,e,t){"use strict";const r={};e=A.exports={array:Array.prototype,buffer:!1,date:Date.prototype,error:Error.prototype,generic:Object.prototype,map:Map.prototype,promise:Promise.prototype,regex:RegExp.prototype,set:Set.prototype,weakMap:WeakMap.prototype,weakSet:WeakSet.prototype},r.typeMap=new Map([["[object Error]",e.error],["[object Map]",e.map],["[object Promise]",e.promise],["[object Set]",e.set],["[object WeakMap]",e.weakMap],["[object WeakSet]",e.weakSet]]),e.getInternalProto=function(A){if(Array.isArray(A))return e.array;if(A instanceof Date)return e.date;if(A instanceof RegExp)return e.regex;if(A instanceof Error)return e.error;const t=Object.prototype.toString.call(A);return r.typeMap.get(t)||e.generic}},function(A,e,t){"use strict";e.keys=function(A,e={}){return!1!==e.symbols?Reflect.ownKeys(A):Object.getOwnPropertyNames(A)}},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(1),o={max:1e3,supported:new Set(["undefined","boolean","number","string"])};e.provider={provision:A=>new o.Cache(A)},o.Cache=class{constructor(A={}){n.assertOptions(A,["max"]),r(void 0===A.max||A.max&&A.max>0&&isFinite(A.max),"Invalid max cache size"),this._max=A.max||o.max,this._map=new Map,this._list=new o.List}get length(){return this._map.size}set(A,e){if(null!==A&&!o.supported.has(typeof A))return;let t=this._map.get(A);if(t)return t.value=e,void this._list.first(t);t=this._list.unshift({key:A,value:e}),this._map.set(A,t),this._compact()}get(A){const e=this._map.get(A);if(e)return this._list.first(e),i(e.value)}_compact(){if(this._map.size>this._max){const A=this._list.pop();this._map.delete(A.key)}}},o.List=class{constructor(){this.tail=null,this.head=null}unshift(A){return A.next=null,A.prev=this.head,this.head&&(this.head.next=A),this.head=A,this.tail||(this.tail=A),A}first(A){A!==this.head&&(this._remove(A),this.unshift(A))}pop(){return this._remove(this.tail)}_remove(A){const{next:e,prev:t}=A;return e.prev=t,t&&(t.next=e),A===this.tail&&(this.tail=e),A.prev=null,A.next=null,A}}},function(A,e,t){"use strict";const r=t(11),i={};i.wrap=r.string().min(1).max(2).allow(!1),e.preferences=r.object({allowUnknown:r.boolean(),abortEarly:r.boolean(),artifacts:r.boolean(),cache:r.boolean(),context:r.object(),convert:r.boolean(),dateFormat:r.valid("date","iso","string","time","utc"),debug:r.boolean(),errors:{escapeHtml:r.boolean(),label:r.valid("path","key",!1),language:[r.string(),r.object().ref()],render:r.boolean(),stack:r.boolean(),wrap:{label:i.wrap,array:i.wrap}},externals:r.boolean(),messages:r.object(),noDefaults:r.boolean(),nonEnumerables:r.boolean(),presence:r.valid("required","optional","forbidden"),skipFunctions:r.boolean(),stripUnknown:r.object({arrays:r.boolean(),objects:r.boolean()}).or("arrays","objects").allow(!0,!1),warnings:r.boolean()}).strict(),i.nameRx=/^[a-zA-Z0-9]\w*$/,i.rule=r.object({alias:r.array().items(r.string().pattern(i.nameRx)).single(),args:r.array().items(r.string(),r.object({name:r.string().pattern(i.nameRx).required(),ref:r.boolean(),assert:r.alternatives([r.function(),r.object().schema()]).conditional("ref",{is:!0,then:r.required()}),normalize:r.function(),message:r.string().when("assert",{is:r.function(),then:r.required()})})),convert:r.boolean(),manifest:r.boolean(),method:r.function().allow(!1),multi:r.boolean(),validate:r.function()}),e.extension=r.object({type:r.alternatives([r.string(),r.object().regex()]).required(),args:r.function(),cast:r.object().pattern(i.nameRx,r.object({from:r.function().maxArity(1).required(),to:r.function().minArity(1).maxArity(2).required()})),base:r.object().schema().when("type",{is:r.object().regex(),then:r.forbidden()}),coerce:[r.function().maxArity(3),r.object({method:r.function().maxArity(3).required(),from:r.array().items(r.string()).single()})],flags:r.object().pattern(i.nameRx,r.object({setter:r.string(),default:r.any()})),manifest:{build:r.function().arity(2)},messages:[r.object(),r.string()],modifiers:r.object().pattern(i.nameRx,r.function().minArity(1).maxArity(2)),overrides:r.object().pattern(i.nameRx,r.function()),prepare:r.function().maxArity(3),rebuild:r.function().arity(1),rules:r.object().pattern(i.nameRx,i.rule),terms:r.object().pattern(i.nameRx,r.object({init:r.array().allow(null).required(),manifest:r.object().pattern(/.+/,[r.valid("schema","single"),r.object({mapped:r.object({from:r.string().required(),to:r.string().required()}).required()})])})),validate:r.function().maxArity(3)}).strict(),e.extensions=r.array().items(r.object(),r.function().arity(1)).strict(),i.desc={buffer:r.object({buffer:r.string()}),func:r.object({function:r.function().required(),options:{literal:!0}}),override:r.object({override:!0}),ref:r.object({ref:r.object({type:r.valid("value","global","local"),path:r.array().required(),separator:r.string().length(1).allow(!1),ancestor:r.number().min(0).integer().allow("root"),map:r.array().items(r.array().length(2)).min(1),adjust:r.function(),iterables:r.boolean(),in:r.boolean(),render:r.boolean()}).required()}),regex:r.object({regex:r.string().min(3)}),special:r.object({special:r.valid("deep").required()}),template:r.object({template:r.string().required(),options:r.object()}),value:r.object({value:r.alternatives([r.object(),r.array()]).required()})},i.desc.entity=r.alternatives([r.array().items(r.link("...")),r.boolean(),r.function(),r.number(),r.string(),i.desc.buffer,i.desc.func,i.desc.ref,i.desc.regex,i.desc.special,i.desc.template,i.desc.value,r.link("/")]),i.desc.values=r.array().items(null,r.boolean(),r.function(),r.number().allow(1/0,-1/0),r.string().allow(""),r.symbol(),i.desc.buffer,i.desc.func,i.desc.override,i.desc.ref,i.desc.regex,i.desc.template,i.desc.value),i.desc.messages=r.object().pattern(/.+/,[r.string(),i.desc.template,r.object().pattern(/.+/,[r.string(),i.desc.template])]),e.description=r.object({type:r.string().required(),flags:r.object({cast:r.string(),default:r.any(),description:r.string(),empty:r.link("/"),failover:i.desc.entity,id:r.string(),label:r.string(),only:!0,presence:["optional","required","forbidden"],result:["raw","strip"],strip:r.boolean(),unit:r.string()}).unknown(),preferences:{allowUnknown:r.boolean(),abortEarly:r.boolean(),artifacts:r.boolean(),cache:r.boolean(),convert:r.boolean(),dateFormat:["date","iso","string","time","utc"],errors:{escapeHtml:r.boolean(),label:["path","key"],language:[r.string(),i.desc.ref],wrap:{label:i.wrap,array:i.wrap}},externals:r.boolean(),messages:i.desc.messages,noDefaults:r.boolean(),nonEnumerables:r.boolean(),presence:["required","optional","forbidden"],skipFunctions:r.boolean(),stripUnknown:r.object({arrays:r.boolean(),objects:r.boolean()}).or("arrays","objects").allow(!0,!1),warnings:r.boolean()},allow:i.desc.values,invalid:i.desc.values,rules:r.array().min(1).items({name:r.string().required(),args:r.object().min(1),keep:r.boolean(),message:[r.string(),i.desc.messages],warn:r.boolean()}),keys:r.object().pattern(/.*/,r.link("/")),link:i.desc.ref}).pattern(/^[a-z]\w*$/,r.any())},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(1),o=t(9),s={};e.type=function(A,e){const t=Object.getPrototypeOf(A),a=i(t),l=A._assign(Object.create(a)),c=Object.assign({},e);delete c.base,a._definition=c;const g=t._definition||{};c.messages=o.merge(g.messages,c.messages),c.properties=Object.assign({},g.properties,c.properties),l.type=c.type,c.flags=Object.assign({},g.flags,c.flags);const u=Object.assign({},g.terms);if(c.terms)for(const A in c.terms){const e=c.terms[A];r(void 0===l.$_terms[A],"Invalid term override for",c.type,A),l.$_terms[A]=e.init,u[A]=e}c.terms=u,c.args||(c.args=g.args),c.prepare=s.prepare(c.prepare,g.prepare),c.coerce&&("function"==typeof c.coerce&&(c.coerce={method:c.coerce}),c.coerce.from&&!Array.isArray(c.coerce.from)&&(c.coerce={method:c.coerce.method,from:[].concat(c.coerce.from)})),c.coerce=s.coerce(c.coerce,g.coerce),c.validate=s.validate(c.validate,g.validate);const h=Object.assign({},g.rules);if(c.rules)for(const A in c.rules){const e=c.rules[A];r("object"==typeof e,"Invalid rule definition for",c.type,A);let t=e.method;if(void 0===t&&(t=function(){return this.$_addRule(A)}),t&&(r(!a[A],"Rule conflict in",c.type,A),a[A]=t),r(!h[A],"Rule conflict in",c.type,A),h[A]=e,e.alias){const A=[].concat(e.alias);for(const t of A)a[t]=e.method}e.args&&(e.argsByName=new Map,e.args=e.args.map((A=>("string"==typeof A&&(A={name:A}),r(!e.argsByName.has(A.name),"Duplicated argument name",A.name),n.isSchema(A.assert)&&(A.assert=A.assert.strict().label(A.name)),e.argsByName.set(A.name,A),A))))}c.rules=h;const E=Object.assign({},g.modifiers);if(c.modifiers)for(const A in c.modifiers){r(!a[A],"Rule conflict in",c.type,A);const e=c.modifiers[A];r("function"==typeof e,"Invalid modifier definition for",c.type,A);const t=function(e){return this.rule({[A]:e})};a[A]=t,E[A]=e}if(c.modifiers=E,c.overrides){a._super=t,l.$_super={};for(const A in c.overrides)r(t[A],"Cannot override missing",A),c.overrides[A][n.symbols.parent]=t[A],l.$_super[A]=t[A].bind(l);Object.assign(a,c.overrides)}c.cast=Object.assign({},g.cast,c.cast);const B=Object.assign({},g.manifest,c.manifest);return B.build=s.build(c.manifest&&c.manifest.build,g.manifest&&g.manifest.build),c.manifest=B,c.rebuild=s.rebuild(c.rebuild,g.rebuild),l},s.build=function(A,e){return A&&e?function(t,r){return e(A(t,r),r)}:A||e},s.coerce=function(A,e){return A&&e?{from:A.from&&e.from?[...new Set([...A.from,...e.from])]:null,method(t,r){let i;if((!e.from||e.from.includes(typeof t))&&(i=e.method(t,r),i)){if(i.errors||void 0===i.value)return i;t=i.value}if(!A.from||A.from.includes(typeof t)){const e=A.method(t,r);if(e)return e}return i}}:A||e},s.prepare=function(A,e){return A&&e?function(t,r){const i=A(t,r);if(i){if(i.errors||void 0===i.value)return i;t=i.value}return e(t,r)||i}:A||e},s.rebuild=function(A,e){return A&&e?function(t){e(t),A(t)}:A||e},s.validate=function(A,e){return A&&e?function(t,r){const i=e(t,r);if(i){if(i.errors&&(!Array.isArray(i.errors)||i.errors.length))return i;t=i.value}return A(t,r)||i}:A||e}},function(A,e){},function(A,e){},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(14),o={};A.exports=o.merge=function(A,e,t){if(r(A&&"object"==typeof A,"Invalid target value: must be an object"),r(null==e||"object"==typeof e,"Invalid source value: must be null, undefined, or an object"),!e)return A;if(t=Object.assign({nullOverride:!0,mergeArrays:!0},t),Array.isArray(e)){r(Array.isArray(A),"Cannot merge array onto an object"),t.mergeArrays||(A.length=0);for(let r=0;r<e.length;++r)A.push(i(e[r],{symbols:t.symbols}));return A}const s=n.keys(e,t);for(let r=0;r<s.length;++r){const n=s[r];if("__proto__"===n||!Object.prototype.propertyIsEnumerable.call(e,n))continue;const a=e[n];if(a&&"object"==typeof a){if(A[n]===a)continue;!A[n]||"object"!=typeof A[n]||Array.isArray(A[n])!==Array.isArray(a)||a instanceof Date||a instanceof RegExp?A[n]=i(a,{symbols:t.symbols}):o.merge(A[n],a,t)}else(null!=a||t.nullOverride)&&(A[n]=a)}return A}},function(A,e,t){"use strict";const r=t(0),i=t(10),n=t(1),o={};A.exports=o.Values=class{constructor(A,e){this._values=new Set(A),this._refs=new Set(e),this._lowercase=o.lowercases(A),this._override=!1}get length(){return this._values.size+this._refs.size}add(A,e){n.isResolvable(A)?this._refs.has(A)||(this._refs.add(A),e&&e.register(A)):this.has(A,null,null,!1)||(this._values.add(A),"string"==typeof A&&this._lowercase.set(A.toLowerCase(),A))}static merge(A,e,t){if(A=A||new o.Values,e){if(e._override)return e.clone();for(const t of[...e._values,...e._refs])A.add(t)}if(t)for(const e of[...t._values,...t._refs])A.remove(e);return A.length?A:null}remove(A){n.isResolvable(A)?this._refs.delete(A):(this._values.delete(A),"string"==typeof A&&this._lowercase.delete(A.toLowerCase()))}has(A,e,t,r){return!!this.get(A,e,t,r)}get(A,e,t,r){if(!this.length)return!1;if(this._values.has(A))return{value:A};if("string"==typeof A&&A&&r){const e=this._lowercase.get(A.toLowerCase());if(e)return{value:e}}if(!this._refs.size&&"object"!=typeof A)return!1;if("object"==typeof A)for(const e of this._values)if(i(e,A))return{value:e};if(e)for(const n of this._refs){const o=n.resolve(A,e,t,null,{in:!0});if(void 0===o)continue;const s=n.in&&"object"==typeof o?Array.isArray(o)?o:Object.keys(o):[o];for(const e of s)if(typeof e==typeof A)if(r&&A&&"string"==typeof A){if(e.toLowerCase()===A.toLowerCase())return{value:e,ref:n}}else if(i(e,A))return{value:e,ref:n}}return!1}override(){this._override=!0}values(A){if(A&&A.display){const A=[];for(const e of[...this._values,...this._refs])void 0!==e&&A.push(e);return A}return Array.from([...this._values,...this._refs])}clone(){const A=new o.Values(this._values,this._refs);return A._override=this._override,A}concat(A){r(!A._override,"Cannot concat override set of values");const e=new o.Values([...this._values,...A._values],[...this._refs,...A._refs]);return e._override=this._override,e}describe(){const A=[];this._override&&A.push({override:!0});for(const e of this._values.values())A.push(e&&"object"==typeof e?{value:e}:e);for(const e of this._refs.values())A.push(e.describe());return A}},o.Values.prototype[n.symbols.values]=!0,o.Values.prototype.slice=o.Values.prototype.clone,o.lowercases=function(A){const e=new Map;if(A)for(const t of A)"string"==typeof t&&e.set(t.toLowerCase(),t);return e}},function(A,e,t){"use strict";const r=t(43),i=t(0),n=t(2),o=t(44),s=t(3),a=t(1),l=t(8),c=t(4),g=t(5),u=t(7),h={renameDefaults:{alias:!1,multiple:!1,override:!1}};A.exports=s.extend({type:"_keys",properties:{typeof:"object"},flags:{unknown:{default:!1}},terms:{dependencies:{init:null},keys:{init:null,manifest:{mapped:{from:"schema",to:"key"}}},patterns:{init:null},renames:{init:null}},args:(A,e)=>A.keys(e),validate(A,{schema:e,error:t,state:r,prefs:i}){if(!A||typeof A!==e.$_property("typeof")||Array.isArray(A))return{value:A,errors:t("object.base",{type:e.$_property("typeof")})};if(!(e.$_terms.renames||e.$_terms.dependencies||e.$_terms.keys||e.$_terms.patterns||e.$_terms.externals))return;A=h.clone(A,i);const n=[];if(e.$_terms.renames&&!h.rename(e,A,r,i,n))return{value:A,errors:n};if(!e.$_terms.keys&&!e.$_terms.patterns&&!e.$_terms.dependencies)return{value:A,errors:n};const o=new Set(Object.keys(A));if(e.$_terms.keys){const t=[A,...r.ancestors];for(const s of e.$_terms.keys){const e=s.key,a=A[e];o.delete(e);const l=r.localize([...r.path,e],t,s),c=s.schema.$_validate(a,l,i);if(c.errors){if(i.abortEarly)return{value:A,errors:c.errors};n.push(...c.errors)}else"strip"===s.schema._flags.result||void 0===c.value&&void 0!==a?delete A[e]:void 0!==c.value&&(A[e]=c.value)}}if(o.size||e._flags._hasPatternMatch){const t=h.unknown(e,A,o,n,r,i);if(t)return t}if(e.$_terms.dependencies)for(const t of e.$_terms.dependencies){if(t.key&&void 0===t.key.resolve(A,r,i,null,{shadow:!1}))continue;const o=h.dependencies[t.rel](e,t,A,r,i);if(o){const t=e.$_createError(o.code,A,o.context,r,i);if(i.abortEarly)return{value:A,errors:t};n.push(t)}}return{value:A,errors:n}},rules:{and:{method(...A){return a.verifyFlat(A,"and"),h.dependency(this,"and",null,A)}},append:{method(A){return null==A||0===Object.keys(A).length?this:this.keys(A)}},assert:{method(A,e,t){u.isTemplate(A)||(A=l.ref(A)),i(void 0===t||"string"==typeof t,"Message must be a string"),e=this.$_compile(e,{appendPath:!0});const r=this.$_addRule({name:"assert",args:{subject:A,schema:e,message:t}});return r.$_mutateRegister(A),r.$_mutateRegister(e),r},validate(A,{error:e,prefs:t,state:r},{subject:i,schema:n,message:o}){const s=i.resolve(A,r,t),a=g.isRef(i)?i.absolute(r):[];return n.$_match(s,r.localize(a,[A,...r.ancestors],n),t)?A:e("object.assert",{subject:i,message:o})},args:["subject","schema","message"],multi:!0},instance:{method(A,e){return i("function"==typeof A,"constructor must be a function"),e=e||A.name,this.$_addRule({name:"instance",args:{constructor:A,name:e}})},validate:(A,e,{constructor:t,name:r})=>A instanceof t?A:e.error("object.instance",{type:r,value:A}),args:["constructor","name"]},keys:{method(A){i(void 0===A||"object"==typeof A,"Object schema must be a valid object"),i(!a.isSchema(A),"Object schema cannot be a joi schema");const e=this.clone();if(A)if(Object.keys(A).length){e.$_terms.keys=e.$_terms.keys?e.$_terms.keys.filter((e=>!A.hasOwnProperty(e.key))):new h.Keys;for(const t in A)a.tryWithPath((()=>e.$_terms.keys.push({key:t,schema:this.$_compile(A[t])})),t)}else e.$_terms.keys=new h.Keys;else e.$_terms.keys=null;return e.$_mutateRebuild()}},length:{method(A){return this.$_addRule({name:"length",args:{limit:A},operator:"="})},validate:(A,e,{limit:t},{name:r,operator:i,args:n})=>a.compare(Object.keys(A).length,t,i)?A:e.error("object."+r,{limit:n.limit,value:A}),args:[{name:"limit",ref:!0,assert:a.limit,message:"must be a positive integer"}]},max:{method(A){return this.$_addRule({name:"max",method:"length",args:{limit:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"length",args:{limit:A},operator:">="})}},nand:{method(...A){return a.verifyFlat(A,"nand"),h.dependency(this,"nand",null,A)}},or:{method(...A){return a.verifyFlat(A,"or"),h.dependency(this,"or",null,A)}},oxor:{method(...A){return h.dependency(this,"oxor",null,A)}},pattern:{method(A,e,t={}){const r=A instanceof RegExp;r||(A=this.$_compile(A,{appendPath:!0})),i(void 0!==e,"Invalid rule"),a.assertOptions(t,["fallthrough","matches"]),r&&i(!A.flags.includes("g")&&!A.flags.includes("y"),"pattern should not use global or sticky mode"),e=this.$_compile(e,{appendPath:!0});const n=this.clone();n.$_terms.patterns=n.$_terms.patterns||[];const o={[r?"regex":"schema"]:A,rule:e};return t.matches&&(o.matches=this.$_compile(t.matches),"array"!==o.matches.type&&(o.matches=o.matches.$_root.array().items(o.matches)),n.$_mutateRegister(o.matches),n.$_setFlag("_hasPatternMatch",!0,{clone:!1})),t.fallthrough&&(o.fallthrough=!0),n.$_terms.patterns.push(o),n.$_mutateRegister(e),n}},ref:{method(){return this.$_addRule("ref")},validate:(A,e)=>g.isRef(A)?A:e.error("object.refType",{value:A})},regex:{method(){return this.$_addRule("regex")},validate:(A,e)=>A instanceof RegExp?A:e.error("object.regex",{value:A})},rename:{method(A,e,t={}){i("string"==typeof A||A instanceof RegExp,"Rename missing the from argument"),i("string"==typeof e||e instanceof u,"Invalid rename to argument"),i(e!==A,"Cannot rename key to same name:",A),a.assertOptions(t,["alias","ignoreUndefined","override","multiple"]);const n=this.clone();n.$_terms.renames=n.$_terms.renames||[];for(const e of n.$_terms.renames)i(e.from!==A,"Cannot rename the same key multiple times");return e instanceof u&&n.$_mutateRegister(e),n.$_terms.renames.push({from:A,to:e,options:r(h.renameDefaults,t)}),n}},schema:{method(A="any"){return this.$_addRule({name:"schema",args:{type:A}})},validate:(A,e,{type:t})=>!a.isSchema(A)||"any"!==t&&A.type!==t?e.error("object.schema",{type:t}):A},unknown:{method(A){return this.$_setFlag("unknown",!1!==A)}},with:{method(A,e,t={}){return h.dependency(this,"with",A,e,t)}},without:{method(A,e,t={}){return h.dependency(this,"without",A,e,t)}},xor:{method(...A){return a.verifyFlat(A,"xor"),h.dependency(this,"xor",null,A)}}},overrides:{default(A,e){return void 0===A&&(A=a.symbols.deepDefault),this.$_parent("default",A,e)}},rebuild(A){if(A.$_terms.keys){const e=new o.Sorter;for(const t of A.$_terms.keys)a.tryWithPath((()=>e.add(t,{after:t.schema.$_rootReferences(),group:t.key})),t.key);A.$_terms.keys=new h.Keys(...e.nodes)}},manifest:{build(A,e){if(e.keys&&(A=A.keys(e.keys)),e.dependencies)for(const{rel:t,key:r=null,peers:i,options:n}of e.dependencies)A=h.dependency(A,t,r,i,n);if(e.patterns)for(const{regex:t,schema:r,rule:i,fallthrough:n,matches:o}of e.patterns)A=A.pattern(t||r,i,{fallthrough:n,matches:o});if(e.renames)for(const{from:t,to:r,options:i}of e.renames)A=A.rename(t,r,i);return A}},messages:{"object.and":"{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}","object.assert":'{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',"object.base":"{{#label}} must be of type {{#type}}","object.instance":"{{#label}} must be an instance of {{:#type}}","object.length":'{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}',"object.max":'{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',"object.min":'{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}',"object.missing":"{{#label}} must contain at least one of {{#peersWithLabels}}","object.nand":"{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}","object.oxor":"{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}","object.pattern.match":"{{#label}} keys failed to match pattern requirements","object.refType":"{{#label}} must be a Joi reference","object.regex":"{{#label}} must be a RegExp object","object.rename.multiple":"{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}","object.rename.override":"{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists","object.schema":"{{#label}} must be a Joi schema of {{#type}} type","object.unknown":"{{#label}} is not allowed","object.with":"{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}","object.without":"{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}","object.xor":"{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}"}}),h.clone=function(A,e){if("object"==typeof A){if(e.nonEnumerables)return n(A,{shallow:!0});const t=Object.create(Object.getPrototypeOf(A));return Object.assign(t,A),t}const t=function(...e){return A.apply(this,e)};return t.prototype=n(A.prototype),Object.defineProperty(t,"name",{value:A.name,writable:!1}),Object.defineProperty(t,"length",{value:A.length,writable:!1}),Object.assign(t,A),t},h.dependency=function(A,e,t,r,n){i(null===t||"string"==typeof t,e,"key must be a strings"),n||(n=r.length>1&&"object"==typeof r[r.length-1]?r.pop():{}),a.assertOptions(n,["separator"]),r=[].concat(r);const o=a.default(n.separator,"."),s=[];for(const A of r)i("string"==typeof A,e,"peers must be a string or a reference"),s.push(l.ref(A,{separator:o,ancestor:0,prefix:!1}));null!==t&&(t=l.ref(t,{separator:o,ancestor:0,prefix:!1}));const c=A.clone();return c.$_terms.dependencies=c.$_terms.dependencies||[],c.$_terms.dependencies.push(new h.Dependency(e,t,s,r)),c},h.dependencies={and(A,e,t,r,i){const n=[],o=[],s=e.peers.length;for(const A of e.peers)void 0===A.resolve(t,r,i,null,{shadow:!1})?n.push(A.key):o.push(A.key);if(n.length!==s&&o.length!==s)return{code:"object.and",context:{present:o,presentWithLabels:h.keysToLabels(A,o),missing:n,missingWithLabels:h.keysToLabels(A,n)}}},nand(A,e,t,r,i){const n=[];for(const A of e.peers)void 0!==A.resolve(t,r,i,null,{shadow:!1})&&n.push(A.key);if(n.length!==e.peers.length)return;const o=e.paths[0],s=e.paths.slice(1);return{code:"object.nand",context:{main:o,mainWithLabel:h.keysToLabels(A,o),peers:s,peersWithLabels:h.keysToLabels(A,s)}}},or(A,e,t,r,i){for(const A of e.peers)if(void 0!==A.resolve(t,r,i,null,{shadow:!1}))return;return{code:"object.missing",context:{peers:e.paths,peersWithLabels:h.keysToLabels(A,e.paths)}}},oxor(A,e,t,r,i){const n=[];for(const A of e.peers)void 0!==A.resolve(t,r,i,null,{shadow:!1})&&n.push(A.key);if(!n.length||1===n.length)return;const o={peers:e.paths,peersWithLabels:h.keysToLabels(A,e.paths)};return o.present=n,o.presentWithLabels=h.keysToLabels(A,n),{code:"object.oxor",context:o}},with(A,e,t,r,i){for(const n of e.peers)if(void 0===n.resolve(t,r,i,null,{shadow:!1}))return{code:"object.with",context:{main:e.key.key,mainWithLabel:h.keysToLabels(A,e.key.key),peer:n.key,peerWithLabel:h.keysToLabels(A,n.key)}}},without(A,e,t,r,i){for(const n of e.peers)if(void 0!==n.resolve(t,r,i,null,{shadow:!1}))return{code:"object.without",context:{main:e.key.key,mainWithLabel:h.keysToLabels(A,e.key.key),peer:n.key,peerWithLabel:h.keysToLabels(A,n.key)}}},xor(A,e,t,r,i){const n=[];for(const A of e.peers)void 0!==A.resolve(t,r,i,null,{shadow:!1})&&n.push(A.key);if(1===n.length)return;const o={peers:e.paths,peersWithLabels:h.keysToLabels(A,e.paths)};return 0===n.length?{code:"object.missing",context:o}:(o.present=n,o.presentWithLabels=h.keysToLabels(A,n),{code:"object.xor",context:o})}},h.keysToLabels=function(A,e){return Array.isArray(e)?e.map((e=>A.$_mapLabels(e))):A.$_mapLabels(e)},h.rename=function(A,e,t,r,i){const n={};for(const o of A.$_terms.renames){const s=[],a="string"!=typeof o.from;if(a)for(const A in e){if(void 0===e[A]&&o.options.ignoreUndefined)continue;if(A===o.to)continue;const t=o.from.exec(A);t&&s.push({from:A,to:o.to,match:t})}else!Object.prototype.hasOwnProperty.call(e,o.from)||void 0===e[o.from]&&o.options.ignoreUndefined||s.push(o);for(const l of s){const s=l.from;let c=l.to;if(c instanceof u&&(c=c.render(e,t,r,l.match)),s!==c){if(!o.options.multiple&&n[c]&&(i.push(A.$_createError("object.rename.multiple",e,{from:s,to:c,pattern:a},t,r)),r.abortEarly))return!1;if(Object.prototype.hasOwnProperty.call(e,c)&&!o.options.override&&!n[c]&&(i.push(A.$_createError("object.rename.override",e,{from:s,to:c,pattern:a},t,r)),r.abortEarly))return!1;void 0===e[s]?delete e[c]:e[c]=e[s],n[c]=!0,o.options.alias||delete e[s]}}}return!0},h.unknown=function(A,e,t,r,i,n){if(A.$_terms.patterns){let o=!1;const s=A.$_terms.patterns.map((A=>{if(A.matches)return o=!0,[]})),a=[e,...i.ancestors];for(const o of t){const l=e[o],c=[...i.path,o];for(let g=0;g<A.$_terms.patterns.length;++g){const u=A.$_terms.patterns[g];if(u.regex){const A=u.regex.test(o);if(i.mainstay.tracer.debug(i,"rule","pattern.".concat(g),A?"pass":"error"),!A)continue}else if(!u.schema.$_match(o,i.nest(u.schema,"pattern.".concat(g)),n))continue;t.delete(o);const h=i.localize(c,a,{schema:u.rule,key:o}),E=u.rule.$_validate(l,h,n);if(E.errors){if(n.abortEarly)return{value:e,errors:E.errors};r.push(...E.errors)}if(u.matches&&s[g].push(o),e[o]=E.value,!u.fallthrough)break}}if(o)for(let t=0;t<s.length;++t){const o=s[t];if(!o)continue;const l=A.$_terms.patterns[t].matches,g=i.localize(i.path,a,l),u=l.$_validate(o,g,n);if(u.errors){const t=c.details(u.errors,{override:!1});t.matches=o;const s=A.$_createError("object.pattern.match",e,t,i,n);if(n.abortEarly)return{value:e,errors:s};r.push(s)}}}if(t.size&&(A.$_terms.keys||A.$_terms.patterns)){if(n.stripUnknown&&!A._flags.unknown||n.skipFunctions){const A=!(!n.stripUnknown||!0!==n.stripUnknown&&!n.stripUnknown.objects);for(const r of t)A?(delete e[r],t.delete(r)):"function"==typeof e[r]&&t.delete(r)}if(!a.default(A._flags.unknown,n.allowUnknown))for(const o of t){const t=i.localize([...i.path,o],[]),s=A.$_createError("object.unknown",e[o],{child:o},t,n,{flags:!1});if(n.abortEarly)return{value:e,errors:s};r.push(s)}}},h.Dependency=class{constructor(A,e,t,r){this.rel=A,this.key=e,this.peers=t,this.paths=r}describe(){const A={rel:this.rel,peers:this.paths};return null!==this.key&&(A.key=this.key.key),"."!==this.peers[0].separator&&(A.options={separator:this.peers[0].separator}),A}},h.Keys=class extends Array{concat(A){const e=this.slice(),t=new Map;for(let A=0;A<e.length;++A)t.set(e[A].key,A);for(const r of A){const A=r.key,i=t.get(A);void 0!==i?e[i]={key:A,schema:e[i].schema.concat(r.schema)}:e.push(r)}return e}}},function(A,e,t){"use strict";const r=t(24),i=t(25),n={minDomainSegments:2,nonAsciiRx:/[^\x00-\x7f]/,domainControlRx:/[\x00-\x20@\:\/]/,tldSegmentRx:/^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,domainSegmentRx:/^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,URL:r.URL||URL};e.analyze=function(A,e={}){if("string"!=typeof A)throw new Error("Invalid input: domain must be a string");if(!A)return i.code("DOMAIN_NON_EMPTY_STRING");if(A.length>256)return i.code("DOMAIN_TOO_LONG");if(n.nonAsciiRx.test(A)){if(!1===e.allowUnicode)return i.code("DOMAIN_INVALID_UNICODE_CHARS");A=A.normalize("NFC")}if(n.domainControlRx.test(A))return i.code("DOMAIN_INVALID_CHARS");A=n.punycode(A);const t=e.minDomainSegments||n.minDomainSegments,r=A.split(".");if(r.length<t)return i.code("DOMAIN_SEGMENTS_COUNT");if(e.maxDomainSegments&&r.length>e.maxDomainSegments)return i.code("DOMAIN_SEGMENTS_COUNT_MAX");const o=e.tlds;if(o){const A=r[r.length-1].toLowerCase();if(o.deny&&o.deny.has(A)||o.allow&&!o.allow.has(A))return i.code("DOMAIN_FORBIDDEN_TLDS")}for(let A=0;A<r.length;++A){const e=r[A];if(!e.length)return i.code("DOMAIN_EMPTY_SEGMENT");if(e.length>63)return i.code("DOMAIN_LONG_SEGMENT");if(A<r.length-1){if(!n.domainSegmentRx.test(e))return i.code("DOMAIN_INVALID_CHARS")}else if(!n.tldSegmentRx.test(e))return i.code("DOMAIN_INVALID_TLDS_CHARS")}return null},e.isValid=function(A,t){return!e.analyze(A,t)},n.punycode=function(A){try{return new n.URL("http://".concat(A)).host}catch(e){return A}}},function(A,e){},function(A,e,t){"use strict";e.codes={EMPTY_STRING:"Address must be a non-empty string",FORBIDDEN_UNICODE:"Address contains forbidden Unicode characters",MULTIPLE_AT_CHAR:"Address cannot contain more than one @ character",MISSING_AT_CHAR:"Address must contain one @ character",EMPTY_LOCAL:"Address local part cannot be empty",ADDRESS_TOO_LONG:"Address too long",LOCAL_TOO_LONG:"Address local part too long",EMPTY_LOCAL_SEGMENT:"Address local part contains empty dot-separated segment",INVALID_LOCAL_CHARS:"Address local part contains invalid character",DOMAIN_NON_EMPTY_STRING:"Domain must be a non-empty string",DOMAIN_TOO_LONG:"Domain too long",DOMAIN_INVALID_UNICODE_CHARS:"Domain contains forbidden Unicode characters",DOMAIN_INVALID_CHARS:"Domain contains invalid character",DOMAIN_INVALID_TLDS_CHARS:"Domain contains invalid tld character",DOMAIN_SEGMENTS_COUNT:"Domain lacks the minimum required number of segments",DOMAIN_SEGMENTS_COUNT_MAX:"Domain contains too many segments",DOMAIN_FORBIDDEN_TLDS:"Domain uses forbidden TLD",DOMAIN_EMPTY_SEGMENT:"Domain contains empty dot-separated segment",DOMAIN_LONG_SEGMENT:"Domain contains dot-separated segment that is too long"},e.code=function(A){return{code:A,error:e.codes[A]}}},function(A,e,t){"use strict";const r=t(0),i=t(27),n={generate:function(){const A={},e="!\\$&'\\(\\)\\*\\+,;=",t="\\w-\\.~%\\dA-Fa-f"+e+":@",r="["+t+"]",i="(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";A.ipv4address="(?:"+i+"\\.){3}"+i;const n="[\\dA-Fa-f]{1,4}",o="(?:"+n+":"+n+"|"+A.ipv4address+")",s="(?:"+n+":){6}"+o,a="::(?:"+n+":){5}"+o,l="(?:"+n+")?::(?:"+n+":){4}"+o,c="(?:(?:"+n+":){0,1}"+n+")?::(?:"+n+":){3}"+o,g="(?:(?:"+n+":){0,2}"+n+")?::(?:"+n+":){2}"+o,u="(?:(?:"+n+":){0,3}"+n+")?::"+n+":"+o,h="(?:(?:"+n+":){0,4}"+n+")?::"+o;A.ipv4Cidr="(?:\\d|[1-2]\\d|3[0-2])",A.ipv6Cidr="(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])",A.ipv6address="(?:"+s+"|"+a+"|"+l+"|"+c+"|"+g+"|"+u+"|"+h+"|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)",A.ipvFuture="v[\\dA-Fa-f]+\\.[\\w-\\.~"+e+":]+",A.scheme="[a-zA-Z][a-zA-Z\\d+-\\.]*",A.schemeRegex=new RegExp(A.scheme);const E="[\\w-\\.~%\\dA-Fa-f"+e+":]*",B="(?:\\[(?:"+A.ipv6address+"|"+A.ipvFuture+")\\]|"+A.ipv4address+"|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})",I="(?:"+E+"@)?"+B+"(?::\\d*)?",f="(?:"+E+"@)?("+B+")(?::\\d*)?",p=r+"+",d="(?:\\/"+r+"*)*",w="\\/(?:"+p+d+")?",m=p+d,C="[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+"+d;return A.hierPart="(?:(?:\\/\\/"+I+d+")|"+w+"|"+m+"|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))",A.hierPartCapture="(?:(?:\\/\\/"+f+d+")|"+w+"|"+m+")",A.relativeRef="(?:(?:\\/\\/"+I+d+")|"+w+"|"+C+"|)",A.relativeRefCapture="(?:(?:\\/\\/"+f+d+")|"+w+"|"+C+"|)",A.query="["+t+"\\/\\?]*(?=#|$)",A.queryWithSquareBrackets="["+t+"\\[\\]\\/\\?]*(?=#|$)",A.fragment="["+t+"\\/\\?]*",A}};n.rfc3986=n.generate(),e.ip={v4Cidr:n.rfc3986.ipv4Cidr,v6Cidr:n.rfc3986.ipv6Cidr,ipv4:n.rfc3986.ipv4address,ipv6:n.rfc3986.ipv6address,ipvfuture:n.rfc3986.ipvFuture},n.createRegex=function(A){const e=n.rfc3986,t="(?:\\?"+(A.allowQuerySquareBrackets?e.queryWithSquareBrackets:e.query)+")?(?:#"+e.fragment+")?",o=A.domain?e.relativeRefCapture:e.relativeRef;if(A.relativeOnly)return n.wrap(o+t);let s="";if(A.scheme){r(A.scheme instanceof RegExp||"string"==typeof A.scheme||Array.isArray(A.scheme),"scheme must be a RegExp, String, or Array");const t=[].concat(A.scheme);r(t.length>=1,"scheme must have at least 1 scheme specified");const n=[];for(let A=0;A<t.length;++A){const o=t[A];r(o instanceof RegExp||"string"==typeof o,"scheme at position "+A+" must be a RegExp or String"),o instanceof RegExp?n.push(o.source.toString()):(r(e.schemeRegex.test(o),"scheme at position "+A+" must be a valid scheme"),n.push(i(o)))}s=n.join("|")}const a="(?:"+(s?"(?:"+s+")":e.scheme)+":"+(A.domain?e.hierPartCapture:e.hierPart)+")",l=A.allowRelative?"(?:"+a+"|"+o+")":a;return n.wrap(l+t,s)},n.wrap=function(A,e){return{raw:A="(?=.)(?!https?:/$)".concat(A),regex:new RegExp("^".concat(A,"$")),scheme:e}},n.uriRegex=n.createRegex({}),e.regex=function(A={}){return A.scheme||A.allowRelative||A.relativeOnly||A.allowQuerySquareBrackets||A.domain?n.createRegex(A):n.uriRegex}},function(A,e,t){"use strict";A.exports=function(A){return A.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g,"\\$&")}},function(A,e,t){"use strict";A.exports=function(...A){try{return JSON.stringify.apply(null,A)}catch(A){return"[Cannot display object: "+A.message+"]"}}},function(A){A.exports=JSON.parse('{"version":"17.3.0"}')},function(A,e,t){"use strict";const r={};A.exports=function(A){if(!A)return"";let e="";for(let t=0;t<A.length;++t){const i=A.charCodeAt(t);r.isSafe(i)?e+=A[t]:e+=r.escapeHtmlChar(i)}return e},r.escapeHtmlChar=function(A){const e=r.namedHtml[A];if(void 0!==e)return e;if(A>=256)return"&#"+A+";";const t=A.toString(16).padStart(2,"0");return"&#x".concat(t,";")},r.isSafe=function(A){return void 0!==r.safeCharCodes[A]},r.namedHtml={38:"&amp;",60:"&lt;",62:"&gt;",34:"&quot;",160:"&nbsp;",162:"&cent;",163:"&pound;",164:"&curren;",169:"&copy;",174:"&reg;"},r.safeCharCodes=function(){const A={};for(let e=32;e<123;++e)(e>=97||e>=65&&e<=90||e>=48&&e<=57||32===e||46===e||44===e||45===e||58===e||95===e)&&(A[e]=null);return A}()},function(A,e,t){"use strict";const r={operators:["!","^","*","/","%","+","-","<","<=",">",">=","==","!=","&&","||","??"],operatorCharacters:["!","^","*","/","%","+","-","<","=",">","&","|","?"],operatorsOrder:[["^"],["*","/","%"],["+","-"],["<","<=",">",">="],["==","!="],["&&"],["||","??"]],operatorsPrefix:["!","n"],literals:{'"':'"',"`":"`","'":"'","[":"]"},numberRx:/^(?:[0-9]*\.?[0-9]*){1}$/,tokenRx:/^[\w\$\#\.\@\:\{\}]+$/,symbol:Symbol("formula"),settings:Symbol("settings")};e.Parser=class{constructor(A,e={}){if(!e[r.settings]&&e.constants)for(const A in e.constants){const t=e.constants[A];if(null!==t&&!["boolean","number","string"].includes(typeof t))throw new Error("Formula constant ".concat(A," contains invalid ").concat(typeof t," value type"))}this.settings=e[r.settings]?e:Object.assign({[r.settings]:!0,constants:{},functions:{}},e),this.single=null,this._parts=null,this._parse(A)}_parse(A){let t=[],i="",n=0,o=!1;const s=A=>{if(n)throw new Error("Formula missing closing parenthesis");const s=t.length?t[t.length-1]:null;if(o||i||A){if(s&&"reference"===s.type&&")"===A)return s.type="function",s.value=this._subFormula(i,s.value),void(i="");if(")"===A){const A=new e.Parser(i,this.settings);t.push({type:"segment",value:A})}else if(o){if("]"===o)return t.push({type:"reference",value:i}),void(i="");t.push({type:"literal",value:i})}else if(r.operatorCharacters.includes(i))s&&"operator"===s.type&&r.operators.includes(s.value+i)?s.value+=i:t.push({type:"operator",value:i});else if(i.match(r.numberRx))t.push({type:"constant",value:parseFloat(i)});else if(void 0!==this.settings.constants[i])t.push({type:"constant",value:this.settings.constants[i]});else{if(!i.match(r.tokenRx))throw new Error("Formula contains invalid token: ".concat(i));t.push({type:"reference",value:i})}i=""}};for(const e of A)o?e===o?(s(),o=!1):i+=e:n?"("===e?(i+=e,++n):")"===e?(--n,n?i+=e:s(e)):i+=e:e in r.literals?o=r.literals[e]:"("===e?(s(),++n):r.operatorCharacters.includes(e)?(s(),i=e,s()):" "!==e?i+=e:s();s(),t=t.map(((A,e)=>"operator"!==A.type||"-"!==A.value||e&&"operator"!==t[e-1].type?A:{type:"operator",value:"n"}));let a=!1;for(const A of t){if("operator"===A.type){if(r.operatorsPrefix.includes(A.value))continue;if(!a)throw new Error("Formula contains an operator in invalid position");if(!r.operators.includes(A.value))throw new Error("Formula contains an unknown operator ".concat(A.value))}else if(a)throw new Error("Formula missing expected operator");a=!a}if(!a)throw new Error("Formula contains invalid trailing operator");1===t.length&&["reference","literal","constant"].includes(t[0].type)&&(this.single={type:"reference"===t[0].type?"reference":"value",value:t[0].value}),this._parts=t.map((A=>{if("operator"===A.type)return r.operatorsPrefix.includes(A.value)?A:A.value;if("reference"!==A.type)return A.value;if(this.settings.tokenRx&&!this.settings.tokenRx.test(A.value))throw new Error("Formula contains invalid reference ".concat(A.value));return this.settings.reference?this.settings.reference(A.value):r.reference(A.value)}))}_subFormula(A,t){const i=this.settings.functions[t];if("function"!=typeof i)throw new Error("Formula contains unknown function ".concat(t));let n=[];if(A){let e="",i=0,o=!1;const s=()=>{if(!e)throw new Error("Formula contains function ".concat(t," with invalid arguments ").concat(A));n.push(e),e=""};for(let t=0;t<A.length;++t){const n=A[t];o?(e+=n,n===o&&(o=!1)):n in r.literals&&!i?(e+=n,o=r.literals[n]):","!==n||i?(e+=n,"("===n?++i:")"===n&&--i):s()}s()}return n=n.map((A=>new e.Parser(A,this.settings))),function(A){const e=[];for(const t of n)e.push(t.evaluate(A));return i.call(A,...e)}}evaluate(A){const e=this._parts.slice();for(let t=e.length-2;t>=0;--t){const i=e[t];if(i&&"operator"===i.type){const n=e[t+1];e.splice(t+1,1);const o=r.evaluate(n,A);e[t]=r.single(i.value,o)}}return r.operatorsOrder.forEach((t=>{for(let i=1;i<e.length-1;)if(t.includes(e[i])){const t=e[i],n=r.evaluate(e[i-1],A),o=r.evaluate(e[i+1],A);e.splice(i,2);const s=r.calculate(t,n,o);e[i-1]=0===s?0:s}else i+=2})),r.evaluate(e[0],A)}},e.Parser.prototype[r.symbol]=!0,r.reference=function(A){return function(e){return e&&void 0!==e[A]?e[A]:null}},r.evaluate=function(A,e){return null===A?null:"function"==typeof A?A(e):A[r.symbol]?A.evaluate(e):A},r.single=function(A,e){if("!"===A)return!e;const t=-e;return 0===t?0:t},r.calculate=function(A,e,t){if("??"===A)return r.exists(e)?e:t;if("string"==typeof e||"string"==typeof t){if("+"===A)return(e=r.exists(e)?e:"")+(r.exists(t)?t:"")}else switch(A){case"^":return Math.pow(e,t);case"*":return e*t;case"/":return e/t;case"%":return e%t;case"+":return e+t;case"-":return e-t}switch(A){case"<":return e<t;case"<=":return e<=t;case">":return e>t;case">=":return e>=t;case"==":return e===t;case"!=":return e!==t;case"&&":return e&&t;case"||":return e||t}return null},r.exists=function(A){return null!=A}},function(A,e){},function(A,e,t){"use strict";const r=t(0),i=t(3),n=t(1),o=t(8),s=t(4),a=t(5),l={};A.exports=i.extend({type:"alternatives",flags:{match:{default:"any"}},terms:{matches:{init:[],register:a.toSibling}},args:(A,...e)=>1===e.length&&Array.isArray(e[0])?A.try(...e[0]):A.try(...e),validate(A,e){const{schema:t,error:r,state:i,prefs:n}=e;if(t._flags.match){let e,o=0;for(let r=0;r<t.$_terms.matches.length;++r){const s=t.$_terms.matches[r],a=i.nest(s.schema,"match.".concat(r));a.snapshot();const l=s.schema.$_validate(A,a,n);l.errors?a.restore():(++o,e=l.value)}return o?"one"===t._flags.match?1===o?{value:e}:{errors:r("alternatives.one")}:o===t.$_terms.matches.length?{value:A}:{errors:r("alternatives.all")}:{errors:r("alternatives.any")}}const o=[];for(let e=0;e<t.$_terms.matches.length;++e){const r=t.$_terms.matches[e];if(r.schema){const t=i.nest(r.schema,"match.".concat(e));t.snapshot();const s=r.schema.$_validate(A,t,n);if(!s.errors)return s;t.restore(),o.push({schema:r.schema,reports:s.errors});continue}const s=r.ref?r.ref.resolve(A,i,n):A,a=r.is?[r]:r.switch;for(let t=0;t<a.length;++t){const o=a[t],{is:l,then:c,otherwise:g}=o,u="match.".concat(e).concat(r.switch?"."+t:"");if(l.$_match(s,i.nest(l,"".concat(u,".is")),n)){if(c)return c.$_validate(A,i.nest(c,"".concat(u,".then")),n)}else if(g)return g.$_validate(A,i.nest(g,"".concat(u,".otherwise")),n)}}return l.errors(o,e)},rules:{conditional:{method(A,e){r(!this._flags._endedSwitch,"Unreachable condition"),r(!this._flags.match,"Cannot combine match mode",this._flags.match,"with conditional rule"),r(void 0===e.break,"Cannot use break option with alternatives conditional");const t=this.clone(),i=o.when(t,A,e),n=i.is?[i]:i.switch;for(const A of n)if(A.then&&A.otherwise){t.$_setFlag("_endedSwitch",!0,{clone:!1});break}return t.$_terms.matches.push(i),t.$_mutateRebuild()}},match:{method(A){if(r(["any","one","all"].includes(A),"Invalid alternatives match mode",A),"any"!==A)for(const e of this.$_terms.matches)r(e.schema,"Cannot combine match mode",A,"with conditional rules");return this.$_setFlag("match",A)}},try:{method(...A){r(A.length,"Missing alternative schemas"),n.verifyFlat(A,"try"),r(!this._flags._endedSwitch,"Unreachable condition");const e=this.clone();for(const t of A)e.$_terms.matches.push({schema:e.$_compile(t)});return e.$_mutateRebuild()}}},overrides:{label(A){return this.$_parent("label",A).$_modify({each:(e,t)=>"is"!==t.path[0]?e.label(A):void 0,ref:!1})}},rebuild(A){A.$_modify({each:e=>{n.isSchema(e)&&"array"===e.type&&A.$_setFlag("_arrayItems",!0,{clone:!1})}})},manifest:{build(A,e){if(e.matches)for(const t of e.matches){const{schema:e,ref:r,is:i,not:n,then:o,otherwise:s}=t;A=e?A.try(e):r?A.conditional(r,{is:i,then:o,not:n,otherwise:s,switch:t.switch}):A.conditional(i,{then:o,otherwise:s})}return A}},messages:{"alternatives.all":"{{#label}} does not match all of the required types","alternatives.any":"{{#label}} does not match any of the allowed types","alternatives.match":"{{#label}} does not match any of the allowed types","alternatives.one":"{{#label}} matches more than one allowed type","alternatives.types":"{{#label}} must be one of {{#types}}"}}),l.errors=function(A,{error:e,state:t}){if(!A.length)return{errors:e("alternatives.any")};if(1===A.length)return{errors:A[0].reports};const r=new Set,i=[];for(const{reports:n,schema:o}of A){if(n.length>1)return l.unmatched(A,e);const a=n[0];if(a instanceof s.Report==0)return l.unmatched(A,e);if(a.state.path.length!==t.path.length){i.push({type:o.type,report:a});continue}if("any.only"===a.code){for(const A of a.local.valids)r.add(A);continue}const[c,g]=a.code.split(".");"base"===g?r.add(c):i.push({type:o.type,report:a})}return i.length?1===i.length?{errors:i[0].report}:l.unmatched(A,e):{errors:e("alternatives.types",{types:[...r]})}},l.unmatched=function(A,e){const t=[];for(const e of A)t.push(...e.reports);return{errors:e("alternatives.match",s.details(t,{override:!1}))}}},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(10),o=t(20),s=t(15),a=t(1),l=t(8),c=t(4),g=t(17),u=t(18),h=t(9),E=t(35),B=t(5),I=t(19),f=t(36),p=t(21),d={Base:class{constructor(A){this.type=A,this.$_root=null,this._definition={},this._reset()}_reset(){this._ids=new E.Ids,this._preferences=null,this._refs=new B.Manager,this._cache=null,this._valids=null,this._invalids=null,this._flags={},this._rules=[],this._singleRules=new Map,this.$_terms={},this.$_temp={ruleset:null,whens:{}}}describe(){return r("function"==typeof u.describe,"Manifest functionality disabled"),u.describe(this)}allow(...A){return a.verifyFlat(A,"allow"),this._values(A,"_valids")}alter(A){r(A&&"object"==typeof A&&!Array.isArray(A),"Invalid targets argument"),r(!this._inRuleset(),"Cannot set alterations inside a ruleset");const e=this.clone();e.$_terms.alterations=e.$_terms.alterations||[];for(const t in A){const i=A[t];r("function"==typeof i,"Alteration adjuster for",t,"must be a function"),e.$_terms.alterations.push({target:t,adjuster:i})}return e.$_temp.ruleset=!1,e}artifact(A){return r(void 0!==A,"Artifact cannot be undefined"),r(!this._cache,"Cannot set an artifact with a rule cache"),this.$_setFlag("artifact",A)}cast(A){return r(!1===A||"string"==typeof A,"Invalid to value"),r(!1===A||this._definition.cast[A],"Type",this.type,"does not support casting to",A),this.$_setFlag("cast",!1===A?void 0:A)}default(A,e){return this._default("default",A,e)}description(A){return r(A&&"string"==typeof A,"Description must be a non-empty string"),this.$_setFlag("description",A)}empty(A){const e=this.clone();return void 0!==A&&(A=e.$_compile(A,{override:!1})),e.$_setFlag("empty",A,{clone:!1})}error(A){return r(A,"Missing error"),r(A instanceof Error||"function"==typeof A,"Must provide a valid Error object or a function"),this.$_setFlag("error",A)}example(A,e={}){return r(void 0!==A,"Missing example"),a.assertOptions(e,["override"]),this._inner("examples",A,{single:!0,override:e.override})}external(A,e){return"object"==typeof A&&(r(!e,"Cannot combine options with description"),e=A.description,A=A.method),r("function"==typeof A,"Method must be a function"),r(void 0===e||e&&"string"==typeof e,"Description must be a non-empty string"),this._inner("externals",{method:A,description:e},{single:!0})}failover(A,e){return this._default("failover",A,e)}forbidden(){return this.presence("forbidden")}id(A){return A?(r("string"==typeof A,"id must be a non-empty string"),r(/^[^\.]+$/.test(A),"id cannot contain period character"),this.$_setFlag("id",A)):this.$_setFlag("id",void 0)}invalid(...A){return this._values(A,"_invalids")}label(A){return r(A&&"string"==typeof A,"Label name must be a non-empty string"),this.$_setFlag("label",A)}meta(A){return r(void 0!==A,"Meta cannot be undefined"),this._inner("metas",A,{single:!0})}note(...A){r(A.length,"Missing notes");for(const e of A)r(e&&"string"==typeof e,"Notes must be non-empty strings");return this._inner("notes",A)}only(A=!0){return r("boolean"==typeof A,"Invalid mode:",A),this.$_setFlag("only",A)}optional(){return this.presence("optional")}prefs(A){r(A,"Missing preferences"),r(void 0===A.context,"Cannot override context"),r(void 0===A.externals,"Cannot override externals"),r(void 0===A.warnings,"Cannot override warnings"),r(void 0===A.debug,"Cannot override debug"),a.checkPreferences(A);const e=this.clone();return e._preferences=a.preferences(e._preferences,A),e}presence(A){return r(["optional","required","forbidden"].includes(A),"Unknown presence mode",A),this.$_setFlag("presence",A)}raw(A=!0){return this.$_setFlag("result",A?"raw":void 0)}result(A){return r(["raw","strip"].includes(A),"Unknown result mode",A),this.$_setFlag("result",A)}required(){return this.presence("required")}strict(A){const e=this.clone(),t=void 0!==A&&!A;return e._preferences=a.preferences(e._preferences,{convert:t}),e}strip(A=!0){return this.$_setFlag("result",A?"strip":void 0)}tag(...A){r(A.length,"Missing tags");for(const e of A)r(e&&"string"==typeof e,"Tags must be non-empty strings");return this._inner("tags",A)}unit(A){return r(A&&"string"==typeof A,"Unit name must be a non-empty string"),this.$_setFlag("unit",A)}valid(...A){a.verifyFlat(A,"valid");const e=this.allow(...A);return e.$_setFlag("only",!!e._valids,{clone:!1}),e}when(A,e){const t=this.clone();t.$_terms.whens||(t.$_terms.whens=[]);const i=l.when(t,A,e);if(!["any","link"].includes(t.type)){const A=i.is?[i]:i.switch;for(const e of A)r(!e.then||"any"===e.then.type||e.then.type===t.type,"Cannot combine",t.type,"with",e.then&&e.then.type),r(!e.otherwise||"any"===e.otherwise.type||e.otherwise.type===t.type,"Cannot combine",t.type,"with",e.otherwise&&e.otherwise.type)}return t.$_terms.whens.push(i),t.$_mutateRebuild()}cache(A){r(!this._inRuleset(),"Cannot set caching inside a ruleset"),r(!this._cache,"Cannot override schema cache"),r(void 0===this._flags.artifact,"Cannot cache a rule with an artifact");const e=this.clone();return e._cache=A||s.provider.provision(),e.$_temp.ruleset=!1,e}clone(){const A=Object.create(Object.getPrototypeOf(this));return this._assign(A)}concat(A){r(a.isSchema(A),"Invalid schema object"),r("any"===this.type||"any"===A.type||A.type===this.type,"Cannot merge type",this.type,"with another type:",A.type),r(!this._inRuleset(),"Cannot concatenate onto a schema with open ruleset"),r(!A._inRuleset(),"Cannot concatenate a schema with open ruleset");let e=this.clone();if("any"===this.type&&"any"!==A.type){const t=A.clone();for(const A of Object.keys(e))"type"!==A&&(t[A]=e[A]);e=t}e._ids.concat(A._ids),e._refs.register(A,B.toSibling),e._preferences=e._preferences?a.preferences(e._preferences,A._preferences):A._preferences,e._valids=p.merge(e._valids,A._valids,A._invalids),e._invalids=p.merge(e._invalids,A._invalids,A._valids);for(const t of A._singleRules.keys())e._singleRules.has(t)&&(e._rules=e._rules.filter((A=>A.keep||A.name!==t)),e._singleRules.delete(t));for(const t of A._rules)A._definition.rules[t.method].multi||e._singleRules.set(t.name,t),e._rules.push(t);if(e._flags.empty&&A._flags.empty){e._flags.empty=e._flags.empty.concat(A._flags.empty);const t=Object.assign({},A._flags);delete t.empty,o(e._flags,t)}else if(A._flags.empty){e._flags.empty=A._flags.empty;const t=Object.assign({},A._flags);delete t.empty,o(e._flags,t)}else o(e._flags,A._flags);for(const t in A.$_terms){const r=A.$_terms[t];r?e.$_terms[t]?e.$_terms[t]=e.$_terms[t].concat(r):e.$_terms[t]=r.slice():e.$_terms[t]||(e.$_terms[t]=r)}return this.$_root._tracer&&this.$_root._tracer._combine(e,[this,A]),e.$_mutateRebuild()}extend(A){return r(!A.base,"Cannot extend type with another base"),g.type(this,A)}extract(A){return A=Array.isArray(A)?A:A.split("."),this._ids.reach(A)}fork(A,e){r(!this._inRuleset(),"Cannot fork inside a ruleset");let t=this;for(let r of[].concat(A))r=Array.isArray(r)?r:r.split("."),t=t._ids.fork(r,e,t);return t.$_temp.ruleset=!1,t}rule(A){const e=this._definition;a.assertOptions(A,Object.keys(e.modifiers)),r(!1!==this.$_temp.ruleset,"Cannot apply rules to empty ruleset or the last rule added does not support rule properties");const t=null===this.$_temp.ruleset?this._rules.length-1:this.$_temp.ruleset;r(t>=0&&t<this._rules.length,"Cannot apply rules to empty ruleset");const n=this.clone();for(let o=t;o<n._rules.length;++o){const t=n._rules[o],s=i(t);for(const i in A)e.modifiers[i](s,A[i]),r(s.name===t.name,"Cannot change rule name");n._rules[o]=s,n._singleRules.get(s.name)===t&&n._singleRules.set(s.name,s)}return n.$_temp.ruleset=!1,n.$_mutateRebuild()}get ruleset(){r(!this._inRuleset(),"Cannot start a new ruleset without closing the previous one");const A=this.clone();return A.$_temp.ruleset=A._rules.length,A}get $(){return this.ruleset}tailor(A){A=[].concat(A),r(!this._inRuleset(),"Cannot tailor inside a ruleset");let e=this;if(this.$_terms.alterations)for(const{target:t,adjuster:i}of this.$_terms.alterations)A.includes(t)&&(e=i(e),r(a.isSchema(e),"Alteration adjuster for",t,"failed to return a schema object"));return e=e.$_modify({each:e=>e.tailor(A),ref:!1}),e.$_temp.ruleset=!1,e.$_mutateRebuild()}tracer(){return I.location?I.location(this):this}validate(A,e){return f.entry(A,this,e)}validateAsync(A,e){return f.entryAsync(A,this,e)}$_addRule(A){"string"==typeof A&&(A={name:A}),r(A&&"object"==typeof A,"Invalid options"),r(A.name&&"string"==typeof A.name,"Invalid rule name");for(const e in A)r("_"!==e[0],"Cannot set private rule properties");const e=Object.assign({},A);e._resolve=[],e.method=e.method||e.name;const t=this._definition.rules[e.method],i=e.args;r(t,"Unknown rule",e.method);const n=this.clone();if(i){r(1===Object.keys(i).length||Object.keys(i).length===this._definition.rules[e.name].args.length,"Invalid rule definition for",this.type,e.name);for(const A in i){let o=i[A];if(void 0!==o){if(t.argsByName){const s=t.argsByName.get(A);if(s.ref&&a.isResolvable(o))e._resolve.push(A),n.$_mutateRegister(o);else if(s.normalize&&(o=s.normalize(o),i[A]=o),s.assert){const e=a.validateArg(o,A,s);r(!e,e,"or reference")}}i[A]=o}else delete i[A]}}return t.multi||(n._ruleRemove(e.name,{clone:!1}),n._singleRules.set(e.name,e)),!1===n.$_temp.ruleset&&(n.$_temp.ruleset=null),t.priority?n._rules.unshift(e):n._rules.push(e),n}$_compile(A,e){return l.schema(this.$_root,A,e)}$_createError(A,e,t,r,i,n={}){const o=!1!==n.flags?this._flags:{},s=n.messages?h.merge(this._definition.messages,n.messages):this._definition.messages;return new c.Report(A,e,t,o,s,r,i)}$_getFlag(A){return this._flags[A]}$_getRule(A){return this._singleRules.get(A)}$_mapLabels(A){return A=Array.isArray(A)?A:A.split("."),this._ids.labels(A)}$_match(A,e,t,r){(t=Object.assign({},t)).abortEarly=!0,t._externals=!1,e.snapshot();const i=!f.validate(A,this,e,t,r).errors;return e.restore(),i}$_modify(A){return a.assertOptions(A,["each","once","ref","schema"]),E.schema(this,A)||this}$_mutateRebuild(){return r(!this._inRuleset(),"Cannot add this rule inside a ruleset"),this._refs.reset(),this._ids.reset(),this.$_modify({each:(A,{source:e,name:t,path:r,key:i})=>{const n=this._definition[e][t]&&this._definition[e][t].register;!1!==n&&this.$_mutateRegister(A,{family:n,key:i})}}),this._definition.rebuild&&this._definition.rebuild(this),this.$_temp.ruleset=!1,this}$_mutateRegister(A,{family:e,key:t}={}){this._refs.register(A,e),this._ids.register(A,{key:t})}$_property(A){return this._definition.properties[A]}$_reach(A){return this._ids.reach(A)}$_rootReferences(){return this._refs.roots()}$_setFlag(A,e,t={}){r("_"===A[0]||!this._inRuleset(),"Cannot set flag inside a ruleset");const i=this._definition.flags[A]||{};if(n(e,i.default)&&(e=void 0),n(e,this._flags[A]))return this;const o=!1!==t.clone?this.clone():this;return void 0!==e?(o._flags[A]=e,o.$_mutateRegister(e)):delete o._flags[A],"_"!==A[0]&&(o.$_temp.ruleset=!1),o}$_parent(A,...e){return this[A][a.symbols.parent].call(this,...e)}$_validate(A,e,t){return f.validate(A,this,e,t)}_assign(A){A.type=this.type,A.$_root=this.$_root,A.$_temp=Object.assign({},this.$_temp),A.$_temp.whens={},A._ids=this._ids.clone(),A._preferences=this._preferences,A._valids=this._valids&&this._valids.clone(),A._invalids=this._invalids&&this._invalids.clone(),A._rules=this._rules.slice(),A._singleRules=i(this._singleRules,{shallow:!0}),A._refs=this._refs.clone(),A._flags=Object.assign({},this._flags),A._cache=null,A.$_terms={};for(const e in this.$_terms)A.$_terms[e]=this.$_terms[e]?this.$_terms[e].slice():null;A.$_super={};for(const e in this.$_super)A.$_super[e]=this._super[e].bind(A);return A}_bare(){const A=this.clone();A._reset();const e=A._definition.terms;for(const t in e){const r=e[t];A.$_terms[t]=r.init}return A.$_mutateRebuild()}_default(A,e,t={}){return a.assertOptions(t,"literal"),r(void 0!==e,"Missing",A,"value"),r("function"==typeof e||!t.literal,"Only function value supports literal option"),"function"==typeof e&&t.literal&&(e={[a.symbols.literal]:!0,literal:e}),this.$_setFlag(A,e)}_generate(A,e,t){if(!this.$_terms.whens)return{schema:this};const r=[],i=[];for(let n=0;n<this.$_terms.whens.length;++n){const o=this.$_terms.whens[n];if(o.concat){r.push(o.concat),i.push("".concat(n,".concat"));continue}const s=o.ref?o.ref.resolve(A,e,t):A,a=o.is?[o]:o.switch,l=i.length;for(let l=0;l<a.length;++l){const{is:c,then:g,otherwise:u}=a[l],h="".concat(n).concat(o.switch?"."+l:"");if(c.$_match(s,e.nest(c,"".concat(h,".is")),t)){if(g){const n=e.localize([...e.path,"".concat(h,".then")],e.ancestors,e.schemas),{schema:o,id:s}=g._generate(A,n,t);r.push(o),i.push("".concat(h,".then").concat(s?"(".concat(s,")"):""));break}}else if(u){const n=e.localize([...e.path,"".concat(h,".otherwise")],e.ancestors,e.schemas),{schema:o,id:s}=u._generate(A,n,t);r.push(o),i.push("".concat(h,".otherwise").concat(s?"(".concat(s,")"):""));break}}if(o.break&&i.length>l)break}const n=i.join(", ");if(e.mainstay.tracer.debug(e,"rule","when",n),!n)return{schema:this};if(!e.mainstay.tracer.active&&this.$_temp.whens[n])return{schema:this.$_temp.whens[n],id:n};let o=this;this._definition.generate&&(o=this._definition.generate(this,A,e,t));for(const A of r)o=o.concat(A);return this.$_root._tracer&&this.$_root._tracer._combine(o,[this,...r]),this.$_temp.whens[n]=o,{schema:o,id:n}}_inner(A,e,t={}){r(!this._inRuleset(),"Cannot set ".concat(A," inside a ruleset"));const i=this.clone();return i.$_terms[A]&&!t.override||(i.$_terms[A]=[]),t.single?i.$_terms[A].push(e):i.$_terms[A].push(...e),i.$_temp.ruleset=!1,i}_inRuleset(){return null!==this.$_temp.ruleset&&!1!==this.$_temp.ruleset}_ruleRemove(A,e={}){if(!this._singleRules.has(A))return this;const t=!1!==e.clone?this.clone():this;t._singleRules.delete(A);const r=[];for(let e=0;e<t._rules.length;++e){const i=t._rules[e];i.name!==A||i.keep?r.push(i):t._inRuleset()&&e<t.$_temp.ruleset&&--t.$_temp.ruleset}return t._rules=r,t}_values(A,e){a.verifyFlat(A,e.slice(1,-1));const t=this.clone(),i=A[0]===a.symbols.override;if(i&&(A=A.slice(1)),!t[e]&&A.length?t[e]=new p:i&&(t[e]=A.length?new p:null,t.$_mutateRebuild()),!t[e])return t;i&&t[e].override();for(const i of A){r(void 0!==i,"Cannot call allow/valid/invalid with undefined"),r(i!==a.symbols.override,"Override must be the first value");const A="_invalids"===e?"_valids":"_invalids";t[A]&&(t[A].remove(i),t[A].length||(r("_valids"===e||!t._flags.only,"Setting invalid value",i,"leaves schema rejecting all values due to previous valid rule"),t[A]=null)),t[e].add(i,t._refs)}return t}}};d.Base.prototype[a.symbols.any]={version:a.version,compile:l.compile,root:"$_root"},d.Base.prototype.isImmutable=!0,d.Base.prototype.deny=d.Base.prototype.invalid,d.Base.prototype.disallow=d.Base.prototype.invalid,d.Base.prototype.equal=d.Base.prototype.valid,d.Base.prototype.exist=d.Base.prototype.required,d.Base.prototype.not=d.Base.prototype.invalid,d.Base.prototype.options=d.Base.prototype.prefs,d.Base.prototype.preferences=d.Base.prototype.prefs,A.exports=new d.Base},function(A,e,t){"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(0),s=t(1),a=t(5),l={};e.Ids=l.Ids=class{constructor(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}clone(){const A=new l.Ids;return A._byId=new Map(this._byId),A._byKey=new Map(this._byKey),A._schemaChain=this._schemaChain,A}concat(A){A._schemaChain&&(this._schemaChain=!0);for(const[e,t]of A._byId.entries())o(!this._byKey.has(e),"Schema id conflicts with existing key:",e),this._byId.set(e,t);for(const[e,t]of A._byKey.entries())o(!this._byId.has(e),"Schema key conflicts with existing id:",e),this._byKey.set(e,t)}fork(A,e,t){const r=this._collect(A);r.push({schema:t});const i=r.shift();let n={id:i.id,schema:e(i.schema)};o(s.isSchema(n.schema),"adjuster function failed to return a joi schema type");for(const A of r)n={id:A.id,schema:l.fork(A.schema,n.id,n.schema)};return n.schema}labels(A,e=[]){const t=A[0],r=this._get(t);if(!r)return[...e,...A].join(".");const i=A.slice(1);return e=[...e,r.schema._flags.label||t],i.length?r.schema._ids.labels(i,e):e.join(".")}reach(A,e=[]){const t=A[0],r=this._get(t);o(r,"Schema does not contain path",[...e,...A].join("."));const i=A.slice(1);return i.length?r.schema._ids.reach(i,[...e,t]):r.schema}register(A,{key:e}={}){if(!A||!s.isSchema(A))return;(A.$_property("schemaChain")||A._ids._schemaChain)&&(this._schemaChain=!0);const t=A._flags.id;if(t){const e=this._byId.get(t);o(!e||e.schema===A,"Cannot add different schemas with the same id:",t),o(!this._byKey.has(t),"Schema id conflicts with existing key:",t),this._byId.set(t,{schema:A,id:t})}e&&(o(!this._byKey.has(e),"Schema already contains key:",e),o(!this._byId.has(e),"Schema key conflicts with existing id:",e),this._byKey.set(e,{schema:A,id:e}))}reset(){this._byId=new Map,this._byKey=new Map,this._schemaChain=!1}_collect(A,e=[],t=[]){const r=A[0],i=this._get(r);o(i,"Schema does not contain path",[...e,...A].join(".")),t=[i,...t];const n=A.slice(1);return n.length?i.schema._ids._collect(n,[...e,r],t):t}_get(A){return this._byId.get(A)||this._byKey.get(A)}},l.fork=function(A,t,r){const i=e.schema(A,{each:(A,{key:e})=>{if(t===(A._flags.id||e))return r},ref:!1});return i?i.$_mutateRebuild():A},e.schema=function(A,e){let t;for(const r in A._flags){if("_"===r[0])continue;const i=l.scan(A._flags[r],{source:"flags",name:r},e);void 0!==i&&(t=t||A.clone(),t._flags[r]=i)}for(let r=0;r<A._rules.length;++r){const i=A._rules[r],n=l.scan(i.args,{source:"rules",name:i.name},e);if(void 0!==n){t=t||A.clone();const e=Object.assign({},i);e.args=n,t._rules[r]=e,t._singleRules.get(i.name)===i&&t._singleRules.set(i.name,e)}}for(const r in A.$_terms){if("_"===r[0])continue;const i=l.scan(A.$_terms[r],{source:"terms",name:r},e);void 0!==i&&(t=t||A.clone(),t.$_terms[r]=i)}return t},l.scan=function(A,e,t,r,n){const o=r||[];if(null===A||"object"!=typeof A)return;let c;if(Array.isArray(A)){for(let r=0;r<A.length;++r){const i="terms"===e.source&&"keys"===e.name&&A[r].key,n=l.scan(A[r],e,t,[r,...o],i);void 0!==n&&(c=c||A.slice(),c[r]=n)}return c}if(!1!==t.schema&&s.isSchema(A)||!1!==t.ref&&a.isRef(A)){const r=t.each(A,i(i({},e),{},{path:o,key:n}));if(r===A)return;return r}for(const r in A){if("_"===r[0])continue;const i=l.scan(A[r],e,t,[r,...o],n);void 0!==i&&(c=c||Object.assign({},A),c[r]=i)}return c}},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(37),o=t(6),s=t(1),a=t(4),l=t(38),c={result:Symbol("result")};e.entry=function(A,e,t){let i=s.defaults;t&&(r(void 0===t.warnings,"Cannot override warnings preference in synchronous validation"),r(void 0===t.artifacts,"Cannot override artifacts preference in synchronous validation"),i=s.preferences(s.defaults,t));const n=c.entry(A,e,i);r(!n.mainstay.externals.length,"Schema with external rules must use validateAsync()");const o={value:n.value};return n.error&&(o.error=n.error),n.mainstay.warnings.length&&(o.warning=a.details(n.mainstay.warnings)),n.mainstay.debug&&(o.debug=n.mainstay.debug),n.mainstay.artifacts&&(o.artifacts=n.mainstay.artifacts),o},e.entryAsync=async function(A,e,t){let r=s.defaults;t&&(r=s.preferences(s.defaults,t));const i=c.entry(A,e,r),n=i.mainstay;if(i.error)throw n.debug&&(i.error.debug=n.debug),i.error;if(n.externals.length){let e=i.value;for(const{method:r,path:i,label:s}of n.externals){let n,a,l=e;i.length&&(n=i[i.length-1],a=o(e,i.slice(0,-1)),l=a[n]);try{const A=await r(l,{prefs:t});if(void 0===A||A===l)continue;a?a[n]=A:e=A}catch(A){throw A.message+=" (".concat(s,")"),A}}i.value=e}if(!r.warnings&&!r.debug&&!r.artifacts)return i.value;const l={value:i.value};return n.warnings.length&&(l.warning=a.details(n.warnings)),n.debug&&(l.debug=n.debug),n.artifacts&&(l.artifacts=n.artifacts),l},c.entry=function(A,t,r){const{tracer:i,cleanup:n}=c.tracer(t,r),o={externals:[],warnings:[],tracer:i,debug:r.debug?[]:null,links:t._ids._schemaChain?new Map:null},s=t._ids._schemaChain?[{schema:t}]:null,g=new l([],[],{mainstay:o,schemas:s}),u=e.validate(A,t,g,r);n&&t.$_root.untrace();const h=a.process(u.errors,A,r);return{value:u.value,error:h,mainstay:o}},c.tracer=function(A,e){return A.$_root._tracer?{tracer:A.$_root._tracer._register(A)}:e.debug?(r(A.$_root.trace,"Debug mode not supported"),{tracer:A.$_root.trace()._register(A),cleanup:!0}):{tracer:c.ignore}},e.validate=function(A,e,t,r,i={}){if(e.$_terms.whens&&(e=e._generate(A,t,r).schema),e._preferences&&(r=c.prefs(e,r)),e._cache&&r.cache){const r=e._cache.get(A);if(t.mainstay.tracer.debug(t,"validate","cached",!!r),r)return r}const n=(i,n,o)=>e.$_createError(i,A,n,o||t,r),o={original:A,prefs:r,schema:e,state:t,error:n,errorsArray:c.errorsArray,warn:(A,e,r)=>t.mainstay.warnings.push(n(A,e,r)),message:(i,n)=>e.$_createError("custom",A,n,t,r,{messages:i})};t.mainstay.tracer.entry(e,t);const a=e._definition;if(a.prepare&&void 0!==A&&r.convert){const e=a.prepare(A,o);if(e){if(t.mainstay.tracer.value(t,"prepare",A,e.value),e.errors)return c.finalize(e.value,[].concat(e.errors),o);A=e.value}}if(a.coerce&&void 0!==A&&r.convert&&(!a.coerce.from||a.coerce.from.includes(typeof A))){const e=a.coerce.method(A,o);if(e){if(t.mainstay.tracer.value(t,"coerced",A,e.value),e.errors)return c.finalize(e.value,[].concat(e.errors),o);A=e.value}}const l=e._flags.empty;l&&l.$_match(c.trim(A,e),t.nest(l),s.defaults)&&(t.mainstay.tracer.value(t,"empty",A,void 0),A=void 0);const g=i.presence||e._flags.presence||(e._flags._endedSwitch?null:r.presence);if(void 0===A){if("forbidden"===g)return c.finalize(A,null,o);if("required"===g)return c.finalize(A,[e.$_createError("any.required",A,null,t,r)],o);if("optional"===g){if(e._flags.default!==s.symbols.deepDefault)return c.finalize(A,null,o);t.mainstay.tracer.value(t,"default",A,{}),A={}}}else if("forbidden"===g)return c.finalize(A,[e.$_createError("any.unknown",A,null,t,r)],o);const u=[];if(e._valids){const i=e._valids.get(A,t,r,e._flags.insensitive);if(i)return r.convert&&(t.mainstay.tracer.value(t,"valids",A,i.value),A=i.value),t.mainstay.tracer.filter(e,t,"valid",i),c.finalize(A,null,o);if(e._flags.only){const i=e.$_createError("any.only",A,{valids:e._valids.values({display:!0})},t,r);if(r.abortEarly)return c.finalize(A,[i],o);u.push(i)}}if(e._invalids){const i=e._invalids.get(A,t,r,e._flags.insensitive);if(i){t.mainstay.tracer.filter(e,t,"invalid",i);const n=e.$_createError("any.invalid",A,{invalids:e._invalids.values({display:!0})},t,r);if(r.abortEarly)return c.finalize(A,[n],o);u.push(n)}}if(a.validate){const e=a.validate(A,o);if(e&&(t.mainstay.tracer.value(t,"base",A,e.value),A=e.value,e.errors)){if(!Array.isArray(e.errors))return u.push(e.errors),c.finalize(A,u,o);if(e.errors.length)return u.push(...e.errors),c.finalize(A,u,o)}}return e._rules.length?c.rules(A,u,o):c.finalize(A,u,o)},c.rules=function(A,e,t){const{schema:r,state:i,prefs:n}=t;for(const o of r._rules){const a=r._definition.rules[o.method];if(a.convert&&n.convert){i.mainstay.tracer.log(r,i,"rule",o.name,"full");continue}let l,g=o.args;if(o._resolve.length){g=Object.assign({},g);for(const e of o._resolve){const t=a.argsByName.get(e),o=g[e].resolve(A,i,n),c=t.normalize?t.normalize(o):o,u=s.validateArg(c,null,t);if(u){l=r.$_createError("any.ref",o,{arg:e,ref:g[e],reason:u},i,n);break}g[e]=c}}l=l||a.validate(A,t,g,o);const u=c.rule(l,o);if(u.errors){if(i.mainstay.tracer.log(r,i,"rule",o.name,"error"),o.warn){i.mainstay.warnings.push(...u.errors);continue}if(n.abortEarly)return c.finalize(A,u.errors,t);e.push(...u.errors)}else i.mainstay.tracer.log(r,i,"rule",o.name,"pass"),i.mainstay.tracer.value(i,"rule",A,u.value,o.name),A=u.value}return c.finalize(A,e,t)},c.rule=function(A,e){return A instanceof a.Report?(c.error(A,e),{errors:[A],value:null}):Array.isArray(A)&&A[s.symbols.errors]?(A.forEach((A=>c.error(A,e))),{errors:A,value:null}):{errors:null,value:A}},c.error=function(A,e){return e.message&&A._setTemplate(e.message),A},c.finalize=function(A,e,t){e=e||[];const{schema:i,state:n,prefs:o}=t;if(e.length){const r=c.default("failover",void 0,e,t);void 0!==r&&(n.mainstay.tracer.value(n,"failover",A,r),A=r,e=[])}if(e.length&&i._flags.error)if("function"==typeof i._flags.error){e=i._flags.error(e),Array.isArray(e)||(e=[e]);for(const A of e)r(A instanceof Error||A instanceof a.Report,"error() must return an Error object")}else e=[i._flags.error];if(void 0===A){const r=c.default("default",A,e,t);n.mainstay.tracer.value(n,"default",A,r),A=r}if(i._flags.cast&&void 0!==A){const e=i._definition.cast[i._flags.cast];if(e.from(A)){const r=e.to(A,t);n.mainstay.tracer.value(n,"cast",A,r,i._flags.cast),A=r}}if(i.$_terms.externals&&o.externals&&!1!==o._externals)for(const{method:A}of i.$_terms.externals)n.mainstay.externals.push({method:A,path:n.path,label:a.label(i._flags,n,o)});const s={value:A,errors:e.length?e:null};return i._flags.result&&(s.value="strip"===i._flags.result?void 0:t.original,n.mainstay.tracer.value(n,i._flags.result,A,s.value),n.shadow(A,i._flags.result)),i._cache&&!1!==o.cache&&!i._refs.length&&i._cache.set(t.original,s),void 0===A||s.errors||void 0===i._flags.artifact||(n.mainstay.artifacts=n.mainstay.artifacts||new Map,n.mainstay.artifacts.has(i._flags.artifact)||n.mainstay.artifacts.set(i._flags.artifact,[]),n.mainstay.artifacts.get(i._flags.artifact).push(n.path)),s},c.prefs=function(A,e){const t=e===s.defaults;return t&&A._preferences[s.symbols.prefs]?A._preferences[s.symbols.prefs]:(e=s.preferences(e,A._preferences),t&&(A._preferences[s.symbols.prefs]=e),e)},c.default=function(A,e,t,r){const{schema:n,state:o,prefs:a}=r,l=n._flags[A];if(a.noDefaults||void 0===l)return e;if(o.mainstay.tracer.log(n,o,"rule",A,"full"),!l)return l;if("function"==typeof l){const s=l.length?[i(o.ancestors[0]),r]:[];try{return l(...s)}catch(e){return void t.push(n.$_createError("any.".concat(A),null,{error:e},o,a))}}return"object"!=typeof l?l:l[s.symbols.literal]?l.literal:s.isResolvable(l)?l.resolve(e,o,a):i(l)},c.trim=function(A,e){if("string"!=typeof A)return A;const t=e.$_getRule("trim");return t&&t.args.enabled?A.trim():A},c.ignore={active:!1,debug:n,entry:n,filter:n,log:n,resolve:n,value:n},c.errorsArray=function(){const A=[];return A[s.symbols.errors]=!0,A}},function(A,e,t){"use strict";A.exports=function(){}},function(A,e,t){"use strict";const r=t(2),i=t(6),n=t(1),o={value:Symbol("value")};A.exports=o.State=class{constructor(A,e,t){this.path=A,this.ancestors=e,this.mainstay=t.mainstay,this.schemas=t.schemas,this.debug=null}localize(A,e=null,t=null){const r=new o.State(A,e,this);return t&&r.schemas&&(r.schemas=[o.schemas(t),...r.schemas]),r}nest(A,e){const t=new o.State(this.path,this.ancestors,this);return t.schemas=t.schemas&&[o.schemas(A),...t.schemas],t.debug=e,t}shadow(A,e){this.mainstay.shadow=this.mainstay.shadow||new o.Shadow,this.mainstay.shadow.set(this.path,A,e)}snapshot(){this.mainstay.shadow&&(this._snapshot=r(this.mainstay.shadow.node(this.path)))}restore(){this.mainstay.shadow&&(this.mainstay.shadow.override(this.path,this._snapshot),this._snapshot=void 0)}},o.schemas=function(A){return n.isSchema(A)?{schema:A}:A},o.Shadow=class{constructor(){this._values=null}set(A,e,t){if(!A.length)return;if("strip"===t&&"number"==typeof A[A.length-1])return;this._values=this._values||new Map;let r=this._values;for(let e=0;e<A.length;++e){const t=A[e];let i=r.get(t);i||(i=new Map,r.set(t,i)),r=i}r[o.value]=e}get(A){const e=this.node(A);if(e)return e[o.value]}node(A){if(this._values)return i(this._values,A,{iterables:!0})}override(A,e){if(!this._values)return;const t=A.slice(0,-1),r=A[A.length-1],n=i(this._values,t,{iterables:!0});e?n.set(r,e):n&&n.delete(r)}}},function(A,e,t){"use strict";const r=t(0),i=t(10),n=t(6),o=t(3),s=t(1),a=t(8),l={};A.exports=o.extend({type:"array",flags:{single:{default:!1},sparse:{default:!1}},terms:{items:{init:[],manifest:"schema"},ordered:{init:[],manifest:"schema"},_exclusions:{init:[]},_inclusions:{init:[]},_requireds:{init:[]}},coerce:{from:"object",method(A,{schema:e,state:t,prefs:r}){if(!Array.isArray(A))return;const i=e.$_getRule("sort");return i?l.sort(e,A,i.args.options,t,r):void 0}},validate(A,{schema:e,error:t}){if(!Array.isArray(A)){if(e._flags.single){const e=[A];return e[s.symbols.arraySingle]=!0,{value:e}}return{errors:t("array.base")}}if(e.$_getRule("items")||e.$_terms.externals)return{value:A.slice()}},rules:{has:{method(A){A=this.$_compile(A,{appendPath:!0});const e=this.$_addRule({name:"has",args:{schema:A}});return e.$_mutateRegister(A),e},validate(A,{state:e,prefs:t,error:r},{schema:i}){const n=[A,...e.ancestors];for(let r=0;r<A.length;++r){const o=e.localize([...e.path,r],n,i);if(i.$_match(A[r],o,t))return A}const o=i._flags.label;return o?r("array.hasKnown",{patternLabel:o}):r("array.hasUnknown",null)},multi:!0},items:{method(...A){s.verifyFlat(A,"items");const e=this.$_addRule("items");for(let t=0;t<A.length;++t){const r=s.tryWithPath((()=>this.$_compile(A[t])),t,{append:!0});e.$_terms.items.push(r)}return e.$_mutateRebuild()},validate(A,{schema:e,error:t,state:r,prefs:i,errorsArray:n}){const o=e.$_terms._requireds.slice(),a=e.$_terms.ordered.slice(),c=[...e.$_terms._inclusions,...o],g=!A[s.symbols.arraySingle];delete A[s.symbols.arraySingle];const u=n();let h=A.length;for(let n=0;n<h;++n){const s=A[n];let E=!1,B=!1;const I=g?n:new Number(n),f=[...r.path,I];if(!e._flags.sparse&&void 0===s){if(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),i.abortEarly)return u;a.shift();continue}const p=[A,...r.ancestors];for(const A of e.$_terms._exclusions)if(A.$_match(s,r.localize(f,p,A),i,{presence:"ignore"})){if(u.push(t("array.excludes",{pos:n,value:s},r.localize(f))),i.abortEarly)return u;E=!0,a.shift();break}if(E)continue;if(e.$_terms.ordered.length){if(a.length){const o=a.shift(),c=o.$_validate(s,r.localize(f,p,o),i);if(c.errors){if(u.push(...c.errors),i.abortEarly)return u}else if("strip"===o._flags.result)l.fastSplice(A,n),--n,--h;else{if(!e._flags.sparse&&void 0===c.value){if(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),i.abortEarly)return u;continue}A[n]=c.value}continue}if(!e.$_terms.items.length){if(u.push(t("array.orderedLength",{pos:n,limit:e.$_terms.ordered.length})),i.abortEarly)return u;break}}const d=[];let w=o.length;for(let a=0;a<w;++a){const c=r.localize(f,p,o[a]);c.snapshot();const g=o[a].$_validate(s,c,i);if(d[a]=g,!g.errors){if(A[n]=g.value,B=!0,l.fastSplice(o,a),--a,--w,!e._flags.sparse&&void 0===g.value&&(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),i.abortEarly))return u;break}c.restore()}if(B)continue;const m=i.stripUnknown&&!!i.stripUnknown.arrays||!1;w=c.length;for(const a of c){let c;const g=o.indexOf(a);if(-1!==g)c=d[g];else{const o=r.localize(f,p,a);if(o.snapshot(),c=a.$_validate(s,o,i),!c.errors){"strip"===a._flags.result?(l.fastSplice(A,n),--n,--h):e._flags.sparse||void 0!==c.value?A[n]=c.value:(u.push(t("array.sparse",{key:I,path:f,pos:n,value:void 0},r.localize(f))),E=!0),B=!0;break}o.restore()}if(1===w){if(m){l.fastSplice(A,n),--n,--h,B=!0;break}if(u.push(...c.errors),i.abortEarly)return u;E=!0;break}}if(!E&&e.$_terms._inclusions.length&&!B){if(m){l.fastSplice(A,n),--n,--h;continue}if(u.push(t("array.includes",{pos:n,value:s},r.localize(f))),i.abortEarly)return u}}return o.length&&l.fillMissedErrors(e,u,o,A,r,i),a.length&&l.fillOrderedErrors(e,u,a,A,r,i),u.length?u:A},priority:!0,manifest:!1},length:{method(A){return this.$_addRule({name:"length",args:{limit:A},operator:"="})},validate:(A,e,{limit:t},{name:r,operator:i,args:n})=>s.compare(A.length,t,i)?A:e.error("array."+r,{limit:n.limit,value:A}),args:[{name:"limit",ref:!0,assert:s.limit,message:"must be a positive integer"}]},max:{method(A){return this.$_addRule({name:"max",method:"length",args:{limit:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"length",args:{limit:A},operator:">="})}},ordered:{method(...A){s.verifyFlat(A,"ordered");const e=this.$_addRule("items");for(let t=0;t<A.length;++t){const r=s.tryWithPath((()=>this.$_compile(A[t])),t,{append:!0});l.validateSingle(r,e),e.$_mutateRegister(r),e.$_terms.ordered.push(r)}return e.$_mutateRebuild()}},single:{method(A){const e=void 0===A||!!A;return r(!e||!this._flags._arrayItems,"Cannot specify single rule when array has array items"),this.$_setFlag("single",e)}},sort:{method(A={}){s.assertOptions(A,["by","order"]);const e={order:A.order||"ascending"};return A.by&&(e.by=a.ref(A.by,{ancestor:0}),r(!e.by.ancestor,"Cannot sort by ancestor")),this.$_addRule({name:"sort",args:{options:e}})},validate(A,{error:e,state:t,prefs:r,schema:i},{options:n}){const{value:o,errors:s}=l.sort(i,A,n,t,r);if(s)return s;for(let t=0;t<A.length;++t)if(A[t]!==o[t])return e("array.sort",{order:n.order,by:n.by?n.by.key:"value"});return A},convert:!0},sparse:{method(A){const e=void 0===A||!!A;return this._flags.sparse===e?this:(e?this.clone():this.$_addRule("items")).$_setFlag("sparse",e,{clone:!1})}},unique:{method(A,e={}){r(!A||"function"==typeof A||"string"==typeof A,"comparator must be a function or a string"),s.assertOptions(e,["ignoreUndefined","separator"]);const t={name:"unique",args:{options:e,comparator:A}};if(A)if("string"==typeof A){const r=s.default(e.separator,".");t.path=r?A.split(r):[A]}else t.comparator=A;return this.$_addRule(t)},validate(A,{state:e,error:t,schema:o},{comparator:s,options:a},{comparator:l,path:c}){const g={string:Object.create(null),number:Object.create(null),undefined:Object.create(null),boolean:Object.create(null),object:new Map,function:new Map,custom:new Map},u=l||i,h=a.ignoreUndefined;for(let i=0;i<A.length;++i){const o=c?n(A[i],c):A[i],a=l?g.custom:g[typeof o];if(r(a,"Failed to find unique map container for type",typeof o),a instanceof Map){const r=a.entries();let n;for(;!(n=r.next()).done;)if(u(n.value[0],o)){const r=e.localize([...e.path,i],[A,...e.ancestors]),o={pos:i,value:A[i],dupePos:n.value[1],dupeValue:A[n.value[1]]};return c&&(o.path=s),t("array.unique",o,r)}a.set(o,i)}else{if((!h||void 0!==o)&&void 0!==a[o]){const r={pos:i,value:A[i],dupePos:a[o],dupeValue:A[a[o]]};return c&&(r.path=s),t("array.unique",r,e.localize([...e.path,i],[A,...e.ancestors]))}a[o]=i}}return A},args:["comparator","options"],multi:!0}},cast:{set:{from:Array.isArray,to:(A,e)=>new Set(A)}},rebuild(A){A.$_terms._inclusions=[],A.$_terms._exclusions=[],A.$_terms._requireds=[];for(const e of A.$_terms.items)l.validateSingle(e,A),"required"===e._flags.presence?A.$_terms._requireds.push(e):"forbidden"===e._flags.presence?A.$_terms._exclusions.push(e):A.$_terms._inclusions.push(e);for(const e of A.$_terms.ordered)l.validateSingle(e,A)},manifest:{build:(A,e)=>(e.items&&(A=A.items(...e.items)),e.ordered&&(A=A.ordered(...e.ordered)),A)},messages:{"array.base":"{{#label}} must be an array","array.excludes":"{{#label}} contains an excluded value","array.hasKnown":"{{#label}} does not contain at least one required match for type {:#patternLabel}","array.hasUnknown":"{{#label}} does not contain at least one required match","array.includes":"{{#label}} does not match any of the allowed types","array.includesRequiredBoth":"{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)","array.includesRequiredKnowns":"{{#label}} does not contain {{#knownMisses}}","array.includesRequiredUnknowns":"{{#label}} does not contain {{#unknownMisses}} required value(s)","array.length":"{{#label}} must contain {{#limit}} items","array.max":"{{#label}} must contain less than or equal to {{#limit}} items","array.min":"{{#label}} must contain at least {{#limit}} items","array.orderedLength":"{{#label}} must contain at most {{#limit}} items","array.sort":"{{#label}} must be sorted in {#order} order by {{#by}}","array.sort.mismatching":"{{#label}} cannot be sorted due to mismatching types","array.sort.unsupported":"{{#label}} cannot be sorted due to unsupported type {#type}","array.sparse":"{{#label}} must not be a sparse array item","array.unique":"{{#label}} contains a duplicate value"}}),l.fillMissedErrors=function(A,e,t,r,i,n){const o=[];let s=0;for(const A of t){const e=A._flags.label;e?o.push(e):++s}o.length?s?e.push(A.$_createError("array.includesRequiredBoth",r,{knownMisses:o,unknownMisses:s},i,n)):e.push(A.$_createError("array.includesRequiredKnowns",r,{knownMisses:o},i,n)):e.push(A.$_createError("array.includesRequiredUnknowns",r,{unknownMisses:s},i,n))},l.fillOrderedErrors=function(A,e,t,r,i,n){const o=[];for(const A of t)"required"===A._flags.presence&&o.push(A);o.length&&l.fillMissedErrors(A,e,o,r,i,n)},l.fastSplice=function(A,e){let t=e;for(;t<A.length;)A[t++]=A[t];--A.length},l.validateSingle=function(A,e){("array"===A.type||A._flags._arrayItems)&&(r(!e._flags.single,"Cannot specify array item with single rule enabled"),e.$_setFlag("_arrayItems",!0,{clone:!1}))},l.sort=function(A,e,t,r,i){const n="ascending"===t.order?1:-1,o=-1*n,s=n,a=(a,c)=>{let g=l.compare(a,c,o,s);if(null!==g)return g;if(t.by&&(a=t.by.resolve(a,r,i),c=t.by.resolve(c,r,i)),g=l.compare(a,c,o,s),null!==g)return g;const u=typeof a;if(u!==typeof c)throw A.$_createError("array.sort.mismatching",e,null,r,i);if("number"!==u&&"string"!==u)throw A.$_createError("array.sort.unsupported",e,{type:u},r,i);return"number"===u?(a-c)*n:a<c?o:s};try{return{value:e.slice().sort(a)}}catch(A){return{errors:A}}},l.compare=function(A,e,t,r){return A===e?0:void 0===A?1:void 0===e?-1:null===A?r:null===e?t:null}},function(A,e,t){"use strict";const r=t(0),i=t(3),n=t(1),o=t(21),s={isBool:function(A){return"boolean"==typeof A}};A.exports=i.extend({type:"boolean",flags:{sensitive:{default:!1}},terms:{falsy:{init:null,manifest:"values"},truthy:{init:null,manifest:"values"}},coerce(A,{schema:e}){if("boolean"!=typeof A){if("string"==typeof A){const t=e._flags.sensitive?A:A.toLowerCase();A="true"===t||"false"!==t&&A}return"boolean"!=typeof A&&(A=e.$_terms.truthy&&e.$_terms.truthy.has(A,null,null,!e._flags.sensitive)||(!e.$_terms.falsy||!e.$_terms.falsy.has(A,null,null,!e._flags.sensitive))&&A),{value:A}}},validate(A,{error:e}){if("boolean"!=typeof A)return{value:A,errors:e("boolean.base")}},rules:{truthy:{method(...A){n.verifyFlat(A,"truthy");const e=this.clone();e.$_terms.truthy=e.$_terms.truthy||new o;for(let t=0;t<A.length;++t){const i=A[t];r(void 0!==i,"Cannot call truthy with undefined"),e.$_terms.truthy.add(i)}return e}},falsy:{method(...A){n.verifyFlat(A,"falsy");const e=this.clone();e.$_terms.falsy=e.$_terms.falsy||new o;for(let t=0;t<A.length;++t){const i=A[t];r(void 0!==i,"Cannot call falsy with undefined"),e.$_terms.falsy.add(i)}return e}},sensitive:{method(A=!0){return this.$_setFlag("sensitive",A)}}},cast:{number:{from:s.isBool,to:(A,e)=>A?1:0},string:{from:s.isBool,to:(A,e)=>A?"true":"false"}},manifest:{build:(A,e)=>(e.truthy&&(A=A.truthy(...e.truthy)),e.falsy&&(A=A.falsy(...e.falsy)),A)},messages:{"boolean.base":"{{#label}} must be a boolean"}})},function(A,e,t){"use strict";const r=t(0),i=t(3),n=t(1),o=t(7),s={isDate:function(A){return A instanceof Date}};A.exports=i.extend({type:"date",coerce:{from:["number","string"],method:(A,{schema:e})=>({value:s.parse(A,e._flags.format)||A})},validate(A,{schema:e,error:t,prefs:r}){if(A instanceof Date&&!isNaN(A.getTime()))return;const i=e._flags.format;return r.convert&&i&&"string"==typeof A?{value:A,errors:t("date.format",{format:i})}:{value:A,errors:t("date.base")}},rules:{compare:{method:!1,validate(A,e,{date:t},{name:r,operator:i,args:o}){const s="now"===t?Date.now():t.getTime();return n.compare(A.getTime(),s,i)?A:e.error("date."+r,{limit:o.date,value:A})},args:[{name:"date",ref:!0,normalize:A=>"now"===A?A:s.parse(A),assert:A=>null!==A,message:"must have a valid date format"}]},format:{method(A){return r(["iso","javascript","unix"].includes(A),"Unknown date format",A),this.$_setFlag("format",A)}},greater:{method(A){return this.$_addRule({name:"greater",method:"compare",args:{date:A},operator:">"})}},iso:{method(){return this.format("iso")}},less:{method(A){return this.$_addRule({name:"less",method:"compare",args:{date:A},operator:"<"})}},max:{method(A){return this.$_addRule({name:"max",method:"compare",args:{date:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"compare",args:{date:A},operator:">="})}},timestamp:{method(A="javascript"){return r(["javascript","unix"].includes(A),'"type" must be one of "javascript, unix"'),this.format(A)}}},cast:{number:{from:s.isDate,to:(A,e)=>A.getTime()},string:{from:s.isDate,to:(A,{prefs:e})=>o.date(A,e)}},messages:{"date.base":"{{#label}} must be a valid date","date.format":'{{#label}} must be in {msg("date.format." + #format) || #format} format',"date.greater":"{{#label}} must be greater than {{:#limit}}","date.less":"{{#label}} must be less than {{:#limit}}","date.max":"{{#label}} must be less than or equal to {{:#limit}}","date.min":"{{#label}} must be greater than or equal to {{:#limit}}","date.format.iso":"ISO 8601 date","date.format.javascript":"timestamp or number of milliseconds","date.format.unix":"timestamp or number of seconds"}}),s.parse=function(A,e){if(A instanceof Date)return A;if("string"!=typeof A&&(isNaN(A)||!isFinite(A)))return null;if(/^\s*$/.test(A))return null;if("iso"===e)return n.isIsoDate(A)?s.date(A.toString()):null;const t=A;if("string"==typeof A&&/^[+-]?\d+(\.\d+)?$/.test(A)&&(A=parseFloat(A)),e){if("javascript"===e)return s.date(1*A);if("unix"===e)return s.date(1e3*A);if("string"==typeof t)return null}return s.date(A)},s.date=function(A){const e=new Date(A);return isNaN(e.getTime())?null:e}},function(A,e,t){"use strict";const r=t(0),i=t(22);A.exports=i.extend({type:"function",properties:{typeof:"function"},rules:{arity:{method(A){return r(Number.isSafeInteger(A)&&A>=0,"n must be a positive integer"),this.$_addRule({name:"arity",args:{n:A}})},validate:(A,e,{n:t})=>A.length===t?A:e.error("function.arity",{n:t})},class:{method(){return this.$_addRule("class")},validate:(A,e)=>/^\s*class\s/.test(A.toString())?A:e.error("function.class",{value:A})},minArity:{method(A){return r(Number.isSafeInteger(A)&&A>0,"n must be a strict positive integer"),this.$_addRule({name:"minArity",args:{n:A}})},validate:(A,e,{n:t})=>A.length>=t?A:e.error("function.minArity",{n:t})},maxArity:{method(A){return r(Number.isSafeInteger(A)&&A>=0,"n must be a positive integer"),this.$_addRule({name:"maxArity",args:{n:A}})},validate:(A,e,{n:t})=>A.length<=t?A:e.error("function.maxArity",{n:t})}},messages:{"function.arity":"{{#label}} must have an arity of {{#n}}","function.class":"{{#label}} must be a class","function.maxArity":"{{#label}} must have an arity lesser or equal to {{#n}}","function.minArity":"{{#label}} must have an arity greater or equal to {{#n}}"}})},function(A,e,t){"use strict";const r=t(0),i=t(2),n=t(20),o=t(6),s={};A.exports=function(A,e,t={}){if(r(A&&"object"==typeof A,"Invalid defaults value: must be an object"),r(!e||!0===e||"object"==typeof e,"Invalid source value: must be true, falsy or an object"),r("object"==typeof t,"Invalid options: must be an object"),!e)return null;if(t.shallow)return s.applyToDefaultsWithShallow(A,e,t);const o=i(A);if(!0===e)return o;const a=void 0!==t.nullOverride&&t.nullOverride;return n(o,e,{nullOverride:a,mergeArrays:!1})},s.applyToDefaultsWithShallow=function(A,e,t){const a=t.shallow;r(Array.isArray(a),"Invalid keys");const l=new Map,c=!0===e?null:new Set;for(let t of a){t=Array.isArray(t)?t:t.split(".");const r=o(A,t);r&&"object"==typeof r?l.set(r,c&&o(e,t)||r):c&&c.add(t)}const g=i(A,{},l);if(!c)return g;for(const A of c)s.reachCopy(g,e,A);return n(g,e,{mergeArrays:!1,nullOverride:!1})},s.reachCopy=function(A,e,t){for(const A of t){if(!(A in e))return;e=e[A]}const r=e;let i=A;for(let A=0;A<t.length-1;++A){const e=t[A];"object"!=typeof i[e]&&(i[e]={}),i=i[e]}i[t[t.length-1]]=r}},function(A,e,t){"use strict";const r=t(0),i={};e.Sorter=class{constructor(){this._items=[],this.nodes=[]}add(A,e){const t=[].concat((e=e||{}).before||[]),i=[].concat(e.after||[]),n=e.group||"?",o=e.sort||0;r(!t.includes(n),"Item cannot come before itself: ".concat(n)),r(!t.includes("?"),"Item cannot come before unassociated items"),r(!i.includes(n),"Item cannot come after itself: ".concat(n)),r(!i.includes("?"),"Item cannot come after unassociated items"),Array.isArray(A)||(A=[A]);for(const e of A){const A={seq:this._items.length,sort:o,before:t,after:i,group:n,node:e};this._items.push(A)}const s=this._sort();return r(s,"item","?"!==n?"added into group ".concat(n):"","created a dependencies error"),this.nodes}merge(A){Array.isArray(A)||(A=[A]);for(const e of A)if(e)for(const A of e._items)this._items.push(Object.assign({},A));this._items.sort(i.mergeSort);for(let A=0;A<this._items.length;++A)this._items[A].seq=A;const e=this._sort();return r(e,"merge created a dependencies error"),this.nodes}_sort(){const A={},e=Object.create(null),t=Object.create(null);for(const r of this._items){const i=r.seq,n=r.group;t[n]=t[n]||[],t[n].push(i),A[i]=r.before;for(const A of r.after)e[A]=e[A]||[],e[A].push(i)}for(const e in A){const r=[];for(const i in A[e]){const n=A[e][i];t[n]=t[n]||[],r.push(...t[n])}A[e]=r}for(const r in e)if(t[r])for(const i of t[r])A[i].push(...e[r]);const r={};for(const e in A){const t=A[e];for(const A of t)r[A]=r[A]||[],r[A].push(e)}const i={},n=[];for(let A=0;A<this._items.length;++A){let e=A;if(r[A]){e=null;for(let A=0;A<this._items.length;++A){if(!0===i[A])continue;r[A]||(r[A]=[]);const t=r[A].length;let n=0;for(let e=0;e<t;++e)i[r[A][e]]&&++n;if(n===t){e=A;break}}}null!==e&&(i[e]=!0,n.push(e))}if(n.length!==this._items.length)return!1;const o={};for(const A of this._items)o[A.seq]=A;this._items=[],this.nodes=[];for(const A of n){const e=o[A];this.nodes.push(e.node),this._items.push(e)}return!0}},i.mergeSort=(A,e)=>A.sort===e.sort?0:A.sort<e.sort?-1:1},function(A,e,t){"use strict";const r=t(0),i=t(3),n=t(1),o=t(8),s=t(4),a={};A.exports=i.extend({type:"link",properties:{schemaChain:!0},terms:{link:{init:null,manifest:"single",register:!1}},args:(A,e)=>A.ref(e),validate(A,{schema:e,state:t,prefs:i}){r(e.$_terms.link,"Uninitialized link schema");const n=a.generate(e,A,t,i),o=e.$_terms.link[0].ref;return n.$_validate(A,t.nest(n,"link:".concat(o.display,":").concat(n.type)),i)},generate:(A,e,t,r)=>a.generate(A,e,t,r),rules:{ref:{method(A){r(!this.$_terms.link,"Cannot reinitialize schema"),A=o.ref(A),r("value"===A.type||"local"===A.type,"Invalid reference type:",A.type),r("local"===A.type||"root"===A.ancestor||A.ancestor>0,"Link cannot reference itself");const e=this.clone();return e.$_terms.link=[{ref:A}],e}},relative:{method(A=!0){return this.$_setFlag("relative",A)}}},overrides:{concat(A){r(this.$_terms.link,"Uninitialized link schema"),r(n.isSchema(A),"Invalid schema object"),r("link"!==A.type,"Cannot merge type link with another link");const e=this.clone();return e.$_terms.whens||(e.$_terms.whens=[]),e.$_terms.whens.push({concat:A}),e.$_mutateRebuild()}},manifest:{build:(A,e)=>(r(e.link,"Invalid link description missing link"),A.ref(e.link))}}),a.generate=function(A,e,t,r){let i=t.mainstay.links.get(A);if(i)return i._generate(e,t,r).schema;const n=A.$_terms.link[0].ref,{perspective:o,path:s}=a.perspective(n,t);a.assert(o,"which is outside of schema boundaries",n,A,t,r);try{i=s.length?o.$_reach(s):o}catch(e){a.assert(!1,"to non-existing schema",n,A,t,r)}return a.assert("link"!==i.type,"which is another link",n,A,t,r),A._flags.relative||t.mainstay.links.set(A,i),i._generate(e,t,r).schema},a.perspective=function(A,e){if("local"===A.type){for(const{schema:t,key:r}of e.schemas){if((t._flags.id||r)===A.path[0])return{perspective:t,path:A.path.slice(1)};if(t.$_terms.shared)for(const e of t.$_terms.shared)if(e._flags.id===A.path[0])return{perspective:e,path:A.path.slice(1)}}return{perspective:null,path:null}}return"root"===A.ancestor?{perspective:e.schemas[e.schemas.length-1].schema,path:A.path}:{perspective:e.schemas[A.ancestor]&&e.schemas[A.ancestor].schema,path:A.path}},a.assert=function(A,e,t,i,n,o){A||r(!1,'"'.concat(s.label(i._flags,n,o),'" contains link reference "').concat(t.display,'" ').concat(e))}},function(A,e,t){"use strict";const r=t(0),i=t(3),n=t(1),o={numberRx:/^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,precisionRx:/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/};A.exports=i.extend({type:"number",flags:{unsafe:{default:!1}},coerce:{from:"string",method(A,{schema:e,error:t}){const r=A.match(o.numberRx);if(!r)return;A=A.trim();const i={value:parseFloat(A)};if(0===i.value&&(i.value=0),!e._flags.unsafe)if(A.match(/e/i)){if(o.normalizeExponent("".concat(i.value/Math.pow(10,r[1]),"e").concat(r[1]))!==o.normalizeExponent(A))return i.errors=t("number.unsafe"),i}else{const e=i.value.toString();if(e.match(/e/i))return i;if(e!==o.normalizeDecimal(A))return i.errors=t("number.unsafe"),i}return i}},validate(A,{schema:e,error:t,prefs:r}){if(A===1/0||A===-1/0)return{value:A,errors:t("number.infinity")};if(!n.isNumber(A))return{value:A,errors:t("number.base")};const i={value:A};if(r.convert){const A=e.$_getRule("precision");if(A){const e=Math.pow(10,A.args.limit);i.value=Math.round(i.value*e)/e}}return 0===i.value&&(i.value=0),!e._flags.unsafe&&(A>Number.MAX_SAFE_INTEGER||A<Number.MIN_SAFE_INTEGER)&&(i.errors=t("number.unsafe")),i},rules:{compare:{method:!1,validate:(A,e,{limit:t},{name:r,operator:i,args:o})=>n.compare(A,t,i)?A:e.error("number."+r,{limit:o.limit,value:A}),args:[{name:"limit",ref:!0,assert:n.isNumber,message:"must be a number"}]},greater:{method(A){return this.$_addRule({name:"greater",method:"compare",args:{limit:A},operator:">"})}},integer:{method(){return this.$_addRule("integer")},validate:(A,e)=>Math.trunc(A)-A==0?A:e.error("number.integer")},less:{method(A){return this.$_addRule({name:"less",method:"compare",args:{limit:A},operator:"<"})}},max:{method(A){return this.$_addRule({name:"max",method:"compare",args:{limit:A},operator:"<="})}},min:{method(A){return this.$_addRule({name:"min",method:"compare",args:{limit:A},operator:">="})}},multiple:{method(A){return this.$_addRule({name:"multiple",args:{base:A}})},validate:(A,e,{base:t},r)=>A%t==0?A:e.error("number.multiple",{multiple:r.args.base,value:A}),args:[{name:"base",ref:!0,assert:A=>"number"==typeof A&&isFinite(A)&&A>0,message:"must be a positive number"}],multi:!0},negative:{method(){return this.sign("negative")}},port:{method(){return this.$_addRule("port")},validate:(A,e)=>Number.isSafeInteger(A)&&A>=0&&A<=65535?A:e.error("number.port")},positive:{method(){return this.sign("positive")}},precision:{method(A){return r(Number.isSafeInteger(A),"limit must be an integer"),this.$_addRule({name:"precision",args:{limit:A}})},validate(A,e,{limit:t}){const r=A.toString().match(o.precisionRx);return Math.max((r[1]?r[1].length:0)-(r[2]?parseInt(r[2],10):0),0)<=t?A:e.error("number.precision",{limit:t,value:A})},convert:!0},sign:{method(A){return r(["negative","positive"].includes(A),"Invalid sign",A),this.$_addRule({name:"sign",args:{sign:A}})},validate:(A,e,{sign:t})=>"negative"===t&&A<0||"positive"===t&&A>0?A:e.error("number.".concat(t))},unsafe:{method(A=!0){return r("boolean"==typeof A,"enabled must be a boolean"),this.$_setFlag("unsafe",A)}}},cast:{string:{from:A=>"number"==typeof A,to:(A,e)=>A.toString()}},messages:{"number.base":"{{#label}} must be a number","number.greater":"{{#label}} must be greater than {{#limit}}","number.infinity":"{{#label}} cannot be infinity","number.integer":"{{#label}} must be an integer","number.less":"{{#label}} must be less than {{#limit}}","number.max":"{{#label}} must be less than or equal to {{#limit}}","number.min":"{{#label}} must be greater than or equal to {{#limit}}","number.multiple":"{{#label}} must be a multiple of {{#multiple}}","number.negative":"{{#label}} must be a negative number","number.port":"{{#label}} must be a valid port","number.positive":"{{#label}} must be a positive number","number.precision":"{{#label}} must have no more than {{#limit}} decimal places","number.unsafe":"{{#label}} must be a safe number"}}),o.normalizeExponent=function(A){return A.replace(/E/,"e").replace(/\.(\d*[1-9])?0+e/,".$1e").replace(/\.e/,"e").replace(/e\+/,"e").replace(/^\+/,"").replace(/^(-?)0+([1-9])/,"$1$2")},o.normalizeDecimal=function(A){return(A=A.replace(/^\+/,"").replace(/\.0*$/,"").replace(/^(-?)\.([^\.]*)$/,"$10.$2").replace(/^(-?)0+([0-9])/,"$1$2")).includes(".")&&A.endsWith("0")&&(A=A.replace(/0+$/,"")),"-0"===A?"0":A}},function(A,e,t){"use strict";const r=t(22);A.exports=r.extend({type:"object",cast:{map:{from:A=>A&&"object"==typeof A,to:(A,e)=>new Map(Object.entries(A))}}})},function(A,e,t){"use strict";function r(A,e){var t=Object.keys(A);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(A);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(A,e).enumerable}))),t.push.apply(t,r)}return t}function i(A){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){n(A,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(A,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(A,e,Object.getOwnPropertyDescriptor(t,e))}))}return A}function n(A,e,t){return e in A?Object.defineProperty(A,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):A[e]=t,A}const o=t(0),s=t(23),a=t(49),l=t(50),c=t(27),g=t(51),u=t(26),h=t(3),E=t(1),B={tlds:g instanceof Set&&{tlds:{allow:g,deny:null}},base64Regex:{true:{true:/^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,false:/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/},false:{true:/^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,false:/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/}},dataUriRegex:/^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,hexRegex:/^[a-f0-9]+$/i,ipRegex:l.regex().regex,isoDurationRegex:/^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,guidBrackets:{"{":"}","[":"]","(":")","":""},guidVersions:{uuidv1:"1",uuidv2:"2",uuidv3:"3",uuidv4:"4",uuidv5:"5"},guidSeparators:new Set([void 0,!0,!1,"-",":"]),normalizationForms:["NFC","NFD","NFKC","NFKD"]};A.exports=h.extend({type:"string",flags:{insensitive:{default:!1},truncate:{default:!1}},terms:{replacements:{init:null}},coerce:{from:"string",method(A,{schema:e,state:t,prefs:r}){const i=e.$_getRule("normalize");i&&(A=A.normalize(i.args.form));const n=e.$_getRule("case");n&&(A="upper"===n.args.direction?A.toLocaleUpperCase():A.toLocaleLowerCase());const o=e.$_getRule("trim");if(o&&o.args.enabled&&(A=A.trim()),e.$_terms.replacements)for(const t of e.$_terms.replacements)A=A.replace(t.pattern,t.replacement);const s=e.$_getRule("hex");if(s&&s.args.options.byteAligned&&A.length%2!=0&&(A="0".concat(A)),e.$_getRule("isoDate")){const e=B.isoDate(A);e&&(A=e)}if(e._flags.truncate){const i=e.$_getRule("max");if(i){let n=i.args.limit;if(E.isResolvable(n)&&(n=n.resolve(A,t,r),!E.limit(n)))return{value:A,errors:e.$_createError("any.ref",n,{ref:i.args.limit,arg:"limit",reason:"must be a positive integer"},t,r)};A=A.slice(0,n)}}return{value:A}}},validate:(A,{error:e})=>"string"!=typeof A?{value:A,errors:e("string.base")}:""===A?{value:A,errors:e("string.empty")}:void 0,rules:{alphanum:{method(){return this.$_addRule("alphanum")},validate:(A,e)=>/^[a-zA-Z0-9]+$/.test(A)?A:e.error("string.alphanum")},base64:{method(A={}){return E.assertOptions(A,["paddingRequired","urlSafe"]),A=i({urlSafe:!1,paddingRequired:!0},A),o("boolean"==typeof A.paddingRequired,"paddingRequired must be boolean"),o("boolean"==typeof A.urlSafe,"urlSafe must be boolean"),this.$_addRule({name:"base64",args:{options:A}})},validate:(A,e,{options:t})=>B.base64Regex[t.paddingRequired][t.urlSafe].test(A)?A:e.error("string.base64")},case:{method(A){return o(["lower","upper"].includes(A),"Invalid case:",A),this.$_addRule({name:"case",args:{direction:A}})},validate:(A,e,{direction:t})=>"lower"===t&&A===A.toLocaleLowerCase()||"upper"===t&&A===A.toLocaleUpperCase()?A:e.error("string.".concat(t,"case")),convert:!0},creditCard:{method(){return this.$_addRule("creditCard")},validate(A,e){let t=A.length,r=0,i=1;for(;t--;){const e=A.charAt(t)*i;r+=e-9*(e>9),i^=3}return r>0&&r%10==0?A:e.error("string.creditCard")}},dataUri:{method(A={}){return E.assertOptions(A,["paddingRequired"]),A=i({paddingRequired:!0},A),o("boolean"==typeof A.paddingRequired,"paddingRequired must be boolean"),this.$_addRule({name:"dataUri",args:{options:A}})},validate(A,e,{options:t}){const r=A.match(B.dataUriRegex);if(r){if(!r[2])return A;if("base64"!==r[2])return A;if(B.base64Regex[t.paddingRequired].false.test(r[3]))return A}return e.error("string.dataUri")}},domain:{method(A){A&&E.assertOptions(A,["allowUnicode","maxDomainSegments","minDomainSegments","tlds"]);const e=B.addressOptions(A);return this.$_addRule({name:"domain",args:{options:A},address:e})},validate:(A,e,t,{address:r})=>s.isValid(A,r)?A:e.error("string.domain")},email:{method(A={}){E.assertOptions(A,["allowUnicode","ignoreLength","maxDomainSegments","minDomainSegments","multiple","separator","tlds"]),o(void 0===A.multiple||"boolean"==typeof A.multiple,"multiple option must be an boolean");const e=B.addressOptions(A),t=new RegExp("\\s*[".concat(A.separator?c(A.separator):",","]\\s*"));return this.$_addRule({name:"email",args:{options:A},regex:t,address:e})},validate(A,e,{options:t},{regex:r,address:i}){const n=t.multiple?A.split(r):[A],o=[];for(const A of n)a.isValid(A,i)||o.push(A);return o.length?e.error("string.email",{value:A,invalids:o}):A}},guid:{alias:"uuid",method(A={}){E.assertOptions(A,["version","separator"]);let e="";if(A.version){const t=[].concat(A.version);o(t.length>=1,"version must have at least 1 valid version specified");const r=new Set;for(let A=0;A<t.length;++A){const i=t[A];o("string"==typeof i,"version at position "+A+" must be a string");const n=B.guidVersions[i.toLowerCase()];o(n,"version at position "+A+" must be one of "+Object.keys(B.guidVersions).join(", ")),o(!r.has(n),"version at position "+A+" must not be a duplicate"),e+=n,r.add(n)}}o(B.guidSeparators.has(A.separator),'separator must be one of true, false, "-", or ":"');const t=void 0===A.separator?"[:-]?":!0===A.separator?"[:-]":!1===A.separator?"[]?":"\\".concat(A.separator),r=new RegExp("^([\\[{\\(]?)[0-9A-F]{8}(".concat(t,")[0-9A-F]{4}\\2?[").concat(e||"0-9A-F","][0-9A-F]{3}\\2?[").concat(e?"89AB":"0-9A-F","][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"),"i");return this.$_addRule({name:"guid",args:{options:A},regex:r})},validate(A,e,t,{regex:r}){const i=r.exec(A);return i?B.guidBrackets[i[1]]!==i[i.length-1]?e.error("string.guid"):A:e.error("string.guid")}},hex:{method(A={}){return E.assertOptions(A,["byteAligned"]),A=i({byteAligned:!1},A),o("boolean"==typeof A.byteAligned,"byteAligned must be boolean"),this.$_addRule({name:"hex",args:{options:A}})},validate:(A,e,{options:t})=>B.hexRegex.test(A)?t.byteAligned&&A.length%2!=0?e.error("string.hexAlign"):A:e.error("string.hex")},hostname:{method(){return this.$_addRule("hostname")},validate:(A,e)=>s.isValid(A,{minDomainSegments:1})||B.ipRegex.test(A)?A:e.error("string.hostname")},insensitive:{method(){return this.$_setFlag("insensitive",!0)}},ip:{method(A={}){E.assertOptions(A,["cidr","version"]);const{cidr:e,versions:t,regex:r}=l.regex(A),i=A.version?t:void 0;return this.$_addRule({name:"ip",args:{options:{cidr:e,version:i}},regex:r})},validate:(A,e,{options:t},{regex:r})=>r.test(A)?A:t.version?e.error("string.ipVersion",{value:A,cidr:t.cidr,version:t.version}):e.error("string.ip",{value:A,cidr:t.cidr})},isoDate:{method(){return this.$_addRule("isoDate")},validate:(A,{error:e})=>B.isoDate(A)?A:e("string.isoDate")},isoDuration:{method(){return this.$_addRule("isoDuration")},validate:(A,e)=>B.isoDurationRegex.test(A)?A:e.error("string.isoDuration")},length:{method(A,e){return B.length(this,"length",A,"=",e)},validate(A,e,{limit:t,encoding:r},{name:i,operator:n,args:o}){const s=!r&&A.length;return E.compare(s,t,n)?A:e.error("string."+i,{limit:o.limit,value:A,encoding:r})},args:[{name:"limit",ref:!0,assert:E.limit,message:"must be a positive integer"},"encoding"]},lowercase:{method(){return this.case("lower")}},max:{method(A,e){return B.length(this,"max",A,"<=",e)},args:["limit","encoding"]},min:{method(A,e){return B.length(this,"min",A,">=",e)},args:["limit","encoding"]},normalize:{method(A="NFC"){return o(B.normalizationForms.includes(A),"normalization form must be one of "+B.normalizationForms.join(", ")),this.$_addRule({name:"normalize",args:{form:A}})},validate:(A,{error:e},{form:t})=>A===A.normalize(t)?A:e("string.normalize",{value:A,form:t}),convert:!0},pattern:{alias:"regex",method(A,e={}){o(A instanceof RegExp,"regex must be a RegExp"),o(!A.flags.includes("g")&&!A.flags.includes("y"),"regex should not use global or sticky mode"),"string"==typeof e&&(e={name:e}),E.assertOptions(e,["invert","name"]);const t=["string.pattern",e.invert?".invert":"",e.name?".name":".base"].join("");return this.$_addRule({name:"pattern",args:{regex:A,options:e},errorCode:t})},validate:(A,e,{regex:t,options:r},{errorCode:i})=>t.test(A)^r.invert?A:e.error(i,{name:r.name,regex:t,value:A}),args:["regex","options"],multi:!0},replace:{method(A,e){"string"==typeof A&&(A=new RegExp(c(A),"g")),o(A instanceof RegExp,"pattern must be a RegExp"),o("string"==typeof e,"replacement must be a String");const t=this.clone();return t.$_terms.replacements||(t.$_terms.replacements=[]),t.$_terms.replacements.push({pattern:A,replacement:e}),t}},token:{method(){return this.$_addRule("token")},validate:(A,e)=>/^\w+$/.test(A)?A:e.error("string.token")},trim:{method(A=!0){return o("boolean"==typeof A,"enabled must be a boolean"),this.$_addRule({name:"trim",args:{enabled:A}})},validate:(A,e,{enabled:t})=>t&&A!==A.trim()?e.error("string.trim"):A,convert:!0},truncate:{method(A=!0){return o("boolean"==typeof A,"enabled must be a boolean"),this.$_setFlag("truncate",A)}},uppercase:{method(){return this.case("upper")}},uri:{method(A={}){E.assertOptions(A,["allowRelative","allowQuerySquareBrackets","domain","relativeOnly","scheme"]),A.domain&&E.assertOptions(A.domain,["allowUnicode","maxDomainSegments","minDomainSegments","tlds"]);const{regex:e,scheme:t}=u.regex(A),r=A.domain?B.addressOptions(A.domain):null;return this.$_addRule({name:"uri",args:{options:A},regex:e,domain:r,scheme:t})},validate(A,e,{options:t},{regex:r,domain:i,scheme:n}){if(["http:/","https:/"].includes(A))return e.error("string.uri");const o=r.exec(A);if(o){if(i){const A=o[1]||o[2];if(!s.isValid(A,i))return e.error("string.domain",{value:A})}return A}return t.relativeOnly?e.error("string.uriRelativeOnly"):t.scheme?e.error("string.uriCustomScheme",{scheme:n,value:A}):e.error("string.uri")}}},manifest:{build(A,e){if(e.replacements)for(const{pattern:t,replacement:r}of e.replacements)A=A.replace(t,r);return A}},messages:{"string.alphanum":"{{#label}} must only contain alpha-numeric characters","string.base":"{{#label}} must be a string","string.base64":"{{#label}} must be a valid base64 string","string.creditCard":"{{#label}} must be a credit card","string.dataUri":"{{#label}} must be a valid dataUri string","string.domain":"{{#label}} must contain a valid domain name","string.email":"{{#label}} must be a valid email","string.empty":"{{#label}} is not allowed to be empty","string.guid":"{{#label}} must be a valid GUID","string.hex":"{{#label}} must only contain hexadecimal characters","string.hexAlign":"{{#label}} hex decoded representation must be byte aligned","string.hostname":"{{#label}} must be a valid hostname","string.ip":"{{#label}} must be a valid ip address with a {{#cidr}} CIDR","string.ipVersion":"{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR","string.isoDate":"{{#label}} must be in iso format","string.isoDuration":"{{#label}} must be a valid ISO 8601 duration","string.length":"{{#label}} length must be {{#limit}} characters long","string.lowercase":"{{#label}} must only contain lowercase characters","string.max":"{{#label}} length must be less than or equal to {{#limit}} characters long","string.min":"{{#label}} length must be at least {{#limit}} characters long","string.normalize":"{{#label}} must be unicode normalized in the {{#form}} form","string.token":"{{#label}} must only contain alpha-numeric and underscore characters","string.pattern.base":"{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}","string.pattern.name":"{{#label}} with value {:[.]} fails to match the {{#name}} pattern","string.pattern.invert.base":"{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}","string.pattern.invert.name":"{{#label}} with value {:[.]} matches the inverted {{#name}} pattern","string.trim":"{{#label}} must not have leading or trailing whitespace","string.uri":"{{#label}} must be a valid uri","string.uriCustomScheme":"{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern","string.uriRelativeOnly":"{{#label}} must be a valid relative uri","string.uppercase":"{{#label}} must only contain uppercase characters"}}),B.addressOptions=function(A){if(!A)return A;if(o(void 0===A.minDomainSegments||Number.isSafeInteger(A.minDomainSegments)&&A.minDomainSegments>0,"minDomainSegments must be a positive integer"),o(void 0===A.maxDomainSegments||Number.isSafeInteger(A.maxDomainSegments)&&A.maxDomainSegments>0,"maxDomainSegments must be a positive integer"),!1===A.tlds)return A;if(!0===A.tlds||void 0===A.tlds)return o(B.tlds,"Built-in TLD list disabled"),Object.assign({},A,B.tlds);o("object"==typeof A.tlds,"tlds must be true, false, or an object");const e=A.tlds.deny;if(e)return Array.isArray(e)&&(A=Object.assign({},A,{tlds:{deny:new Set(e)}})),o(A.tlds.deny instanceof Set,"tlds.deny must be an array, Set, or boolean"),o(!A.tlds.allow,"Cannot specify both tlds.allow and tlds.deny lists"),B.validateTlds(A.tlds.deny,"tlds.deny"),A;const t=A.tlds.allow;return t?!0===t?(o(B.tlds,"Built-in TLD list disabled"),Object.assign({},A,B.tlds)):(Array.isArray(t)&&(A=Object.assign({},A,{tlds:{allow:new Set(t)}})),o(A.tlds.allow instanceof Set,"tlds.allow must be an array, Set, or boolean"),B.validateTlds(A.tlds.allow,"tlds.allow"),A):A},B.validateTlds=function(A,e){for(const t of A)o(s.isValid(t,{minDomainSegments:1,maxDomainSegments:1}),"".concat(e," must contain valid top level domain names"))},B.isoDate=function(A){if(!E.isIsoDate(A))return null;/.*T.*[+-]\d\d$/.test(A)&&(A+="00");const e=new Date(A);return isNaN(e.getTime())?null:e.toISOString()},B.length=function(A,e,t,r,i){return o(!i||!1,"Invalid encoding:",i),A.$_addRule({name:e,method:"length",args:{limit:t,encoding:i},operator:r})}},function(A,e,t){"use strict";const r=t(24),i=t(23),n=t(25),o={nonAsciiRx:/[^\x00-\x7f]/,encoder:new(r.TextEncoder||TextEncoder)};e.analyze=function(A,e){return o.email(A,e)},e.isValid=function(A,e){return!o.email(A,e)},o.email=function(A,e={}){if("string"!=typeof A)throw new Error("Invalid input: email must be a string");if(!A)return n.code("EMPTY_STRING");const t=!o.nonAsciiRx.test(A);if(!t){if(!1===e.allowUnicode)return n.code("FORBIDDEN_UNICODE");A=A.normalize("NFC")}const r=A.split("@");if(2!==r.length)return r.length>2?n.code("MULTIPLE_AT_CHAR"):n.code("MISSING_AT_CHAR");const[s,a]=r;if(!s)return n.code("EMPTY_LOCAL");if(!e.ignoreLength){if(A.length>254)return n.code("ADDRESS_TOO_LONG");if(o.encoder.encode(s).length>64)return n.code("LOCAL_TOO_LONG")}return o.local(s,t)||i.analyze(a,e)},o.local=function(A,e){const t=A.split(".");for(const A of t){if(!A.length)return n.code("EMPTY_LOCAL_SEGMENT");if(e){if(!o.atextRx.test(A))return n.code("INVALID_LOCAL_CHARS")}else for(const e of A){if(o.atextRx.test(e))continue;const A=o.binary(e);if(!o.atomRx.test(A))return n.code("INVALID_LOCAL_CHARS")}}},o.binary=function(A){return Array.from(o.encoder.encode(A)).map((A=>String.fromCharCode(A))).join("")},o.atextRx=/^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/,o.atomRx=new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])","(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})","(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"))},function(A,e,t){"use strict";const r=t(0),i=t(26);e.regex=function(A={}){r(void 0===A.cidr||"string"==typeof A.cidr,"options.cidr must be a string");const e=A.cidr?A.cidr.toLowerCase():"optional";r(["required","optional","forbidden"].includes(e),"options.cidr must be one of required, optional, forbidden"),r(void 0===A.version||"string"==typeof A.version||Array.isArray(A.version),"options.version must be a string or an array of string");let t=A.version||["ipv4","ipv6","ipvfuture"];Array.isArray(t)||(t=[t]),r(t.length>=1,"options.version must have at least 1 version specified");for(let A=0;A<t.length;++A)r("string"==typeof t[A],"options.version must only contain strings"),t[A]=t[A].toLowerCase(),r(["ipv4","ipv6","ipvfuture"].includes(t[A]),"options.version contains unknown version "+t[A]+" - must be one of ipv4, ipv6, ipvfuture");t=Array.from(new Set(t));const n=t.map((A=>{if("forbidden"===e)return i.ip[A];const t="\\/".concat("ipv4"===A?i.ip.v4Cidr:i.ip.v6Cidr);return"required"===e?"".concat(i.ip[A]).concat(t):"".concat(i.ip[A],"(?:").concat(t,")?")})),o="(?:".concat(n.join("|"),")"),s=new RegExp("^".concat(o,"$"));return{cidr:e,versions:t,regex:s,raw:o}}},function(A,e){},function(A,e,t){"use strict";const r=t(0),i=t(3),n={};n.Map=class extends Map{slice(){return new n.Map(this)}},A.exports=i.extend({type:"symbol",terms:{map:{init:new n.Map}},coerce:{method(A,{schema:e,error:t}){const r=e.$_terms.map.get(A);return r&&(A=r),e._flags.only&&"symbol"!=typeof A?{value:A,errors:t("symbol.map",{map:e.$_terms.map})}:{value:A}}},validate(A,{error:e}){if("symbol"!=typeof A)return{value:A,errors:e("symbol.base")}},rules:{map:{method(A){A&&!A[Symbol.iterator]&&"object"==typeof A&&(A=Object.entries(A)),r(A&&A[Symbol.iterator],"Iterable must be an iterable or object");const e=this.clone(),t=[];for(const i of A){r(i&&i[Symbol.iterator],"Entry must be an iterable");const[A,n]=i;r("object"!=typeof A&&"function"!=typeof A&&"symbol"!=typeof A,"Key must not be of type object, function, or Symbol"),r("symbol"==typeof n,"Value must be a Symbol"),e.$_terms.map.set(A,n),t.push(n)}return e.valid(...t)}}},manifest:{build:(A,e)=>(e.map&&(A=A.map(e.map)),A)},messages:{"symbol.base":"{{#label}} must be a symbol","symbol.map":"{{#label}} must be one of {{#map}}"}})}])},22257:(A,e,t)=>{const r=Symbol("SemVer ANY");class i{static get ANY(){return r}constructor(A,e){if(e=n(e),A instanceof i){if(A.loose===!!e.loose)return A;A=A.value}A=A.trim().split(/\s+/).join(" "),l("comparator",A,e),this.options=e,this.loose=!!e.loose,this.parse(A),this.semver===r?this.value="":this.value=this.operator+this.semver.version,l("comp",this)}parse(A){const e=this.options.loose?o[s.COMPARATORLOOSE]:o[s.COMPARATOR],t=A.match(e);if(!t)throw new TypeError(`Invalid comparator: ${A}`);this.operator=void 0!==t[1]?t[1]:"","="===this.operator&&(this.operator=""),t[2]?this.semver=new c(t[2],this.options.loose):this.semver=r}toString(){return this.value}test(A){if(l("Comparator.test",A,this.options.loose),this.semver===r||A===r)return!0;if("string"==typeof A)try{A=new c(A,this.options)}catch(A){return!1}return a(A,this.operator,this.semver,this.options)}intersects(A,e){if(!(A instanceof i))throw new TypeError("a Comparator is required");return""===this.operator?""===this.value||new g(A.value,e).test(this.value):""===A.operator?""===A.value||new g(this.value,e).test(A.semver):!((e=n(e)).includePrerelease&&("<0.0.0-0"===this.value||"<0.0.0-0"===A.value)||!e.includePrerelease&&(this.value.startsWith("<0.0.0")||A.value.startsWith("<0.0.0"))||(!this.operator.startsWith(">")||!A.operator.startsWith(">"))&&(!this.operator.startsWith("<")||!A.operator.startsWith("<"))&&(this.semver.version!==A.semver.version||!this.operator.includes("=")||!A.operator.includes("="))&&!(a(this.semver,"<",A.semver,e)&&this.operator.startsWith(">")&&A.operator.startsWith("<"))&&!(a(this.semver,">",A.semver,e)&&this.operator.startsWith("<")&&A.operator.startsWith(">")))}}A.exports=i;const n=t(12893),{safeRe:o,t:s}=t(55765),a=t(7539),l=t(74225),c=t(26376),g=t(66902)},66902:(A,e,t)=>{class r{constructor(A,e){if(e=n(e),A instanceof r)return A.loose===!!e.loose&&A.includePrerelease===!!e.includePrerelease?A:new r(A.raw,e);if(A instanceof o)return this.raw=A.value,this.set=[[A]],this.format(),this;if(this.options=e,this.loose=!!e.loose,this.includePrerelease=!!e.includePrerelease,this.raw=A.trim().split(/\s+/).join(" "),this.set=this.raw.split("||").map((A=>this.parseRange(A.trim()))).filter((A=>A.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${this.raw}`);if(this.set.length>1){const A=this.set[0];if(this.set=this.set.filter((A=>!I(A[0]))),0===this.set.length)this.set=[A];else if(this.set.length>1)for(const A of this.set)if(1===A.length&&f(A[0])){this.set=[A];break}}this.format()}format(){return this.range=this.set.map((A=>A.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(A){const e=((this.options.includePrerelease&&E)|(this.options.loose&&B))+":"+A,t=i.get(e);if(t)return t;const r=this.options.loose,n=r?l[c.HYPHENRANGELOOSE]:l[c.HYPHENRANGE];A=A.replace(n,T(this.options.includePrerelease)),s("hyphen replace",A),A=A.replace(l[c.COMPARATORTRIM],g),s("comparator trim",A),A=A.replace(l[c.TILDETRIM],u),s("tilde trim",A),A=A.replace(l[c.CARETTRIM],h),s("caret trim",A);let a=A.split(" ").map((A=>d(A,this.options))).join(" ").split(/\s+/).map((A=>M(A,this.options)));r&&(a=a.filter((A=>(s("loose invalid filter",A,this.options),!!A.match(l[c.COMPARATORLOOSE]))))),s("range list",a);const f=new Map,p=a.map((A=>new o(A,this.options)));for(const A of p){if(I(A))return[A];f.set(A.value,A)}f.size>1&&f.has("")&&f.delete("");const w=[...f.values()];return i.set(e,w),w}intersects(A,e){if(!(A instanceof r))throw new TypeError("a Range is required");return this.set.some((t=>p(t,e)&&A.set.some((A=>p(A,e)&&t.every((t=>A.every((A=>t.intersects(A,e)))))))))}test(A){if(!A)return!1;if("string"==typeof A)try{A=new a(A,this.options)}catch(A){return!1}for(let e=0;e<this.set.length;e++)if(b(this.set[e],A,this.options))return!0;return!1}}A.exports=r;const i=new(t(77105))({max:1e3}),n=t(12893),o=t(22257),s=t(74225),a=t(26376),{safeRe:l,t:c,comparatorTrimReplace:g,tildeTrimReplace:u,caretTrimReplace:h}=t(55765),{FLAG_INCLUDE_PRERELEASE:E,FLAG_LOOSE:B}=t(83295),I=A=>"<0.0.0-0"===A.value,f=A=>""===A.value,p=(A,e)=>{let t=!0;const r=A.slice();let i=r.pop();for(;t&&r.length;)t=r.every((A=>i.intersects(A,e))),i=r.pop();return t},d=(A,e)=>(s("comp",A,e),A=Q(A,e),s("caret",A),A=m(A,e),s("tildes",A),A=y(A,e),s("xrange",A),A=v(A,e),s("stars",A),A),w=A=>!A||"x"===A.toLowerCase()||"*"===A,m=(A,e)=>A.trim().split(/\s+/).map((A=>C(A,e))).join(" "),C=(A,e)=>{const t=e.loose?l[c.TILDELOOSE]:l[c.TILDE];return A.replace(t,((e,t,r,i,n)=>{let o;return s("tilde",A,e,t,r,i,n),w(t)?o="":w(r)?o=`>=${t}.0.0 <${+t+1}.0.0-0`:w(i)?o=`>=${t}.${r}.0 <${t}.${+r+1}.0-0`:n?(s("replaceTilde pr",n),o=`>=${t}.${r}.${i}-${n} <${t}.${+r+1}.0-0`):o=`>=${t}.${r}.${i} <${t}.${+r+1}.0-0`,s("tilde return",o),o}))},Q=(A,e)=>A.trim().split(/\s+/).map((A=>R(A,e))).join(" "),R=(A,e)=>{s("caret",A,e);const t=e.loose?l[c.CARETLOOSE]:l[c.CARET],r=e.includePrerelease?"-0":"";return A.replace(t,((e,t,i,n,o)=>{let a;return s("caret",A,e,t,i,n,o),w(t)?a="":w(i)?a=`>=${t}.0.0${r} <${+t+1}.0.0-0`:w(n)?a="0"===t?`>=${t}.${i}.0${r} <${t}.${+i+1}.0-0`:`>=${t}.${i}.0${r} <${+t+1}.0.0-0`:o?(s("replaceCaret pr",o),a="0"===t?"0"===i?`>=${t}.${i}.${n}-${o} <${t}.${i}.${+n+1}-0`:`>=${t}.${i}.${n}-${o} <${t}.${+i+1}.0-0`:`>=${t}.${i}.${n}-${o} <${+t+1}.0.0-0`):(s("no pr"),a="0"===t?"0"===i?`>=${t}.${i}.${n}${r} <${t}.${i}.${+n+1}-0`:`>=${t}.${i}.${n}${r} <${t}.${+i+1}.0-0`:`>=${t}.${i}.${n} <${+t+1}.0.0-0`),s("caret return",a),a}))},y=(A,e)=>(s("replaceXRanges",A,e),A.split(/\s+/).map((A=>U(A,e))).join(" ")),U=(A,e)=>{A=A.trim();const t=e.loose?l[c.XRANGELOOSE]:l[c.XRANGE];return A.replace(t,((t,r,i,n,o,a)=>{s("xRange",A,t,r,i,n,o,a);const l=w(i),c=l||w(n),g=c||w(o),u=g;return"="===r&&u&&(r=""),a=e.includePrerelease?"-0":"",l?t=">"===r||"<"===r?"<0.0.0-0":"*":r&&u?(c&&(n=0),o=0,">"===r?(r=">=",c?(i=+i+1,n=0,o=0):(n=+n+1,o=0)):"<="===r&&(r="<",c?i=+i+1:n=+n+1),"<"===r&&(a="-0"),t=`${r+i}.${n}.${o}${a}`):c?t=`>=${i}.0.0${a} <${+i+1}.0.0-0`:g&&(t=`>=${i}.${n}.0${a} <${i}.${+n+1}.0-0`),s("xRange return",t),t}))},v=(A,e)=>(s("replaceStars",A,e),A.trim().replace(l[c.STAR],"")),M=(A,e)=>(s("replaceGTE0",A,e),A.trim().replace(l[e.includePrerelease?c.GTE0PRE:c.GTE0],"")),T=A=>(e,t,r,i,n,o,s,a,l,c,g,u,h)=>`${t=w(r)?"":w(i)?`>=${r}.0.0${A?"-0":""}`:w(n)?`>=${r}.${i}.0${A?"-0":""}`:o?`>=${t}`:`>=${t}${A?"-0":""}`} ${a=w(l)?"":w(c)?`<${+l+1}.0.0-0`:w(g)?`<${l}.${+c+1}.0-0`:u?`<=${l}.${c}.${g}-${u}`:A?`<${l}.${c}.${+g+1}-0`:`<=${a}`}`.trim(),b=(A,e,t)=>{for(let t=0;t<A.length;t++)if(!A[t].test(e))return!1;if(e.prerelease.length&&!t.includePrerelease){for(let t=0;t<A.length;t++)if(s(A[t].semver),A[t].semver!==o.ANY&&A[t].semver.prerelease.length>0){const r=A[t].semver;if(r.major===e.major&&r.minor===e.minor&&r.patch===e.patch)return!0}return!1}return!0}},26376:(A,e,t)=>{const r=t(74225),{MAX_LENGTH:i,MAX_SAFE_INTEGER:n}=t(83295),{safeRe:o,t:s}=t(55765),a=t(12893),{compareIdentifiers:l}=t(86742);class c{constructor(A,e){if(e=a(e),A instanceof c){if(A.loose===!!e.loose&&A.includePrerelease===!!e.includePrerelease)return A;A=A.version}else if("string"!=typeof A)throw new TypeError(`Invalid version. Must be a string. Got type "${typeof A}".`);if(A.length>i)throw new TypeError(`version is longer than ${i} characters`);r("SemVer",A,e),this.options=e,this.loose=!!e.loose,this.includePrerelease=!!e.includePrerelease;const t=A.trim().match(e.loose?o[s.LOOSE]:o[s.FULL]);if(!t)throw new TypeError(`Invalid Version: ${A}`);if(this.raw=A,this.major=+t[1],this.minor=+t[2],this.patch=+t[3],this.major>n||this.major<0)throw new TypeError("Invalid major version");if(this.minor>n||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>n||this.patch<0)throw new TypeError("Invalid patch version");t[4]?this.prerelease=t[4].split(".").map((A=>{if(/^[0-9]+$/.test(A)){const e=+A;if(e>=0&&e<n)return e}return A})):this.prerelease=[],this.build=t[5]?t[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(A){if(r("SemVer.compare",this.version,this.options,A),!(A instanceof c)){if("string"==typeof A&&A===this.version)return 0;A=new c(A,this.options)}return A.version===this.version?0:this.compareMain(A)||this.comparePre(A)}compareMain(A){return A instanceof c||(A=new c(A,this.options)),l(this.major,A.major)||l(this.minor,A.minor)||l(this.patch,A.patch)}comparePre(A){if(A instanceof c||(A=new c(A,this.options)),this.prerelease.length&&!A.prerelease.length)return-1;if(!this.prerelease.length&&A.prerelease.length)return 1;if(!this.prerelease.length&&!A.prerelease.length)return 0;let e=0;do{const t=this.prerelease[e],i=A.prerelease[e];if(r("prerelease compare",e,t,i),void 0===t&&void 0===i)return 0;if(void 0===i)return 1;if(void 0===t)return-1;if(t!==i)return l(t,i)}while(++e)}compareBuild(A){A instanceof c||(A=new c(A,this.options));let e=0;do{const t=this.build[e],i=A.build[e];if(r("prerelease compare",e,t,i),void 0===t&&void 0===i)return 0;if(void 0===i)return 1;if(void 0===t)return-1;if(t!==i)return l(t,i)}while(++e)}inc(A,e,t){switch(A){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",e,t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",e,t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",e,t),this.inc("pre",e,t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",e,t),this.inc("pre",e,t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":{const A=Number(t)?1:0;if(!e&&!1===t)throw new Error("invalid increment argument: identifier is empty");if(0===this.prerelease.length)this.prerelease=[A];else{let r=this.prerelease.length;for(;--r>=0;)"number"==typeof this.prerelease[r]&&(this.prerelease[r]++,r=-2);if(-1===r){if(e===this.prerelease.join(".")&&!1===t)throw new Error("invalid increment argument: identifier already exists");this.prerelease.push(A)}}if(e){let r=[e,A];!1===t&&(r=[e]),0===l(this.prerelease[0],e)?isNaN(this.prerelease[1])&&(this.prerelease=r):this.prerelease=r}break}default:throw new Error(`invalid increment argument: ${A}`)}return this.raw=this.format(),this.build.length&&(this.raw+=`+${this.build.join(".")}`),this}}A.exports=c},13507:(A,e,t)=>{const r=t(33959);A.exports=(A,e)=>{const t=r(A.trim().replace(/^[=v]+/,""),e);return t?t.version:null}},7539:(A,e,t)=>{const r=t(58718),i=t(81194),n=t(71312),o=t(25903),s=t(21544),a=t(12056);A.exports=(A,e,t,l)=>{switch(e){case"===":return"object"==typeof A&&(A=A.version),"object"==typeof t&&(t=t.version),A===t;case"!==":return"object"==typeof A&&(A=A.version),"object"==typeof t&&(t=t.version),A!==t;case"":case"=":case"==":return r(A,t,l);case"!=":return i(A,t,l);case">":return n(A,t,l);case">=":return o(A,t,l);case"<":return s(A,t,l);case"<=":return a(A,t,l);default:throw new TypeError(`Invalid operator: ${e}`)}}},99038:(A,e,t)=>{const r=t(26376),i=t(33959),{safeRe:n,t:o}=t(55765);A.exports=(A,e)=>{if(A instanceof r)return A;if("number"==typeof A&&(A=String(A)),"string"!=typeof A)return null;let t=null;if((e=e||{}).rtl){let e;for(;(e=n[o.COERCERTL].exec(A))&&(!t||t.index+t[0].length!==A.length);)t&&e.index+e[0].length===t.index+t[0].length||(t=e),n[o.COERCERTL].lastIndex=e.index+e[1].length+e[2].length;n[o.COERCERTL].lastIndex=-1}else t=A.match(n[o.COERCE]);return null===t?null:i(`${t[2]}.${t[3]||"0"}.${t[4]||"0"}`,e)}},88880:(A,e,t)=>{const r=t(26376);A.exports=(A,e,t)=>{const i=new r(A,t),n=new r(e,t);return i.compare(n)||i.compareBuild(n)}},27880:(A,e,t)=>{const r=t(46269);A.exports=(A,e)=>r(A,e,!0)},46269:(A,e,t)=>{const r=t(26376);A.exports=(A,e,t)=>new r(A,t).compare(new r(e,t))},62378:(A,e,t)=>{const r=t(33959);A.exports=(A,e)=>{const t=r(A,null,!0),i=r(e,null,!0),n=t.compare(i);if(0===n)return null;const o=n>0,s=o?t:i,a=o?i:t,l=!!s.prerelease.length;if(a.prerelease.length&&!l)return a.patch||a.minor?s.patch?"patch":s.minor?"minor":"major":"major";const c=l?"pre":"";return t.major!==i.major?c+"major":t.minor!==i.minor?c+"minor":t.patch!==i.patch?c+"patch":"prerelease"}},58718:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>0===r(A,e,t)},71312:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>r(A,e,t)>0},25903:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>r(A,e,t)>=0},20253:(A,e,t)=>{const r=t(26376);A.exports=(A,e,t,i,n)=>{"string"==typeof t&&(n=i,i=t,t=void 0);try{return new r(A instanceof r?A.version:A,t).inc(e,i,n).version}catch(A){return null}}},21544:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>r(A,e,t)<0},12056:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>r(A,e,t)<=0},38679:(A,e,t)=>{const r=t(26376);A.exports=(A,e)=>new r(A,e).major},87789:(A,e,t)=>{const r=t(26376);A.exports=(A,e)=>new r(A,e).minor},81194:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>0!==r(A,e,t)},33959:(A,e,t)=>{const r=t(26376);A.exports=(A,e,t=!1)=>{if(A instanceof r)return A;try{return new r(A,e)}catch(A){if(!t)return null;throw A}}},52358:(A,e,t)=>{const r=t(26376);A.exports=(A,e)=>new r(A,e).patch},57559:(A,e,t)=>{const r=t(33959);A.exports=(A,e)=>{const t=r(A,e);return t&&t.prerelease.length?t.prerelease:null}},79795:(A,e,t)=>{const r=t(46269);A.exports=(A,e,t)=>r(e,A,t)},63657:(A,e,t)=>{const r=t(88880);A.exports=(A,e)=>A.sort(((A,t)=>r(t,A,e)))},45712:(A,e,t)=>{const r=t(66902);A.exports=(A,e,t)=>{try{e=new r(e,t)}catch(A){return!1}return e.test(A)}},21100:(A,e,t)=>{const r=t(88880);A.exports=(A,e)=>A.sort(((A,t)=>r(A,t,e)))},76397:(A,e,t)=>{const r=t(33959);A.exports=(A,e)=>{const t=r(A,e);return t?t.version:null}},81249:(A,e,t)=>{const r=t(55765),i=t(83295),n=t(26376),o=t(86742),s=t(33959),a=t(76397),l=t(13507),c=t(20253),g=t(62378),u=t(38679),h=t(87789),E=t(52358),B=t(57559),I=t(46269),f=t(79795),p=t(27880),d=t(88880),w=t(21100),m=t(63657),C=t(71312),Q=t(21544),R=t(58718),y=t(81194),U=t(25903),v=t(12056),M=t(7539),T=t(99038),b=t(22257),S=t(66902),F=t(45712),D=t(51042),N=t(85775),G=t(71657),V=t(95316),k=t(89042),O=t(6826),x=t(97606),Z=t(50032),J=t(82937),P=t(17908),Y=t(50799);A.exports={parse:s,valid:a,clean:l,inc:c,diff:g,major:u,minor:h,patch:E,prerelease:B,compare:I,rcompare:f,compareLoose:p,compareBuild:d,sort:w,rsort:m,gt:C,lt:Q,eq:R,neq:y,gte:U,lte:v,cmp:M,coerce:T,Comparator:b,Range:S,satisfies:F,toComparators:D,maxSatisfying:N,minSatisfying:G,minVersion:V,validRange:k,outside:O,gtr:x,ltr:Z,intersects:J,simplifyRange:P,subset:Y,SemVer:n,re:r.re,src:r.src,tokens:r.t,SEMVER_SPEC_VERSION:i.SEMVER_SPEC_VERSION,RELEASE_TYPES:i.RELEASE_TYPES,compareIdentifiers:o.compareIdentifiers,rcompareIdentifiers:o.rcompareIdentifiers}},83295:A=>{const e=Number.MAX_SAFE_INTEGER||9007199254740991;A.exports={MAX_LENGTH:256,MAX_SAFE_COMPONENT_LENGTH:16,MAX_SAFE_BUILD_LENGTH:250,MAX_SAFE_INTEGER:e,RELEASE_TYPES:["major","premajor","minor","preminor","patch","prepatch","prerelease"],SEMVER_SPEC_VERSION:"2.0.0",FLAG_INCLUDE_PRERELEASE:1,FLAG_LOOSE:2}},74225:(A,e,t)=>{var r=t(34406);const i="object"==typeof r&&r.env&&r.env.NODE_DEBUG&&/\bsemver\b/i.test(r.env.NODE_DEBUG)?(...A)=>console.error("SEMVER",...A):()=>{};A.exports=i},86742:A=>{const e=/^[0-9]+$/,t=(A,t)=>{const r=e.test(A),i=e.test(t);return r&&i&&(A=+A,t=+t),A===t?0:r&&!i?-1:i&&!r?1:A<t?-1:1};A.exports={compareIdentifiers:t,rcompareIdentifiers:(A,e)=>t(e,A)}},12893:A=>{const e=Object.freeze({loose:!0}),t=Object.freeze({});A.exports=A=>A?"object"!=typeof A?e:A:t},55765:(A,e,t)=>{const{MAX_SAFE_COMPONENT_LENGTH:r,MAX_SAFE_BUILD_LENGTH:i,MAX_LENGTH:n}=t(83295),o=t(74225),s=(e=A.exports={}).re=[],a=e.safeRe=[],l=e.src=[],c=e.t={};let g=0;const u="[a-zA-Z0-9-]",h=[["\\s",1],["\\d",n],[u,i]],E=(A,e,t)=>{const r=(A=>{for(const[e,t]of h)A=A.split(`${e}*`).join(`${e}{0,${t}}`).split(`${e}+`).join(`${e}{1,${t}}`);return A})(e),i=g++;o(A,i,e),c[A]=i,l[i]=e,s[i]=new RegExp(e,t?"g":void 0),a[i]=new RegExp(r,t?"g":void 0)};E("NUMERICIDENTIFIER","0|[1-9]\\d*"),E("NUMERICIDENTIFIERLOOSE","\\d+"),E("NONNUMERICIDENTIFIER",`\\d*[a-zA-Z-]${u}*`),E("MAINVERSION",`(${l[c.NUMERICIDENTIFIER]})\\.(${l[c.NUMERICIDENTIFIER]})\\.(${l[c.NUMERICIDENTIFIER]})`),E("MAINVERSIONLOOSE",`(${l[c.NUMERICIDENTIFIERLOOSE]})\\.(${l[c.NUMERICIDENTIFIERLOOSE]})\\.(${l[c.NUMERICIDENTIFIERLOOSE]})`),E("PRERELEASEIDENTIFIER",`(?:${l[c.NUMERICIDENTIFIER]}|${l[c.NONNUMERICIDENTIFIER]})`),E("PRERELEASEIDENTIFIERLOOSE",`(?:${l[c.NUMERICIDENTIFIERLOOSE]}|${l[c.NONNUMERICIDENTIFIER]})`),E("PRERELEASE",`(?:-(${l[c.PRERELEASEIDENTIFIER]}(?:\\.${l[c.PRERELEASEIDENTIFIER]})*))`),E("PRERELEASELOOSE",`(?:-?(${l[c.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${l[c.PRERELEASEIDENTIFIERLOOSE]})*))`),E("BUILDIDENTIFIER",`${u}+`),E("BUILD",`(?:\\+(${l[c.BUILDIDENTIFIER]}(?:\\.${l[c.BUILDIDENTIFIER]})*))`),E("FULLPLAIN",`v?${l[c.MAINVERSION]}${l[c.PRERELEASE]}?${l[c.BUILD]}?`),E("FULL",`^${l[c.FULLPLAIN]}$`),E("LOOSEPLAIN",`[v=\\s]*${l[c.MAINVERSIONLOOSE]}${l[c.PRERELEASELOOSE]}?${l[c.BUILD]}?`),E("LOOSE",`^${l[c.LOOSEPLAIN]}$`),E("GTLT","((?:<|>)?=?)"),E("XRANGEIDENTIFIERLOOSE",`${l[c.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),E("XRANGEIDENTIFIER",`${l[c.NUMERICIDENTIFIER]}|x|X|\\*`),E("XRANGEPLAIN",`[v=\\s]*(${l[c.XRANGEIDENTIFIER]})(?:\\.(${l[c.XRANGEIDENTIFIER]})(?:\\.(${l[c.XRANGEIDENTIFIER]})(?:${l[c.PRERELEASE]})?${l[c.BUILD]}?)?)?`),E("XRANGEPLAINLOOSE",`[v=\\s]*(${l[c.XRANGEIDENTIFIERLOOSE]})(?:\\.(${l[c.XRANGEIDENTIFIERLOOSE]})(?:\\.(${l[c.XRANGEIDENTIFIERLOOSE]})(?:${l[c.PRERELEASELOOSE]})?${l[c.BUILD]}?)?)?`),E("XRANGE",`^${l[c.GTLT]}\\s*${l[c.XRANGEPLAIN]}$`),E("XRANGELOOSE",`^${l[c.GTLT]}\\s*${l[c.XRANGEPLAINLOOSE]}$`),E("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),E("COERCERTL",l[c.COERCE],!0),E("LONETILDE","(?:~>?)"),E("TILDETRIM",`(\\s*)${l[c.LONETILDE]}\\s+`,!0),e.tildeTrimReplace="$1~",E("TILDE",`^${l[c.LONETILDE]}${l[c.XRANGEPLAIN]}$`),E("TILDELOOSE",`^${l[c.LONETILDE]}${l[c.XRANGEPLAINLOOSE]}$`),E("LONECARET","(?:\\^)"),E("CARETTRIM",`(\\s*)${l[c.LONECARET]}\\s+`,!0),e.caretTrimReplace="$1^",E("CARET",`^${l[c.LONECARET]}${l[c.XRANGEPLAIN]}$`),E("CARETLOOSE",`^${l[c.LONECARET]}${l[c.XRANGEPLAINLOOSE]}$`),E("COMPARATORLOOSE",`^${l[c.GTLT]}\\s*(${l[c.LOOSEPLAIN]})$|^$`),E("COMPARATOR",`^${l[c.GTLT]}\\s*(${l[c.FULLPLAIN]})$|^$`),E("COMPARATORTRIM",`(\\s*)${l[c.GTLT]}\\s*(${l[c.LOOSEPLAIN]}|${l[c.XRANGEPLAIN]})`,!0),e.comparatorTrimReplace="$1$2$3",E("HYPHENRANGE",`^\\s*(${l[c.XRANGEPLAIN]})\\s+-\\s+(${l[c.XRANGEPLAIN]})\\s*$`),E("HYPHENRANGELOOSE",`^\\s*(${l[c.XRANGEPLAINLOOSE]})\\s+-\\s+(${l[c.XRANGEPLAINLOOSE]})\\s*$`),E("STAR","(<|>)?=?\\s*\\*"),E("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),E("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")},97606:(A,e,t)=>{const r=t(6826);A.exports=(A,e,t)=>r(A,e,">",t)},82937:(A,e,t)=>{const r=t(66902);A.exports=(A,e,t)=>(A=new r(A,t),e=new r(e,t),A.intersects(e,t))},50032:(A,e,t)=>{const r=t(6826);A.exports=(A,e,t)=>r(A,e,"<",t)},85775:(A,e,t)=>{const r=t(26376),i=t(66902);A.exports=(A,e,t)=>{let n=null,o=null,s=null;try{s=new i(e,t)}catch(A){return null}return A.forEach((A=>{s.test(A)&&(n&&-1!==o.compare(A)||(n=A,o=new r(n,t)))})),n}},71657:(A,e,t)=>{const r=t(26376),i=t(66902);A.exports=(A,e,t)=>{let n=null,o=null,s=null;try{s=new i(e,t)}catch(A){return null}return A.forEach((A=>{s.test(A)&&(n&&1!==o.compare(A)||(n=A,o=new r(n,t)))})),n}},95316:(A,e,t)=>{const r=t(26376),i=t(66902),n=t(71312);A.exports=(A,e)=>{A=new i(A,e);let t=new r("0.0.0");if(A.test(t))return t;if(t=new r("0.0.0-0"),A.test(t))return t;t=null;for(let e=0;e<A.set.length;++e){const i=A.set[e];let o=null;i.forEach((A=>{const e=new r(A.semver.version);switch(A.operator){case">":0===e.prerelease.length?e.patch++:e.prerelease.push(0),e.raw=e.format();case"":case">=":o&&!n(e,o)||(o=e);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${A.operator}`)}})),!o||t&&!n(t,o)||(t=o)}return t&&A.test(t)?t:null}},6826:(A,e,t)=>{const r=t(26376),i=t(22257),{ANY:n}=i,o=t(66902),s=t(45712),a=t(71312),l=t(21544),c=t(12056),g=t(25903);A.exports=(A,e,t,u)=>{let h,E,B,I,f;switch(A=new r(A,u),e=new o(e,u),t){case">":h=a,E=c,B=l,I=">",f=">=";break;case"<":h=l,E=g,B=a,I="<",f="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(s(A,e,u))return!1;for(let t=0;t<e.set.length;++t){const r=e.set[t];let o=null,s=null;if(r.forEach((A=>{A.semver===n&&(A=new i(">=0.0.0")),o=o||A,s=s||A,h(A.semver,o.semver,u)?o=A:B(A.semver,s.semver,u)&&(s=A)})),o.operator===I||o.operator===f)return!1;if((!s.operator||s.operator===I)&&E(A,s.semver))return!1;if(s.operator===f&&B(A,s.semver))return!1}return!0}},17908:(A,e,t)=>{const r=t(45712),i=t(46269);A.exports=(A,e,t)=>{const n=[];let o=null,s=null;const a=A.sort(((A,e)=>i(A,e,t)));for(const A of a)r(A,e,t)?(s=A,o||(o=A)):(s&&n.push([o,s]),s=null,o=null);o&&n.push([o,null]);const l=[];for(const[A,e]of n)A===e?l.push(A):e||A!==a[0]?e?A===a[0]?l.push(`<=${e}`):l.push(`${A} - ${e}`):l.push(`>=${A}`):l.push("*");const c=l.join(" || "),g="string"==typeof e.raw?e.raw:String(e);return c.length<g.length?c:e}},50799:(A,e,t)=>{const r=t(66902),i=t(22257),{ANY:n}=i,o=t(45712),s=t(46269),a=[new i(">=0.0.0-0")],l=[new i(">=0.0.0")],c=(A,e,t)=>{if(A===e)return!0;if(1===A.length&&A[0].semver===n){if(1===e.length&&e[0].semver===n)return!0;A=t.includePrerelease?a:l}if(1===e.length&&e[0].semver===n){if(t.includePrerelease)return!0;e=l}const r=new Set;let i,c,h,E,B,I,f;for(const e of A)">"===e.operator||">="===e.operator?i=g(i,e,t):"<"===e.operator||"<="===e.operator?c=u(c,e,t):r.add(e.semver);if(r.size>1)return null;if(i&&c){if(h=s(i.semver,c.semver,t),h>0)return null;if(0===h&&(">="!==i.operator||"<="!==c.operator))return null}for(const A of r){if(i&&!o(A,String(i),t))return null;if(c&&!o(A,String(c),t))return null;for(const r of e)if(!o(A,String(r),t))return!1;return!0}let p=!(!c||t.includePrerelease||!c.semver.prerelease.length)&&c.semver,d=!(!i||t.includePrerelease||!i.semver.prerelease.length)&&i.semver;p&&1===p.prerelease.length&&"<"===c.operator&&0===p.prerelease[0]&&(p=!1);for(const A of e){if(f=f||">"===A.operator||">="===A.operator,I=I||"<"===A.operator||"<="===A.operator,i)if(d&&A.semver.prerelease&&A.semver.prerelease.length&&A.semver.major===d.major&&A.semver.minor===d.minor&&A.semver.patch===d.patch&&(d=!1),">"===A.operator||">="===A.operator){if(E=g(i,A,t),E===A&&E!==i)return!1}else if(">="===i.operator&&!o(i.semver,String(A),t))return!1;if(c)if(p&&A.semver.prerelease&&A.semver.prerelease.length&&A.semver.major===p.major&&A.semver.minor===p.minor&&A.semver.patch===p.patch&&(p=!1),"<"===A.operator||"<="===A.operator){if(B=u(c,A,t),B===A&&B!==c)return!1}else if("<="===c.operator&&!o(c.semver,String(A),t))return!1;if(!A.operator&&(c||i)&&0!==h)return!1}return!(i&&I&&!c&&0!==h||c&&f&&!i&&0!==h||d||p)},g=(A,e,t)=>{if(!A)return e;const r=s(A.semver,e.semver,t);return r>0?A:r<0||">"===e.operator&&">="===A.operator?e:A},u=(A,e,t)=>{if(!A)return e;const r=s(A.semver,e.semver,t);return r<0?A:r>0||"<"===e.operator&&"<="===A.operator?e:A};A.exports=(A,e,t={})=>{if(A===e)return!0;A=new r(A,t),e=new r(e,t);let i=!1;A:for(const r of A.set){for(const A of e.set){const e=c(r,A,t);if(i=i||null!==e,e)continue A}if(i)return!1}return!0}},51042:(A,e,t)=>{const r=t(66902);A.exports=(A,e)=>new r(A,e).set.map((A=>A.map((A=>A.value)).join(" ").trim().split(" ")))},89042:(A,e,t)=>{const r=t(66902);A.exports=(A,e)=>{try{return new r(A,e).range||"*"}catch(A){return null}}},19410:(A,e,t)=>{"use strict";t.d(e,{Z:()=>z});var r=t(2784);const i=function(A){var e=typeof A;return null!=A&&("object"==e||"function"==e)},n="object"==typeof global&&global&&global.Object===Object&&global;var o="object"==typeof self&&self&&self.Object===Object&&self;const s=n||o||Function("return this")(),a=function(){return s.Date.now()};var l=/\s/;var c=/^\s+/;const g=function(A){return A?A.slice(0,function(A){for(var e=A.length;e--&&l.test(A.charAt(e)););return e}(A)+1).replace(c,""):A},u=s.Symbol;var h=Object.prototype,E=h.hasOwnProperty,B=h.toString,I=u?u.toStringTag:void 0;var f=Object.prototype.toString;var p=u?u.toStringTag:void 0;const d=function(A){return null==A?void 0===A?"[object Undefined]":"[object Null]":p&&p in Object(A)?function(A){var e=E.call(A,I),t=A[I];try{A[I]=void 0;var r=!0}catch(A){}var i=B.call(A);return r&&(e?A[I]=t:delete A[I]),i}(A):function(A){return f.call(A)}(A)};var w=/^[-+]0x[0-9a-f]+$/i,m=/^0b[01]+$/i,C=/^0o[0-7]+$/i,Q=parseInt;const R=function(A){if("number"==typeof A)return A;if(function(A){return"symbol"==typeof A||function(A){return null!=A&&"object"==typeof A}(A)&&"[object Symbol]"==d(A)}(A))return NaN;if(i(A)){var e="function"==typeof A.valueOf?A.valueOf():A;A=i(e)?e+"":e}if("string"!=typeof A)return 0===A?A:+A;A=g(A);var t=m.test(A);return t||C.test(A)?Q(A.slice(2),t?2:8):w.test(A)?NaN:+A};var y=Math.max,U=Math.min;const v=function(A,e,t){var r,n,o,s,l,c,g=0,u=!1,h=!1,E=!0;if("function"!=typeof A)throw new TypeError("Expected a function");function B(e){var t=r,i=n;return r=n=void 0,g=e,s=A.apply(i,t)}function I(A){var t=A-c;return void 0===c||t>=e||t<0||h&&A-g>=o}function f(){var A=a();if(I(A))return p(A);l=setTimeout(f,function(A){var t=e-(A-c);return h?U(t,o-(A-g)):t}(A))}function p(A){return l=void 0,E&&r?B(A):(r=n=void 0,s)}function d(){var A=a(),t=I(A);if(r=arguments,n=this,c=A,t){if(void 0===l)return function(A){return g=A,l=setTimeout(f,e),u?B(A):s}(c);if(h)return clearTimeout(l),l=setTimeout(f,e),B(c)}return void 0===l&&(l=setTimeout(f,e)),s}return e=R(e)||0,i(t)&&(u=!!t.leading,o=(h="maxWait"in t)?y(R(t.maxWait)||0,e):o,E="trailing"in t?!!t.trailing:E),d.cancel=function(){void 0!==l&&clearTimeout(l),g=0,r=c=n=l=void 0},d.flush=function(){return void 0===l?s:p(a())},d};var M=t(19131),T=function(){return T=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},T.apply(this,arguments)},b=null,S=null;function F(){if(null===b){if("undefined"==typeof document)return b=0;var A=document.body,e=document.createElement("div");e.classList.add("simplebar-hide-scrollbar"),A.appendChild(e);var t=e.getBoundingClientRect().right;A.removeChild(e),b=t}return b}function D(A){return A&&A.ownerDocument&&A.ownerDocument.defaultView?A.ownerDocument.defaultView:window}function N(A){return A&&A.ownerDocument?A.ownerDocument:document}M&&window.addEventListener("resize",(function(){S!==window.devicePixelRatio&&(S=window.devicePixelRatio,b=null)}));var G=function(A){return Array.prototype.reduce.call(A,(function(A,e){var t=e.name.match(/data-simplebar-(.+)/);if(t){var r=t[1].replace(/\W+(.)/g,(function(A,e){return e.toUpperCase()}));switch(e.value){case"true":A[r]=!0;break;case"false":A[r]=!1;break;case void 0:A[r]=!0;break;default:A[r]=e.value}}return A}),{})};function V(A,e){var t;A&&(t=A.classList).add.apply(t,e.split(" "))}function k(A,e){A&&e.split(" ").forEach((function(e){A.classList.remove(e)}))}function O(A){return".".concat(A.split(" ").join("."))}var x=Object.freeze({__proto__:null,getElementWindow:D,getElementDocument:N,getOptions:G,addClasses:V,removeClasses:k,classNamesToQuery:O}),Z=D,J=N,P=G,Y=V,H=k,L=O,j=function(){function A(e,t){void 0===t&&(t={});var r=this;if(this.removePreventClickId=null,this.minScrollbarWidth=20,this.stopScrollDelay=175,this.isScrolling=!1,this.isMouseEntering=!1,this.scrollXTicking=!1,this.scrollYTicking=!1,this.wrapperEl=null,this.contentWrapperEl=null,this.contentEl=null,this.offsetEl=null,this.maskEl=null,this.placeholderEl=null,this.heightAutoObserverWrapperEl=null,this.heightAutoObserverEl=null,this.rtlHelpers=null,this.scrollbarWidth=0,this.resizeObserver=null,this.mutationObserver=null,this.elStyles=null,this.isRtl=null,this.mouseX=0,this.mouseY=0,this.onMouseMove=function(){},this.onWindowResize=function(){},this.onStopScrolling=function(){},this.onMouseEntered=function(){},this.onScroll=function(){var A=Z(r.el);r.scrollXTicking||(A.requestAnimationFrame(r.scrollX),r.scrollXTicking=!0),r.scrollYTicking||(A.requestAnimationFrame(r.scrollY),r.scrollYTicking=!0),r.isScrolling||(r.isScrolling=!0,Y(r.el,r.classNames.scrolling)),r.showScrollbar("x"),r.showScrollbar("y"),r.onStopScrolling()},this.scrollX=function(){r.axis.x.isOverflowing&&r.positionScrollbar("x"),r.scrollXTicking=!1},this.scrollY=function(){r.axis.y.isOverflowing&&r.positionScrollbar("y"),r.scrollYTicking=!1},this._onStopScrolling=function(){H(r.el,r.classNames.scrolling),r.options.autoHide&&(r.hideScrollbar("x"),r.hideScrollbar("y")),r.isScrolling=!1},this.onMouseEnter=function(){r.isMouseEntering||(Y(r.el,r.classNames.mouseEntered),r.showScrollbar("x"),r.showScrollbar("y"),r.isMouseEntering=!0),r.onMouseEntered()},this._onMouseEntered=function(){H(r.el,r.classNames.mouseEntered),r.options.autoHide&&(r.hideScrollbar("x"),r.hideScrollbar("y")),r.isMouseEntering=!1},this._onMouseMove=function(A){r.mouseX=A.clientX,r.mouseY=A.clientY,(r.axis.x.isOverflowing||r.axis.x.forceVisible)&&r.onMouseMoveForAxis("x"),(r.axis.y.isOverflowing||r.axis.y.forceVisible)&&r.onMouseMoveForAxis("y")},this.onMouseLeave=function(){r.onMouseMove.cancel(),(r.axis.x.isOverflowing||r.axis.x.forceVisible)&&r.onMouseLeaveForAxis("x"),(r.axis.y.isOverflowing||r.axis.y.forceVisible)&&r.onMouseLeaveForAxis("y"),r.mouseX=-1,r.mouseY=-1},this._onWindowResize=function(){r.scrollbarWidth=r.getScrollbarWidth(),r.hideNativeScrollbar()},this.onPointerEvent=function(A){var e,t;r.axis.x.track.el&&r.axis.y.track.el&&r.axis.x.scrollbar.el&&r.axis.y.scrollbar.el&&(r.axis.x.track.rect=r.axis.x.track.el.getBoundingClientRect(),r.axis.y.track.rect=r.axis.y.track.el.getBoundingClientRect(),(r.axis.x.isOverflowing||r.axis.x.forceVisible)&&(e=r.isWithinBounds(r.axis.x.track.rect)),(r.axis.y.isOverflowing||r.axis.y.forceVisible)&&(t=r.isWithinBounds(r.axis.y.track.rect)),(e||t)&&(A.stopPropagation(),"pointerdown"===A.type&&"touch"!==A.pointerType&&(e&&(r.axis.x.scrollbar.rect=r.axis.x.scrollbar.el.getBoundingClientRect(),r.isWithinBounds(r.axis.x.scrollbar.rect)?r.onDragStart(A,"x"):r.onTrackClick(A,"x")),t&&(r.axis.y.scrollbar.rect=r.axis.y.scrollbar.el.getBoundingClientRect(),r.isWithinBounds(r.axis.y.scrollbar.rect)?r.onDragStart(A,"y"):r.onTrackClick(A,"y")))))},this.drag=function(e){var t,i,n,o,s,a,l,c,g,u,h;if(r.draggedAxis&&r.contentWrapperEl){var E=r.axis[r.draggedAxis].track,B=null!==(i=null===(t=E.rect)||void 0===t?void 0:t[r.axis[r.draggedAxis].sizeAttr])&&void 0!==i?i:0,I=r.axis[r.draggedAxis].scrollbar,f=null!==(o=null===(n=r.contentWrapperEl)||void 0===n?void 0:n[r.axis[r.draggedAxis].scrollSizeAttr])&&void 0!==o?o:0,p=parseInt(null!==(a=null===(s=r.elStyles)||void 0===s?void 0:s[r.axis[r.draggedAxis].sizeAttr])&&void 0!==a?a:"0px",10);e.preventDefault(),e.stopPropagation();var d=("y"===r.draggedAxis?e.pageY:e.pageX)-(null!==(c=null===(l=E.rect)||void 0===l?void 0:l[r.axis[r.draggedAxis].offsetAttr])&&void 0!==c?c:0)-r.axis[r.draggedAxis].dragOffset,w=(d="x"===r.draggedAxis&&r.isRtl?(null!==(u=null===(g=E.rect)||void 0===g?void 0:g[r.axis[r.draggedAxis].sizeAttr])&&void 0!==u?u:0)-I.size-d:d)/(B-I.size)*(f-p);"x"===r.draggedAxis&&r.isRtl&&(w=(null===(h=A.getRtlHelpers())||void 0===h?void 0:h.isScrollingToNegative)?-w:w),r.contentWrapperEl[r.axis[r.draggedAxis].scrollOffsetAttr]=w}},this.onEndDrag=function(A){var e=J(r.el),t=Z(r.el);A.preventDefault(),A.stopPropagation(),H(r.el,r.classNames.dragging),e.removeEventListener("mousemove",r.drag,!0),e.removeEventListener("mouseup",r.onEndDrag,!0),r.removePreventClickId=t.setTimeout((function(){e.removeEventListener("click",r.preventClick,!0),e.removeEventListener("dblclick",r.preventClick,!0),r.removePreventClickId=null}))},this.preventClick=function(A){A.preventDefault(),A.stopPropagation()},this.el=e,this.options=T(T({},A.defaultOptions),t),this.classNames=T(T({},A.defaultOptions.classNames),t.classNames),this.axis={x:{scrollOffsetAttr:"scrollLeft",sizeAttr:"width",scrollSizeAttr:"scrollWidth",offsetSizeAttr:"offsetWidth",offsetAttr:"left",overflowAttr:"overflowX",dragOffset:0,isOverflowing:!0,forceVisible:!1,track:{size:null,el:null,rect:null,isVisible:!1},scrollbar:{size:null,el:null,rect:null,isVisible:!1}},y:{scrollOffsetAttr:"scrollTop",sizeAttr:"height",scrollSizeAttr:"scrollHeight",offsetSizeAttr:"offsetHeight",offsetAttr:"top",overflowAttr:"overflowY",dragOffset:0,isOverflowing:!0,forceVisible:!1,track:{size:null,el:null,rect:null,isVisible:!1},scrollbar:{size:null,el:null,rect:null,isVisible:!1}}},"object"!=typeof this.el||!this.el.nodeName)throw new Error("Argument passed to SimpleBar must be an HTML element instead of ".concat(this.el));this.onMouseMove=function(A,e,t){var r=!0,n=!0;if("function"!=typeof A)throw new TypeError("Expected a function");return i(t)&&(r="leading"in t?!!t.leading:r,n="trailing"in t?!!t.trailing:n),v(A,e,{leading:r,maxWait:e,trailing:n})}(this._onMouseMove,64),this.onWindowResize=v(this._onWindowResize,64,{leading:!0}),this.onStopScrolling=v(this._onStopScrolling,this.stopScrollDelay),this.onMouseEntered=v(this._onMouseEntered,this.stopScrollDelay),this.init()}return A.getRtlHelpers=function(){if(A.rtlHelpers)return A.rtlHelpers;var e=document.createElement("div");e.innerHTML='<div class="simplebar-dummy-scrollbar-size"><div></div></div>';var t=e.firstElementChild,r=null==t?void 0:t.firstElementChild;if(!r)return null;document.body.appendChild(t),t.scrollLeft=0;var i=A.getOffset(t),n=A.getOffset(r);t.scrollLeft=-999;var o=A.getOffset(r);return document.body.removeChild(t),A.rtlHelpers={isScrollOriginAtZero:i.left!==n.left,isScrollingToNegative:n.left!==o.left},A.rtlHelpers},A.prototype.getScrollbarWidth=function(){try{return this.contentWrapperEl&&"none"===getComputedStyle(this.contentWrapperEl,"::-webkit-scrollbar").display||"scrollbarWidth"in document.documentElement.style||"-ms-overflow-style"in document.documentElement.style?0:F()}catch(A){return F()}},A.getOffset=function(A){var e=A.getBoundingClientRect(),t=J(A),r=Z(A);return{top:e.top+(r.pageYOffset||t.documentElement.scrollTop),left:e.left+(r.pageXOffset||t.documentElement.scrollLeft)}},A.prototype.init=function(){M&&(this.initDOM(),this.rtlHelpers=A.getRtlHelpers(),this.scrollbarWidth=this.getScrollbarWidth(),this.recalculate(),this.initListeners())},A.prototype.initDOM=function(){var A,e;this.wrapperEl=this.el.querySelector(L(this.classNames.wrapper)),this.contentWrapperEl=this.options.scrollableNode||this.el.querySelector(L(this.classNames.contentWrapper)),this.contentEl=this.options.contentNode||this.el.querySelector(L(this.classNames.contentEl)),this.offsetEl=this.el.querySelector(L(this.classNames.offset)),this.maskEl=this.el.querySelector(L(this.classNames.mask)),this.placeholderEl=this.findChild(this.wrapperEl,L(this.classNames.placeholder)),this.heightAutoObserverWrapperEl=this.el.querySelector(L(this.classNames.heightAutoObserverWrapperEl)),this.heightAutoObserverEl=this.el.querySelector(L(this.classNames.heightAutoObserverEl)),this.axis.x.track.el=this.findChild(this.el,"".concat(L(this.classNames.track)).concat(L(this.classNames.horizontal))),this.axis.y.track.el=this.findChild(this.el,"".concat(L(this.classNames.track)).concat(L(this.classNames.vertical))),this.axis.x.scrollbar.el=(null===(A=this.axis.x.track.el)||void 0===A?void 0:A.querySelector(L(this.classNames.scrollbar)))||null,this.axis.y.scrollbar.el=(null===(e=this.axis.y.track.el)||void 0===e?void 0:e.querySelector(L(this.classNames.scrollbar)))||null,this.options.autoHide||(Y(this.axis.x.scrollbar.el,this.classNames.visible),Y(this.axis.y.scrollbar.el,this.classNames.visible))},A.prototype.initListeners=function(){var A,e=this,t=Z(this.el);if(this.el.addEventListener("mouseenter",this.onMouseEnter),this.el.addEventListener("pointerdown",this.onPointerEvent,!0),this.el.addEventListener("mousemove",this.onMouseMove),this.el.addEventListener("mouseleave",this.onMouseLeave),null===(A=this.contentWrapperEl)||void 0===A||A.addEventListener("scroll",this.onScroll),t.addEventListener("resize",this.onWindowResize),this.contentEl){if(window.ResizeObserver){var r=!1,i=t.ResizeObserver||ResizeObserver;this.resizeObserver=new i((function(){r&&t.requestAnimationFrame((function(){e.recalculate()}))})),this.resizeObserver.observe(this.el),this.resizeObserver.observe(this.contentEl),t.requestAnimationFrame((function(){r=!0}))}this.mutationObserver=new t.MutationObserver((function(){t.requestAnimationFrame((function(){e.recalculate()}))})),this.mutationObserver.observe(this.contentEl,{childList:!0,subtree:!0,characterData:!0})}},A.prototype.recalculate=function(){if(this.heightAutoObserverEl&&this.contentEl&&this.contentWrapperEl&&this.wrapperEl&&this.placeholderEl){var A=Z(this.el);this.elStyles=A.getComputedStyle(this.el),this.isRtl="rtl"===this.elStyles.direction;var e=this.contentEl.offsetWidth,t=this.heightAutoObserverEl.offsetHeight<=1,r=this.heightAutoObserverEl.offsetWidth<=1||e>0,i=this.contentWrapperEl.offsetWidth,n=this.elStyles.overflowX,o=this.elStyles.overflowY;this.contentEl.style.padding="".concat(this.elStyles.paddingTop," ").concat(this.elStyles.paddingRight," ").concat(this.elStyles.paddingBottom," ").concat(this.elStyles.paddingLeft),this.wrapperEl.style.margin="-".concat(this.elStyles.paddingTop," -").concat(this.elStyles.paddingRight," -").concat(this.elStyles.paddingBottom," -").concat(this.elStyles.paddingLeft);var s=this.contentEl.scrollHeight,a=this.contentEl.scrollWidth;this.contentWrapperEl.style.height=t?"auto":"100%",this.placeholderEl.style.width=r?"".concat(e||a,"px"):"auto",this.placeholderEl.style.height="".concat(s,"px");var l=this.contentWrapperEl.offsetHeight;this.axis.x.isOverflowing=0!==e&&a>e,this.axis.y.isOverflowing=s>l,this.axis.x.isOverflowing="hidden"!==n&&this.axis.x.isOverflowing,this.axis.y.isOverflowing="hidden"!==o&&this.axis.y.isOverflowing,this.axis.x.forceVisible="x"===this.options.forceVisible||!0===this.options.forceVisible,this.axis.y.forceVisible="y"===this.options.forceVisible||!0===this.options.forceVisible,this.hideNativeScrollbar();var c=this.axis.x.isOverflowing?this.scrollbarWidth:0,g=this.axis.y.isOverflowing?this.scrollbarWidth:0;this.axis.x.isOverflowing=this.axis.x.isOverflowing&&a>i-g,this.axis.y.isOverflowing=this.axis.y.isOverflowing&&s>l-c,this.axis.x.scrollbar.size=this.getScrollbarSize("x"),this.axis.y.scrollbar.size=this.getScrollbarSize("y"),this.axis.x.scrollbar.el&&(this.axis.x.scrollbar.el.style.width="".concat(this.axis.x.scrollbar.size,"px")),this.axis.y.scrollbar.el&&(this.axis.y.scrollbar.el.style.height="".concat(this.axis.y.scrollbar.size,"px")),this.positionScrollbar("x"),this.positionScrollbar("y"),this.toggleTrackVisibility("x"),this.toggleTrackVisibility("y")}},A.prototype.getScrollbarSize=function(A){var e,t;if(void 0===A&&(A="y"),!this.axis[A].isOverflowing||!this.contentEl)return 0;var r,i=this.contentEl[this.axis[A].scrollSizeAttr],n=null!==(t=null===(e=this.axis[A].track.el)||void 0===e?void 0:e[this.axis[A].offsetSizeAttr])&&void 0!==t?t:0,o=n/i;return r=Math.max(~~(o*n),this.options.scrollbarMinSize),this.options.scrollbarMaxSize&&(r=Math.min(r,this.options.scrollbarMaxSize)),r},A.prototype.positionScrollbar=function(e){var t,r,i;void 0===e&&(e="y");var n=this.axis[e].scrollbar;if(this.axis[e].isOverflowing&&this.contentWrapperEl&&n.el&&this.elStyles){var o=this.contentWrapperEl[this.axis[e].scrollSizeAttr],s=(null===(t=this.axis[e].track.el)||void 0===t?void 0:t[this.axis[e].offsetSizeAttr])||0,a=parseInt(this.elStyles[this.axis[e].sizeAttr],10),l=this.contentWrapperEl[this.axis[e].scrollOffsetAttr];l="x"===e&&this.isRtl&&(null===(r=A.getRtlHelpers())||void 0===r?void 0:r.isScrollOriginAtZero)?-l:l,"x"===e&&this.isRtl&&(l=(null===(i=A.getRtlHelpers())||void 0===i?void 0:i.isScrollingToNegative)?l:-l);var c=l/(o-a),g=~~((s-n.size)*c);g="x"===e&&this.isRtl?-g+(s-n.size):g,n.el.style.transform="x"===e?"translate3d(".concat(g,"px, 0, 0)"):"translate3d(0, ".concat(g,"px, 0)")}},A.prototype.toggleTrackVisibility=function(A){void 0===A&&(A="y");var e=this.axis[A].track.el,t=this.axis[A].scrollbar.el;e&&t&&this.contentWrapperEl&&(this.axis[A].isOverflowing||this.axis[A].forceVisible?(e.style.visibility="visible",this.contentWrapperEl.style[this.axis[A].overflowAttr]="scroll",this.el.classList.add("".concat(this.classNames.scrollable,"-").concat(A))):(e.style.visibility="hidden",this.contentWrapperEl.style[this.axis[A].overflowAttr]="hidden",this.el.classList.remove("".concat(this.classNames.scrollable,"-").concat(A))),this.axis[A].isOverflowing?t.style.display="block":t.style.display="none")},A.prototype.showScrollbar=function(A){void 0===A&&(A="y"),this.axis[A].isOverflowing&&!this.axis[A].scrollbar.isVisible&&(Y(this.axis[A].scrollbar.el,this.classNames.visible),this.axis[A].scrollbar.isVisible=!0)},A.prototype.hideScrollbar=function(A){void 0===A&&(A="y"),this.axis[A].isOverflowing&&this.axis[A].scrollbar.isVisible&&(H(this.axis[A].scrollbar.el,this.classNames.visible),this.axis[A].scrollbar.isVisible=!1)},A.prototype.hideNativeScrollbar=function(){this.offsetEl&&(this.offsetEl.style[this.isRtl?"left":"right"]=this.axis.y.isOverflowing||this.axis.y.forceVisible?"-".concat(this.scrollbarWidth,"px"):"0px",this.offsetEl.style.bottom=this.axis.x.isOverflowing||this.axis.x.forceVisible?"-".concat(this.scrollbarWidth,"px"):"0px")},A.prototype.onMouseMoveForAxis=function(A){void 0===A&&(A="y");var e=this.axis[A];e.track.el&&e.scrollbar.el&&(e.track.rect=e.track.el.getBoundingClientRect(),e.scrollbar.rect=e.scrollbar.el.getBoundingClientRect(),this.isWithinBounds(e.track.rect)?(this.showScrollbar(A),Y(e.track.el,this.classNames.hover),this.isWithinBounds(e.scrollbar.rect)?Y(e.scrollbar.el,this.classNames.hover):H(e.scrollbar.el,this.classNames.hover)):(H(e.track.el,this.classNames.hover),this.options.autoHide&&this.hideScrollbar(A)))},A.prototype.onMouseLeaveForAxis=function(A){void 0===A&&(A="y"),H(this.axis[A].track.el,this.classNames.hover),H(this.axis[A].scrollbar.el,this.classNames.hover),this.options.autoHide&&this.hideScrollbar(A)},A.prototype.onDragStart=function(A,e){var t;void 0===e&&(e="y");var r=J(this.el),i=Z(this.el),n=this.axis[e].scrollbar,o="y"===e?A.pageY:A.pageX;this.axis[e].dragOffset=o-((null===(t=n.rect)||void 0===t?void 0:t[this.axis[e].offsetAttr])||0),this.draggedAxis=e,Y(this.el,this.classNames.dragging),r.addEventListener("mousemove",this.drag,!0),r.addEventListener("mouseup",this.onEndDrag,!0),null===this.removePreventClickId?(r.addEventListener("click",this.preventClick,!0),r.addEventListener("dblclick",this.preventClick,!0)):(i.clearTimeout(this.removePreventClickId),this.removePreventClickId=null)},A.prototype.onTrackClick=function(A,e){var t,r,i,n,o=this;void 0===e&&(e="y");var s=this.axis[e];if(this.options.clickOnTrack&&s.scrollbar.el&&this.contentWrapperEl){A.preventDefault();var a=Z(this.el);this.axis[e].scrollbar.rect=s.scrollbar.el.getBoundingClientRect();var l=null!==(r=null===(t=this.axis[e].scrollbar.rect)||void 0===t?void 0:t[this.axis[e].offsetAttr])&&void 0!==r?r:0,c=parseInt(null!==(n=null===(i=this.elStyles)||void 0===i?void 0:i[this.axis[e].sizeAttr])&&void 0!==n?n:"0px",10),g=this.contentWrapperEl[this.axis[e].scrollOffsetAttr],u=("y"===e?this.mouseY-l:this.mouseX-l)<0?-1:1,h=-1===u?g-c:g+c,E=function(){o.contentWrapperEl&&(-1===u?g>h&&(g-=40,o.contentWrapperEl[o.axis[e].scrollOffsetAttr]=g,a.requestAnimationFrame(E)):g<h&&(g+=40,o.contentWrapperEl[o.axis[e].scrollOffsetAttr]=g,a.requestAnimationFrame(E)))};E()}},A.prototype.getContentElement=function(){return this.contentEl},A.prototype.getScrollElement=function(){return this.contentWrapperEl},A.prototype.removeListeners=function(){var A=Z(this.el);this.el.removeEventListener("mouseenter",this.onMouseEnter),this.el.removeEventListener("pointerdown",this.onPointerEvent,!0),this.el.removeEventListener("mousemove",this.onMouseMove),this.el.removeEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl&&this.contentWrapperEl.removeEventListener("scroll",this.onScroll),A.removeEventListener("resize",this.onWindowResize),this.mutationObserver&&this.mutationObserver.disconnect(),this.resizeObserver&&this.resizeObserver.disconnect(),this.onMouseMove.cancel(),this.onWindowResize.cancel(),this.onStopScrolling.cancel(),this.onMouseEntered.cancel()},A.prototype.unMount=function(){this.removeListeners()},A.prototype.isWithinBounds=function(A){return this.mouseX>=A.left&&this.mouseX<=A.left+A.width&&this.mouseY>=A.top&&this.mouseY<=A.top+A.height},A.prototype.findChild=function(A,e){var t=A.matches||A.webkitMatchesSelector||A.mozMatchesSelector||A.msMatchesSelector;return Array.prototype.filter.call(A.children,(function(A){return t.call(A,e)}))[0]},A.rtlHelpers=null,A.defaultOptions={forceVisible:!1,clickOnTrack:!0,scrollbarMinSize:25,scrollbarMaxSize:0,ariaLabel:"scrollable content",classNames:{contentEl:"simplebar-content",contentWrapper:"simplebar-content-wrapper",offset:"simplebar-offset",mask:"simplebar-mask",wrapper:"simplebar-wrapper",placeholder:"simplebar-placeholder",scrollbar:"simplebar-scrollbar",track:"simplebar-track",heightAutoObserverWrapperEl:"simplebar-height-auto-observer-wrapper",heightAutoObserverEl:"simplebar-height-auto-observer",visible:"simplebar-visible",horizontal:"simplebar-horizontal",vertical:"simplebar-vertical",hover:"simplebar-hover",dragging:"simplebar-dragging",scrolling:"simplebar-scrolling",scrollable:"simplebar-scrollable",mouseEntered:"simplebar-mouse-entered"},scrollableNode:null,contentNode:null,autoHide:!0},A.getOptions=P,A.helpers=x,A}(),W=function(){return W=Object.assign||function(A){for(var e,t=1,r=arguments.length;t<r;t++)for(var i in e=arguments[t])Object.prototype.hasOwnProperty.call(e,i)&&(A[i]=e[i]);return A},W.apply(this,arguments)},z=r.forwardRef((function(A,e){var t=A.children,i=A.scrollableNodeProps,n=void 0===i?{}:i,o=function(A,e){var t={};for(var r in A)Object.prototype.hasOwnProperty.call(A,r)&&e.indexOf(r)<0&&(t[r]=A[r]);if(null!=A&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(A);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(A,r[i])&&(t[r[i]]=A[r[i]])}return t}(A,["children","scrollableNodeProps"]),s=r.useRef(),a=r.useRef(),l=r.useRef(),c={},g={};Object.keys(o).forEach((function(A){Object.prototype.hasOwnProperty.call(j.defaultOptions,A)?c[A]=o[A]:g[A]=o[A]}));var u=W(W({},j.defaultOptions.classNames),c.classNames),h=W(W({},n),{className:"".concat(u.contentWrapper).concat(n.className?" ".concat(n.className):""),tabIndex:0,role:"region","aria-label":c.ariaLabel||j.defaultOptions.ariaLabel});return r.useEffect((function(){var A;return a.current=h.ref?h.ref.current:a.current,s.current&&(A=new j(s.current,W(W(W({},c),a.current&&{scrollableNode:a.current}),l.current&&{contentNode:l.current})),"function"==typeof e?e(A):e&&(e.current=A)),function(){null==A||A.unMount(),A=null,"function"==typeof e&&e(null)}}),[]),r.createElement("div",W({"data-simplebar":"init",ref:s},g),r.createElement("div",{className:u.wrapper},r.createElement("div",{className:u.heightAutoObserverWrapperEl},r.createElement("div",{className:u.heightAutoObserverEl})),r.createElement("div",{className:u.mask},r.createElement("div",{className:u.offset},"function"==typeof t?t({scrollableNodeRef:a,scrollableNodeProps:W(W({},h),{ref:a}),contentNodeRef:l,contentNodeProps:{className:u.contentEl,ref:l}}):r.createElement("div",W({},h),r.createElement("div",{className:u.contentEl},t)))),r.createElement("div",{className:u.placeholder})),r.createElement("div",{className:"".concat(u.track," simplebar-horizontal")},r.createElement("div",{className:u.scrollbar})),r.createElement("div",{className:"".concat(u.track," simplebar-vertical")},r.createElement("div",{className:u.scrollbar})))}));z.displayName="SimpleBar"}}]);